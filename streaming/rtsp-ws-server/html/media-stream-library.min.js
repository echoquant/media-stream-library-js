(function webpackUniversalModuleDefinition (root, factory) {
  if (typeof exports === 'object' && typeof module === 'object')
    module.exports = factory();
  else if (typeof define === 'function' && define.amd)
    define([], factory);
  else if (typeof exports === 'object')
    exports["mediaStreamLibrary"] = factory();
  else
    root["mediaStreamLibrary"] = factory();
})(self, function () {
  return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 7997:
/***/ ((module, exports, __webpack_require__) => {

/* provided dependency */ var process = __webpack_require__(2695);
          /* eslint-env browser */

          /**
           * This is the web browser implementation of `debug()`.
           */

          exports.formatArgs = formatArgs;
          exports.save = save;
          exports.load = load;
          exports.useColors = useColors;
          exports.storage = localstorage();
          exports.destroy = (() => {
            let warned = false;

            return () => {
              if (!warned) {
                warned = true;
                console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
              }
            };
          })();

          /**
           * Colors.
           */

          exports.colors = [
            '#0000CC',
            '#0000FF',
            '#0033CC',
            '#0033FF',
            '#0066CC',
            '#0066FF',
            '#0099CC',
            '#0099FF',
            '#00CC00',
            '#00CC33',
            '#00CC66',
            '#00CC99',
            '#00CCCC',
            '#00CCFF',
            '#3300CC',
            '#3300FF',
            '#3333CC',
            '#3333FF',
            '#3366CC',
            '#3366FF',
            '#3399CC',
            '#3399FF',
            '#33CC00',
            '#33CC33',
            '#33CC66',
            '#33CC99',
            '#33CCCC',
            '#33CCFF',
            '#6600CC',
            '#6600FF',
            '#6633CC',
            '#6633FF',
            '#66CC00',
            '#66CC33',
            '#9900CC',
            '#9900FF',
            '#9933CC',
            '#9933FF',
            '#99CC00',
            '#99CC33',
            '#CC0000',
            '#CC0033',
            '#CC0066',
            '#CC0099',
            '#CC00CC',
            '#CC00FF',
            '#CC3300',
            '#CC3333',
            '#CC3366',
            '#CC3399',
            '#CC33CC',
            '#CC33FF',
            '#CC6600',
            '#CC6633',
            '#CC9900',
            '#CC9933',
            '#CCCC00',
            '#CCCC33',
            '#FF0000',
            '#FF0033',
            '#FF0066',
            '#FF0099',
            '#FF00CC',
            '#FF00FF',
            '#FF3300',
            '#FF3333',
            '#FF3366',
            '#FF3399',
            '#FF33CC',
            '#FF33FF',
            '#FF6600',
            '#FF6633',
            '#FF9900',
            '#FF9933',
            '#FFCC00',
            '#FFCC33'
          ];

          /**
           * Currently only WebKit-based Web Inspectors, Firefox >= v31,
           * and the Firebug extension (any Firefox version) are known
           * to support "%c" CSS customizations.
           *
           * TODO: add a `localStorage` variable to explicitly enable/disable colors
           */

          // eslint-disable-next-line complexity
          function useColors () {
            // NB: In an Electron preload script, document will be defined but not fully
            // initialized. Since we know we're in Chrome, we'll just detect this case
            // explicitly
            if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
              return true;
            }

            // Internet Explorer and Edge do not support colors.
            if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
              return false;
            }

            // Is webkit? http://stackoverflow.com/a/16459606/376773
            // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
            return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
              // Is firebug? http://stackoverflow.com/a/398120/376773
              (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
              // Is firefox >= v31?
              // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
              (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
              // Double check webkit in userAgent just in case we are in a worker
              (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
          }

          /**
           * Colorize log arguments if enabled.
           *
           * @api public
           */

          function formatArgs (args) {
            args[0] = (this.useColors ? '%c' : '') +
              this.namespace +
              (this.useColors ? ' %c' : ' ') +
              args[0] +
              (this.useColors ? '%c ' : ' ') +
              '+' + module.exports.humanize(this.diff);

            if (!this.useColors) {
              return;
            }

            const c = 'color: ' + this.color;
            args.splice(1, 0, c, 'color: inherit');

            // The final "%c" is somewhat tricky, because there could be other
            // arguments passed either before or after the %c, so we need to
            // figure out the correct index to insert the CSS into
            let index = 0;
            let lastC = 0;
            args[0].replace(/%[a-zA-Z%]/g, match => {
              if (match === '%%') {
                return;
              }
              index++;
              if (match === '%c') {
                // We only are interested in the *last* %c
                // (the user may have provided their own)
                lastC = index;
              }
            });

            args.splice(lastC, 0, c);
          }

          /**
           * Invokes `console.debug()` when available.
           * No-op when `console.debug` is not a "function".
           * If `console.debug` is not available, falls back
           * to `console.log`.
           *
           * @api public
           */
          exports.log = console.debug || console.log || (() => { });

          /**
           * Save `namespaces`.
           *
           * @param {String} namespaces
           * @api private
           */
          function save (namespaces) {
            try {
              if (namespaces) {
                exports.storage.setItem('debug', namespaces);
              } else {
                exports.storage.removeItem('debug');
              }
            } catch (error) {
              // Swallow
              // XXX (@Qix-) should we be logging these?
            }
          }

          /**
           * Load `namespaces`.
           *
           * @return {String} returns the previously persisted debug modes
           * @api private
           */
          function load () {
            let r;
            try {
              r = exports.storage.getItem('debug');
            } catch (error) {
              // Swallow
              // XXX (@Qix-) should we be logging these?
            }

            // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
            if (!r && typeof process !== 'undefined' && 'env' in process) {
              r = process.env.DEBUG;
            }

            return r;
          }

          /**
           * Localstorage attempts to return the localstorage.
           *
           * This is necessary because safari throws
           * when a user disables cookies/localstorage
           * and you attempt to access it.
           *
           * @return {LocalStorage}
           * @api private
           */

          function localstorage () {
            try {
              // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
              // The Browser also has localStorage in the global context.
              return localStorage;
            } catch (error) {
              // Swallow
              // XXX (@Qix-) should we be logging these?
            }
          }

          module.exports = __webpack_require__(4069)(exports);

          const { formatters } = module.exports;

          /**
           * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
           */

          formatters.j = function (v) {
            try {
              return JSON.stringify(v);
            } catch (error) {
              return '[UnexpectedJSONParseError]: ' + error.message;
            }
          };


          /***/
        }),

/***/ 4069:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


          /**
           * This is the common logic for both the Node.js and web browser
           * implementations of `debug()`.
           */

          function setup (env) {
            createDebug.debug = createDebug;
            createDebug.default = createDebug;
            createDebug.coerce = coerce;
            createDebug.disable = disable;
            createDebug.enable = enable;
            createDebug.enabled = enabled;
            createDebug.humanize = __webpack_require__(6117);
            createDebug.destroy = destroy;

            Object.keys(env).forEach(key => {
              createDebug[key] = env[key];
            });

            /**
            * The currently active debug mode names, and names to skip.
            */

            createDebug.names = [];
            createDebug.skips = [];

            /**
            * Map of special "%n" handling functions, for the debug "format" argument.
            *
            * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
            */
            createDebug.formatters = {};

            /**
            * Selects a color for a debug namespace
            * @param {String} namespace The namespace string for the for the debug instance to be colored
            * @return {Number|String} An ANSI color code for the given namespace
            * @api private
            */
            function selectColor (namespace) {
              let hash = 0;

              for (let i = 0; i < namespace.length; i++) {
                hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
                hash |= 0; // Convert to 32bit integer
              }

              return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
            }
            createDebug.selectColor = selectColor;

            /**
            * Create a debugger with the given `namespace`.
            *
            * @param {String} namespace
            * @return {Function}
            * @api public
            */
            function createDebug (namespace) {
              let prevTime;
              let enableOverride = null;
              let namespacesCache;
              let enabledCache;

              function debug (...args) {
                // Disabled?
                if (!debug.enabled) {
                  return;
                }

                const self = debug;

                // Set `diff` timestamp
                const curr = Number(new Date());
                const ms = curr - (prevTime || curr);
                self.diff = ms;
                self.prev = prevTime;
                self.curr = curr;
                prevTime = curr;

                args[0] = createDebug.coerce(args[0]);

                if (typeof args[0] !== 'string') {
                  // Anything else let's inspect with %O
                  args.unshift('%O');
                }

                // Apply any `formatters` transformations
                let index = 0;
                args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
                  // If we encounter an escaped % then don't increase the array index
                  if (match === '%%') {
                    return '%';
                  }
                  index++;
                  const formatter = createDebug.formatters[format];
                  if (typeof formatter === 'function') {
                    const val = args[index];
                    match = formatter.call(self, val);

                    // Now we need to remove `args[index]` since it's inlined in the `format`
                    args.splice(index, 1);
                    index--;
                  }
                  return match;
                });

                // Apply env-specific formatting (colors, etc.)
                createDebug.formatArgs.call(self, args);

                const logFn = self.log || createDebug.log;
                logFn.apply(self, args);
              }

              debug.namespace = namespace;
              debug.useColors = createDebug.useColors();
              debug.color = createDebug.selectColor(namespace);
              debug.extend = extend;
              debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

              Object.defineProperty(debug, 'enabled', {
                enumerable: true,
                configurable: false,
                get: () => {
                  if (enableOverride !== null) {
                    return enableOverride;
                  }
                  if (namespacesCache !== createDebug.namespaces) {
                    namespacesCache = createDebug.namespaces;
                    enabledCache = createDebug.enabled(namespace);
                  }

                  return enabledCache;
                },
                set: v => {
                  enableOverride = v;
                }
              });

              // Env-specific initialization logic for debug instances
              if (typeof createDebug.init === 'function') {
                createDebug.init(debug);
              }

              return debug;
            }

            function extend (namespace, delimiter) {
              const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
              newDebug.log = this.log;
              return newDebug;
            }

            /**
            * Enables a debug mode by namespaces. This can include modes
            * separated by a colon and wildcards.
            *
            * @param {String} namespaces
            * @api public
            */
            function enable (namespaces) {
              createDebug.save(namespaces);
              createDebug.namespaces = namespaces;

              createDebug.names = [];
              createDebug.skips = [];

              let i;
              const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
              const len = split.length;

              for (i = 0; i < len; i++) {
                if (!split[i]) {
                  // ignore empty strings
                  continue;
                }

                namespaces = split[i].replace(/\*/g, '.*?');

                if (namespaces[0] === '-') {
                  createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
                } else {
                  createDebug.names.push(new RegExp('^' + namespaces + '$'));
                }
              }
            }

            /**
            * Disable debug output.
            *
            * @return {String} namespaces
            * @api public
            */
            function disable () {
              const namespaces = [
                ...createDebug.names.map(toNamespace),
                ...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
              ].join(',');
              createDebug.enable('');
              return namespaces;
            }

            /**
            * Returns true if the given mode name is enabled, false otherwise.
            *
            * @param {String} name
            * @return {Boolean}
            * @api public
            */
            function enabled (name) {
              if (name[name.length - 1] === '*') {
                return true;
              }

              let i;
              let len;

              for (i = 0, len = createDebug.skips.length; i < len; i++) {
                if (createDebug.skips[i].test(name)) {
                  return false;
                }
              }

              for (i = 0, len = createDebug.names.length; i < len; i++) {
                if (createDebug.names[i].test(name)) {
                  return true;
                }
              }

              return false;
            }

            /**
            * Convert regexp to namespace
            *
            * @param {RegExp} regxep
            * @return {String} namespace
            * @api private
            */
            function toNamespace (regexp) {
              return regexp.toString()
                .substring(2, regexp.toString().length - 2)
                .replace(/\.\*\?$/, '*');
            }

            /**
            * Coerce `val`.
            *
            * @param {Mixed} val
            * @return {Mixed}
            * @api private
            */
            function coerce (val) {
              if (val instanceof Error) {
                return val.stack || val.message;
              }
              return val;
            }

            /**
            * XXX DO NOT USE. This is a temporary stub function.
            * XXX It WILL be removed in the next major release.
            */
            function destroy () {
              console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
            }

            createDebug.enable(createDebug.load());

            return createDebug;
          }

          module.exports = setup;


          /***/
        }),

/***/ 7378:
/***/ ((__unused_webpack_module, exports) => {

          "use strict";


          exports.byteLength = byteLength
          exports.toByteArray = toByteArray
          exports.fromByteArray = fromByteArray

          var lookup = []
          var revLookup = []
          var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

          var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
          for (var i = 0, len = code.length; i < len; ++i) {
            lookup[i] = code[i]
            revLookup[code.charCodeAt(i)] = i
          }

          // Support decoding URL-safe base64 strings, as Node.js does.
          // See: https://en.wikipedia.org/wiki/Base64#URL_applications
          revLookup['-'.charCodeAt(0)] = 62
          revLookup['_'.charCodeAt(0)] = 63

          function getLens (b64) {
            var len = b64.length

            if (len % 4 > 0) {
              throw new Error('Invalid string. Length must be a multiple of 4')
            }

            // Trim off extra bytes after placeholder bytes are found
            // See: https://github.com/beatgammit/base64-js/issues/42
            var validLen = b64.indexOf('=')
            if (validLen === -1) validLen = len

            var placeHoldersLen = validLen === len
              ? 0
              : 4 - (validLen % 4)

            return [validLen, placeHoldersLen]
          }

          // base64 is 4/3 + up to two characters of the original data
          function byteLength (b64) {
            var lens = getLens(b64)
            var validLen = lens[0]
            var placeHoldersLen = lens[1]
            return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
          }

          function _byteLength (b64, validLen, placeHoldersLen) {
            return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
          }

          function toByteArray (b64) {
            var tmp
            var lens = getLens(b64)
            var validLen = lens[0]
            var placeHoldersLen = lens[1]

            var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

            var curByte = 0

            // if there are placeholders, only get up to the last complete 4 chars
            var len = placeHoldersLen > 0
              ? validLen - 4
              : validLen

            var i
            for (i = 0; i < len; i += 4) {
              tmp =
                (revLookup[b64.charCodeAt(i)] << 18) |
                (revLookup[b64.charCodeAt(i + 1)] << 12) |
                (revLookup[b64.charCodeAt(i + 2)] << 6) |
                revLookup[b64.charCodeAt(i + 3)]
              arr[curByte++] = (tmp >> 16) & 0xFF
              arr[curByte++] = (tmp >> 8) & 0xFF
              arr[curByte++] = tmp & 0xFF
            }

            if (placeHoldersLen === 2) {
              tmp =
                (revLookup[b64.charCodeAt(i)] << 2) |
                (revLookup[b64.charCodeAt(i + 1)] >> 4)
              arr[curByte++] = tmp & 0xFF
            }

            if (placeHoldersLen === 1) {
              tmp =
                (revLookup[b64.charCodeAt(i)] << 10) |
                (revLookup[b64.charCodeAt(i + 1)] << 4) |
                (revLookup[b64.charCodeAt(i + 2)] >> 2)
              arr[curByte++] = (tmp >> 8) & 0xFF
              arr[curByte++] = tmp & 0xFF
            }

            return arr
          }

          function tripletToBase64 (num) {
            return lookup[num >> 18 & 0x3F] +
              lookup[num >> 12 & 0x3F] +
              lookup[num >> 6 & 0x3F] +
              lookup[num & 0x3F]
          }

          function encodeChunk (uint8, start, end) {
            var tmp
            var output = []
            for (var i = start; i < end; i += 3) {
              tmp =
                ((uint8[i] << 16) & 0xFF0000) +
                ((uint8[i + 1] << 8) & 0xFF00) +
                (uint8[i + 2] & 0xFF)
              output.push(tripletToBase64(tmp))
            }
            return output.join('')
          }

          function fromByteArray (uint8) {
            var tmp
            var len = uint8.length
            var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
            var parts = []
            var maxChunkLength = 16383 // must be multiple of 3

            // go through the array every three bytes, we'll deal with trailing stuff later
            for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
              parts.push(encodeChunk(
                uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
              ))
            }

            // pad the end with zeros, but make sure to not forget the extra bytes
            if (extraBytes === 1) {
              tmp = uint8[len - 1]
              parts.push(
                lookup[tmp >> 2] +
                lookup[(tmp << 4) & 0x3F] +
                '=='
              )
            } else if (extraBytes === 2) {
              tmp = (uint8[len - 2] << 8) + uint8[len - 1]
              parts.push(
                lookup[tmp >> 10] +
                lookup[(tmp >> 4) & 0x3F] +
                lookup[(tmp << 2) & 0x3F] +
                '='
              )
            }

            return parts.join('')
          }


          /***/
        }),

/***/ 7866:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

          "use strict";
          /*!
           * The buffer module from node.js, for the browser.
           *
           * @author   Feross Aboukhadijeh <https://feross.org>
           * @license  MIT
           */
          /* eslint-disable no-proto */



          const base64 = __webpack_require__(7378)
          const ieee754 = __webpack_require__(9258)
          const customInspectSymbol =
            (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation
              ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
              : null

          exports.Buffer = Buffer
          exports.SlowBuffer = SlowBuffer
          exports.INSPECT_MAX_BYTES = 50

          const K_MAX_LENGTH = 0x7fffffff
          exports.kMaxLength = K_MAX_LENGTH

          /**
           * If `Buffer.TYPED_ARRAY_SUPPORT`:
           *   === true    Use Uint8Array implementation (fastest)
           *   === false   Print warning and recommend using `buffer` v4.x which has an Object
           *               implementation (most compatible, even IE6)
           *
           * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
           * Opera 11.6+, iOS 4.2+.
           *
           * We report that the browser does not support typed arrays if the are not subclassable
           * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
           * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
           * for __proto__ and has a buggy typed array implementation.
           */
          Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

          if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
            typeof console.error === 'function') {
            console.error(
              'This browser lacks typed array (Uint8Array) support which is required by ' +
              '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
            )
          }

          function typedArraySupport () {
            // Can typed array instances can be augmented?
            try {
              const arr = new Uint8Array(1)
              const proto = { foo: function () { return 42 } }
              Object.setPrototypeOf(proto, Uint8Array.prototype)
              Object.setPrototypeOf(arr, proto)
              return arr.foo() === 42
            } catch (e) {
              return false
            }
          }

          Object.defineProperty(Buffer.prototype, 'parent', {
            enumerable: true,
            get: function () {
              if (!Buffer.isBuffer(this)) return undefined
              return this.buffer
            }
          })

          Object.defineProperty(Buffer.prototype, 'offset', {
            enumerable: true,
            get: function () {
              if (!Buffer.isBuffer(this)) return undefined
              return this.byteOffset
            }
          })

          function createBuffer (length) {
            if (length > K_MAX_LENGTH) {
              throw new RangeError('The value "' + length + '" is invalid for option "size"')
            }
            // Return an augmented `Uint8Array` instance
            const buf = new Uint8Array(length)
            Object.setPrototypeOf(buf, Buffer.prototype)
            return buf
          }

          /**
           * The Buffer constructor returns instances of `Uint8Array` that have their
           * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
           * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
           * and the `Uint8Array` methods. Square bracket notation works as expected -- it
           * returns a single octet.
           *
           * The `Uint8Array` prototype remains unmodified.
           */

          function Buffer (arg, encodingOrOffset, length) {
            // Common case.
            if (typeof arg === 'number') {
              if (typeof encodingOrOffset === 'string') {
                throw new TypeError(
                  'The "string" argument must be of type string. Received type number'
                )
              }
              return allocUnsafe(arg)
            }
            return from(arg, encodingOrOffset, length)
          }

          Buffer.poolSize = 8192 // not used by this implementation

          function from (value, encodingOrOffset, length) {
            if (typeof value === 'string') {
              return fromString(value, encodingOrOffset)
            }

            if (ArrayBuffer.isView(value)) {
              return fromArrayView(value)
            }

            if (value == null) {
              throw new TypeError(
                'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
                'or Array-like Object. Received type ' + (typeof value)
              )
            }

            if (isInstance(value, ArrayBuffer) ||
              (value && isInstance(value.buffer, ArrayBuffer))) {
              return fromArrayBuffer(value, encodingOrOffset, length)
            }

            if (typeof SharedArrayBuffer !== 'undefined' &&
              (isInstance(value, SharedArrayBuffer) ||
                (value && isInstance(value.buffer, SharedArrayBuffer)))) {
              return fromArrayBuffer(value, encodingOrOffset, length)
            }

            if (typeof value === 'number') {
              throw new TypeError(
                'The "value" argument must not be of type number. Received type number'
              )
            }

            const valueOf = value.valueOf && value.valueOf()
            if (valueOf != null && valueOf !== value) {
              return Buffer.from(valueOf, encodingOrOffset, length)
            }

            const b = fromObject(value)
            if (b) return b

            if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
              typeof value[Symbol.toPrimitive] === 'function') {
              return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)
            }

            throw new TypeError(
              'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
              'or Array-like Object. Received type ' + (typeof value)
            )
          }

          /**
           * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
           * if value is a number.
           * Buffer.from(str[, encoding])
           * Buffer.from(array)
           * Buffer.from(buffer)
           * Buffer.from(arrayBuffer[, byteOffset[, length]])
           **/
          Buffer.from = function (value, encodingOrOffset, length) {
            return from(value, encodingOrOffset, length)
          }

          // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
          // https://github.com/feross/buffer/pull/148
          Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)
          Object.setPrototypeOf(Buffer, Uint8Array)

          function assertSize (size) {
            if (typeof size !== 'number') {
              throw new TypeError('"size" argument must be of type number')
            } else if (size < 0) {
              throw new RangeError('The value "' + size + '" is invalid for option "size"')
            }
          }

          function alloc (size, fill, encoding) {
            assertSize(size)
            if (size <= 0) {
              return createBuffer(size)
            }
            if (fill !== undefined) {
              // Only pay attention to encoding if it's a string. This
              // prevents accidentally sending in a number that would
              // be interpreted as a start offset.
              return typeof encoding === 'string'
                ? createBuffer(size).fill(fill, encoding)
                : createBuffer(size).fill(fill)
            }
            return createBuffer(size)
          }

          /**
           * Creates a new filled Buffer instance.
           * alloc(size[, fill[, encoding]])
           **/
          Buffer.alloc = function (size, fill, encoding) {
            return alloc(size, fill, encoding)
          }

          function allocUnsafe (size) {
            assertSize(size)
            return createBuffer(size < 0 ? 0 : checked(size) | 0)
          }

          /**
           * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
           * */
          Buffer.allocUnsafe = function (size) {
            return allocUnsafe(size)
          }
          /**
           * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
           */
          Buffer.allocUnsafeSlow = function (size) {
            return allocUnsafe(size)
          }

          function fromString (string, encoding) {
            if (typeof encoding !== 'string' || encoding === '') {
              encoding = 'utf8'
            }

            if (!Buffer.isEncoding(encoding)) {
              throw new TypeError('Unknown encoding: ' + encoding)
            }

            const length = byteLength(string, encoding) | 0
            let buf = createBuffer(length)

            const actual = buf.write(string, encoding)

            if (actual !== length) {
              // Writing a hex string, for example, that contains invalid characters will
              // cause everything after the first invalid character to be ignored. (e.g.
              // 'abxxcd' will be treated as 'ab')
              buf = buf.slice(0, actual)
            }

            return buf
          }

          function fromArrayLike (array) {
            const length = array.length < 0 ? 0 : checked(array.length) | 0
            const buf = createBuffer(length)
            for (let i = 0; i < length; i += 1) {
              buf[i] = array[i] & 255
            }
            return buf
          }

          function fromArrayView (arrayView) {
            if (isInstance(arrayView, Uint8Array)) {
              const copy = new Uint8Array(arrayView)
              return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)
            }
            return fromArrayLike(arrayView)
          }

          function fromArrayBuffer (array, byteOffset, length) {
            if (byteOffset < 0 || array.byteLength < byteOffset) {
              throw new RangeError('"offset" is outside of buffer bounds')
            }

            if (array.byteLength < byteOffset + (length || 0)) {
              throw new RangeError('"length" is outside of buffer bounds')
            }

            let buf
            if (byteOffset === undefined && length === undefined) {
              buf = new Uint8Array(array)
            } else if (length === undefined) {
              buf = new Uint8Array(array, byteOffset)
            } else {
              buf = new Uint8Array(array, byteOffset, length)
            }

            // Return an augmented `Uint8Array` instance
            Object.setPrototypeOf(buf, Buffer.prototype)

            return buf
          }

          function fromObject (obj) {
            if (Buffer.isBuffer(obj)) {
              const len = checked(obj.length) | 0
              const buf = createBuffer(len)

              if (buf.length === 0) {
                return buf
              }

              obj.copy(buf, 0, 0, len)
              return buf
            }

            if (obj.length !== undefined) {
              if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
                return createBuffer(0)
              }
              return fromArrayLike(obj)
            }

            if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
              return fromArrayLike(obj.data)
            }
          }

          function checked (length) {
            // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
            // length is NaN (which is otherwise coerced to zero.)
            if (length >= K_MAX_LENGTH) {
              throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
            }
            return length | 0
          }

          function SlowBuffer (length) {
            if (+length != length) { // eslint-disable-line eqeqeq
              length = 0
            }
            return Buffer.alloc(+length)
          }

          Buffer.isBuffer = function isBuffer (b) {
            return b != null && b._isBuffer === true &&
              b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
          }

          Buffer.compare = function compare (a, b) {
            if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
            if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
            if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
              throw new TypeError(
                'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
              )
            }

            if (a === b) return 0

            let x = a.length
            let y = b.length

            for (let i = 0, len = Math.min(x, y); i < len; ++i) {
              if (a[i] !== b[i]) {
                x = a[i]
                y = b[i]
                break
              }
            }

            if (x < y) return -1
            if (y < x) return 1
            return 0
          }

          Buffer.isEncoding = function isEncoding (encoding) {
            switch (String(encoding).toLowerCase()) {
              case 'hex':
              case 'utf8':
              case 'utf-8':
              case 'ascii':
              case 'latin1':
              case 'binary':
              case 'base64':
              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return true
              default:
                return false
            }
          }

          Buffer.concat = function concat (list, length) {
            if (!Array.isArray(list)) {
              throw new TypeError('"list" argument must be an Array of Buffers')
            }

            if (list.length === 0) {
              return Buffer.alloc(0)
            }

            let i
            if (length === undefined) {
              length = 0
              for (i = 0; i < list.length; ++i) {
                length += list[i].length
              }
            }

            const buffer = Buffer.allocUnsafe(length)
            let pos = 0
            for (i = 0; i < list.length; ++i) {
              let buf = list[i]
              if (isInstance(buf, Uint8Array)) {
                if (pos + buf.length > buffer.length) {
                  if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)
                  buf.copy(buffer, pos)
                } else {
                  Uint8Array.prototype.set.call(
                    buffer,
                    buf,
                    pos
                  )
                }
              } else if (!Buffer.isBuffer(buf)) {
                throw new TypeError('"list" argument must be an Array of Buffers')
              } else {
                buf.copy(buffer, pos)
              }
              pos += buf.length
            }
            return buffer
          }

          function byteLength (string, encoding) {
            if (Buffer.isBuffer(string)) {
              return string.length
            }
            if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
              return string.byteLength
            }
            if (typeof string !== 'string') {
              throw new TypeError(
                'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
                'Received type ' + typeof string
              )
            }

            const len = string.length
            const mustMatch = (arguments.length > 2 && arguments[2] === true)
            if (!mustMatch && len === 0) return 0

            // Use a for loop to avoid recursion
            let loweredCase = false
            for (; ;) {
              switch (encoding) {
                case 'ascii':
                case 'latin1':
                case 'binary':
                  return len
                case 'utf8':
                case 'utf-8':
                  return utf8ToBytes(string).length
                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                  return len * 2
                case 'hex':
                  return len >>> 1
                case 'base64':
                  return base64ToBytes(string).length
                default:
                  if (loweredCase) {
                    return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
                  }
                  encoding = ('' + encoding).toLowerCase()
                  loweredCase = true
              }
            }
          }
          Buffer.byteLength = byteLength

          function slowToString (encoding, start, end) {
            let loweredCase = false

            // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
            // property of a typed array.

            // This behaves neither like String nor Uint8Array in that we set start/end
            // to their upper/lower bounds if the value passed is out of range.
            // undefined is handled specially as per ECMA-262 6th Edition,
            // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
            if (start === undefined || start < 0) {
              start = 0
            }
            // Return early if start > this.length. Done here to prevent potential uint32
            // coercion fail below.
            if (start > this.length) {
              return ''
            }

            if (end === undefined || end > this.length) {
              end = this.length
            }

            if (end <= 0) {
              return ''
            }

            // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
            end >>>= 0
            start >>>= 0

            if (end <= start) {
              return ''
            }

            if (!encoding) encoding = 'utf8'

            while (true) {
              switch (encoding) {
                case 'hex':
                  return hexSlice(this, start, end)

                case 'utf8':
                case 'utf-8':
                  return utf8Slice(this, start, end)

                case 'ascii':
                  return asciiSlice(this, start, end)

                case 'latin1':
                case 'binary':
                  return latin1Slice(this, start, end)

                case 'base64':
                  return base64Slice(this, start, end)

                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                  return utf16leSlice(this, start, end)

                default:
                  if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                  encoding = (encoding + '').toLowerCase()
                  loweredCase = true
              }
            }
          }

          // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
          // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
          // reliably in a browserify context because there could be multiple different
          // copies of the 'buffer' package in use. This method works even for Buffer
          // instances that were created from another copy of the `buffer` package.
          // See: https://github.com/feross/buffer/issues/154
          Buffer.prototype._isBuffer = true

          function swap (b, n, m) {
            const i = b[n]
            b[n] = b[m]
            b[m] = i
          }

          Buffer.prototype.swap16 = function swap16 () {
            const len = this.length
            if (len % 2 !== 0) {
              throw new RangeError('Buffer size must be a multiple of 16-bits')
            }
            for (let i = 0; i < len; i += 2) {
              swap(this, i, i + 1)
            }
            return this
          }

          Buffer.prototype.swap32 = function swap32 () {
            const len = this.length
            if (len % 4 !== 0) {
              throw new RangeError('Buffer size must be a multiple of 32-bits')
            }
            for (let i = 0; i < len; i += 4) {
              swap(this, i, i + 3)
              swap(this, i + 1, i + 2)
            }
            return this
          }

          Buffer.prototype.swap64 = function swap64 () {
            const len = this.length
            if (len % 8 !== 0) {
              throw new RangeError('Buffer size must be a multiple of 64-bits')
            }
            for (let i = 0; i < len; i += 8) {
              swap(this, i, i + 7)
              swap(this, i + 1, i + 6)
              swap(this, i + 2, i + 5)
              swap(this, i + 3, i + 4)
            }
            return this
          }

          Buffer.prototype.toString = function toString () {
            const length = this.length
            if (length === 0) return ''
            if (arguments.length === 0) return utf8Slice(this, 0, length)
            return slowToString.apply(this, arguments)
          }

          Buffer.prototype.toLocaleString = Buffer.prototype.toString

          Buffer.prototype.equals = function equals (b) {
            if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
            if (this === b) return true
            return Buffer.compare(this, b) === 0
          }

          Buffer.prototype.inspect = function inspect () {
            let str = ''
            const max = exports.INSPECT_MAX_BYTES
            str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
            if (this.length > max) str += ' ... '
            return '<Buffer ' + str + '>'
          }
          if (customInspectSymbol) {
            Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect
          }

          Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
            if (isInstance(target, Uint8Array)) {
              target = Buffer.from(target, target.offset, target.byteLength)
            }
            if (!Buffer.isBuffer(target)) {
              throw new TypeError(
                'The "target" argument must be one of type Buffer or Uint8Array. ' +
                'Received type ' + (typeof target)
              )
            }

            if (start === undefined) {
              start = 0
            }
            if (end === undefined) {
              end = target ? target.length : 0
            }
            if (thisStart === undefined) {
              thisStart = 0
            }
            if (thisEnd === undefined) {
              thisEnd = this.length
            }

            if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
              throw new RangeError('out of range index')
            }

            if (thisStart >= thisEnd && start >= end) {
              return 0
            }
            if (thisStart >= thisEnd) {
              return -1
            }
            if (start >= end) {
              return 1
            }

            start >>>= 0
            end >>>= 0
            thisStart >>>= 0
            thisEnd >>>= 0

            if (this === target) return 0

            let x = thisEnd - thisStart
            let y = end - start
            const len = Math.min(x, y)

            const thisCopy = this.slice(thisStart, thisEnd)
            const targetCopy = target.slice(start, end)

            for (let i = 0; i < len; ++i) {
              if (thisCopy[i] !== targetCopy[i]) {
                x = thisCopy[i]
                y = targetCopy[i]
                break
              }
            }

            if (x < y) return -1
            if (y < x) return 1
            return 0
          }

          // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
          // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
          //
          // Arguments:
          // - buffer - a Buffer to search
          // - val - a string, Buffer, or number
          // - byteOffset - an index into `buffer`; will be clamped to an int32
          // - encoding - an optional encoding, relevant is val is a string
          // - dir - true for indexOf, false for lastIndexOf
          function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
            // Empty buffer means no match
            if (buffer.length === 0) return -1

            // Normalize byteOffset
            if (typeof byteOffset === 'string') {
              encoding = byteOffset
              byteOffset = 0
            } else if (byteOffset > 0x7fffffff) {
              byteOffset = 0x7fffffff
            } else if (byteOffset < -0x80000000) {
              byteOffset = -0x80000000
            }
            byteOffset = +byteOffset // Coerce to Number.
            if (numberIsNaN(byteOffset)) {
              // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
              byteOffset = dir ? 0 : (buffer.length - 1)
            }

            // Normalize byteOffset: negative offsets start from the end of the buffer
            if (byteOffset < 0) byteOffset = buffer.length + byteOffset
            if (byteOffset >= buffer.length) {
              if (dir) return -1
              else byteOffset = buffer.length - 1
            } else if (byteOffset < 0) {
              if (dir) byteOffset = 0
              else return -1
            }

            // Normalize val
            if (typeof val === 'string') {
              val = Buffer.from(val, encoding)
            }

            // Finally, search either indexOf (if dir is true) or lastIndexOf
            if (Buffer.isBuffer(val)) {
              // Special case: looking for empty string/buffer always fails
              if (val.length === 0) {
                return -1
              }
              return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
            } else if (typeof val === 'number') {
              val = val & 0xFF // Search for a byte value [0-255]
              if (typeof Uint8Array.prototype.indexOf === 'function') {
                if (dir) {
                  return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
                } else {
                  return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
                }
              }
              return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
            }

            throw new TypeError('val must be string, number or Buffer')
          }

          function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
            let indexSize = 1
            let arrLength = arr.length
            let valLength = val.length

            if (encoding !== undefined) {
              encoding = String(encoding).toLowerCase()
              if (encoding === 'ucs2' || encoding === 'ucs-2' ||
                encoding === 'utf16le' || encoding === 'utf-16le') {
                if (arr.length < 2 || val.length < 2) {
                  return -1
                }
                indexSize = 2
                arrLength /= 2
                valLength /= 2
                byteOffset /= 2
              }
            }

            function read (buf, i) {
              if (indexSize === 1) {
                return buf[i]
              } else {
                return buf.readUInt16BE(i * indexSize)
              }
            }

            let i
            if (dir) {
              let foundIndex = -1
              for (i = byteOffset; i < arrLength; i++) {
                if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                  if (foundIndex === -1) foundIndex = i
                  if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
                } else {
                  if (foundIndex !== -1) i -= i - foundIndex
                  foundIndex = -1
                }
              }
            } else {
              if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
              for (i = byteOffset; i >= 0; i--) {
                let found = true
                for (let j = 0; j < valLength; j++) {
                  if (read(arr, i + j) !== read(val, j)) {
                    found = false
                    break
                  }
                }
                if (found) return i
              }
            }

            return -1
          }

          Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
            return this.indexOf(val, byteOffset, encoding) !== -1
          }

          Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
            return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
          }

          Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
            return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
          }

          function hexWrite (buf, string, offset, length) {
            offset = Number(offset) || 0
            const remaining = buf.length - offset
            if (!length) {
              length = remaining
            } else {
              length = Number(length)
              if (length > remaining) {
                length = remaining
              }
            }

            const strLen = string.length

            if (length > strLen / 2) {
              length = strLen / 2
            }
            let i
            for (i = 0; i < length; ++i) {
              const parsed = parseInt(string.substr(i * 2, 2), 16)
              if (numberIsNaN(parsed)) return i
              buf[offset + i] = parsed
            }
            return i
          }

          function utf8Write (buf, string, offset, length) {
            return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
          }

          function asciiWrite (buf, string, offset, length) {
            return blitBuffer(asciiToBytes(string), buf, offset, length)
          }

          function base64Write (buf, string, offset, length) {
            return blitBuffer(base64ToBytes(string), buf, offset, length)
          }

          function ucs2Write (buf, string, offset, length) {
            return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
          }

          Buffer.prototype.write = function write (string, offset, length, encoding) {
            // Buffer#write(string)
            if (offset === undefined) {
              encoding = 'utf8'
              length = this.length
              offset = 0
              // Buffer#write(string, encoding)
            } else if (length === undefined && typeof offset === 'string') {
              encoding = offset
              length = this.length
              offset = 0
              // Buffer#write(string, offset[, length][, encoding])
            } else if (isFinite(offset)) {
              offset = offset >>> 0
              if (isFinite(length)) {
                length = length >>> 0
                if (encoding === undefined) encoding = 'utf8'
              } else {
                encoding = length
                length = undefined
              }
            } else {
              throw new Error(
                'Buffer.write(string, encoding, offset[, length]) is no longer supported'
              )
            }

            const remaining = this.length - offset
            if (length === undefined || length > remaining) length = remaining

            if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
              throw new RangeError('Attempt to write outside buffer bounds')
            }

            if (!encoding) encoding = 'utf8'

            let loweredCase = false
            for (; ;) {
              switch (encoding) {
                case 'hex':
                  return hexWrite(this, string, offset, length)

                case 'utf8':
                case 'utf-8':
                  return utf8Write(this, string, offset, length)

                case 'ascii':
                case 'latin1':
                case 'binary':
                  return asciiWrite(this, string, offset, length)

                case 'base64':
                  // Warning: maxLength not taken into account in base64Write
                  return base64Write(this, string, offset, length)

                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                  return ucs2Write(this, string, offset, length)

                default:
                  if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
                  encoding = ('' + encoding).toLowerCase()
                  loweredCase = true
              }
            }
          }

          Buffer.prototype.toJSON = function toJSON () {
            return {
              type: 'Buffer',
              data: Array.prototype.slice.call(this._arr || this, 0)
            }
          }

          function base64Slice (buf, start, end) {
            if (start === 0 && end === buf.length) {
              return base64.fromByteArray(buf)
            } else {
              return base64.fromByteArray(buf.slice(start, end))
            }
          }

          function utf8Slice (buf, start, end) {
            end = Math.min(buf.length, end)
            const res = []

            let i = start
            while (i < end) {
              const firstByte = buf[i]
              let codePoint = null
              let bytesPerSequence = (firstByte > 0xEF)
                ? 4
                : (firstByte > 0xDF)
                  ? 3
                  : (firstByte > 0xBF)
                    ? 2
                    : 1

              if (i + bytesPerSequence <= end) {
                let secondByte, thirdByte, fourthByte, tempCodePoint

                switch (bytesPerSequence) {
                  case 1:
                    if (firstByte < 0x80) {
                      codePoint = firstByte
                    }
                    break
                  case 2:
                    secondByte = buf[i + 1]
                    if ((secondByte & 0xC0) === 0x80) {
                      tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
                      if (tempCodePoint > 0x7F) {
                        codePoint = tempCodePoint
                      }
                    }
                    break
                  case 3:
                    secondByte = buf[i + 1]
                    thirdByte = buf[i + 2]
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                      tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
                      if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                        codePoint = tempCodePoint
                      }
                    }
                    break
                  case 4:
                    secondByte = buf[i + 1]
                    thirdByte = buf[i + 2]
                    fourthByte = buf[i + 3]
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                      tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
                      if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                        codePoint = tempCodePoint
                      }
                    }
                }
              }

              if (codePoint === null) {
                // we did not generate a valid codePoint so insert a
                // replacement char (U+FFFD) and advance only 1 byte
                codePoint = 0xFFFD
                bytesPerSequence = 1
              } else if (codePoint > 0xFFFF) {
                // encode to utf16 (surrogate pair dance)
                codePoint -= 0x10000
                res.push(codePoint >>> 10 & 0x3FF | 0xD800)
                codePoint = 0xDC00 | codePoint & 0x3FF
              }

              res.push(codePoint)
              i += bytesPerSequence
            }

            return decodeCodePointsArray(res)
          }

          // Based on http://stackoverflow.com/a/22747272/680742, the browser with
          // the lowest limit is Chrome, with 0x10000 args.
          // We go 1 magnitude less, for safety
          const MAX_ARGUMENTS_LENGTH = 0x1000

          function decodeCodePointsArray (codePoints) {
            const len = codePoints.length
            if (len <= MAX_ARGUMENTS_LENGTH) {
              return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
            }

            // Decode in chunks to avoid "call stack size exceeded".
            let res = ''
            let i = 0
            while (i < len) {
              res += String.fromCharCode.apply(
                String,
                codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
              )
            }
            return res
          }

          function asciiSlice (buf, start, end) {
            let ret = ''
            end = Math.min(buf.length, end)

            for (let i = start; i < end; ++i) {
              ret += String.fromCharCode(buf[i] & 0x7F)
            }
            return ret
          }

          function latin1Slice (buf, start, end) {
            let ret = ''
            end = Math.min(buf.length, end)

            for (let i = start; i < end; ++i) {
              ret += String.fromCharCode(buf[i])
            }
            return ret
          }

          function hexSlice (buf, start, end) {
            const len = buf.length

            if (!start || start < 0) start = 0
            if (!end || end < 0 || end > len) end = len

            let out = ''
            for (let i = start; i < end; ++i) {
              out += hexSliceLookupTable[buf[i]]
            }
            return out
          }

          function utf16leSlice (buf, start, end) {
            const bytes = buf.slice(start, end)
            let res = ''
            // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
            for (let i = 0; i < bytes.length - 1; i += 2) {
              res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
            }
            return res
          }

          Buffer.prototype.slice = function slice (start, end) {
            const len = this.length
            start = ~~start
            end = end === undefined ? len : ~~end

            if (start < 0) {
              start += len
              if (start < 0) start = 0
            } else if (start > len) {
              start = len
            }

            if (end < 0) {
              end += len
              if (end < 0) end = 0
            } else if (end > len) {
              end = len
            }

            if (end < start) end = start

            const newBuf = this.subarray(start, end)
            // Return an augmented `Uint8Array` instance
            Object.setPrototypeOf(newBuf, Buffer.prototype)

            return newBuf
          }

          /*
           * Need to make sure that buffer isn't trying to write out of bounds.
           */
          function checkOffset (offset, ext, length) {
            if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
            if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
          }

          Buffer.prototype.readUintLE =
            Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
              offset = offset >>> 0
              byteLength = byteLength >>> 0
              if (!noAssert) checkOffset(offset, byteLength, this.length)

              let val = this[offset]
              let mul = 1
              let i = 0
              while (++i < byteLength && (mul *= 0x100)) {
                val += this[offset + i] * mul
              }

              return val
            }

          Buffer.prototype.readUintBE =
            Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
              offset = offset >>> 0
              byteLength = byteLength >>> 0
              if (!noAssert) {
                checkOffset(offset, byteLength, this.length)
              }

              let val = this[offset + --byteLength]
              let mul = 1
              while (byteLength > 0 && (mul *= 0x100)) {
                val += this[offset + --byteLength] * mul
              }

              return val
            }

          Buffer.prototype.readUint8 =
            Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
              offset = offset >>> 0
              if (!noAssert) checkOffset(offset, 1, this.length)
              return this[offset]
            }

          Buffer.prototype.readUint16LE =
            Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
              offset = offset >>> 0
              if (!noAssert) checkOffset(offset, 2, this.length)
              return this[offset] | (this[offset + 1] << 8)
            }

          Buffer.prototype.readUint16BE =
            Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
              offset = offset >>> 0
              if (!noAssert) checkOffset(offset, 2, this.length)
              return (this[offset] << 8) | this[offset + 1]
            }

          Buffer.prototype.readUint32LE =
            Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
              offset = offset >>> 0
              if (!noAssert) checkOffset(offset, 4, this.length)

              return ((this[offset]) |
                (this[offset + 1] << 8) |
                (this[offset + 2] << 16)) +
                (this[offset + 3] * 0x1000000)
            }

          Buffer.prototype.readUint32BE =
            Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
              offset = offset >>> 0
              if (!noAssert) checkOffset(offset, 4, this.length)

              return (this[offset] * 0x1000000) +
                ((this[offset + 1] << 16) |
                  (this[offset + 2] << 8) |
                  this[offset + 3])
            }

          Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {
            offset = offset >>> 0
            validateNumber(offset, 'offset')
            const first = this[offset]
            const last = this[offset + 7]
            if (first === undefined || last === undefined) {
              boundsError(offset, this.length - 8)
            }

            const lo = first +
              this[++offset] * 2 ** 8 +
              this[++offset] * 2 ** 16 +
              this[++offset] * 2 ** 24

            const hi = this[++offset] +
              this[++offset] * 2 ** 8 +
              this[++offset] * 2 ** 16 +
              last * 2 ** 24

            return BigInt(lo) + (BigInt(hi) << BigInt(32))
          })

          Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {
            offset = offset >>> 0
            validateNumber(offset, 'offset')
            const first = this[offset]
            const last = this[offset + 7]
            if (first === undefined || last === undefined) {
              boundsError(offset, this.length - 8)
            }

            const hi = first * 2 ** 24 +
              this[++offset] * 2 ** 16 +
              this[++offset] * 2 ** 8 +
              this[++offset]

            const lo = this[++offset] * 2 ** 24 +
              this[++offset] * 2 ** 16 +
              this[++offset] * 2 ** 8 +
              last

            return (BigInt(hi) << BigInt(32)) + BigInt(lo)
          })

          Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
            offset = offset >>> 0
            byteLength = byteLength >>> 0
            if (!noAssert) checkOffset(offset, byteLength, this.length)

            let val = this[offset]
            let mul = 1
            let i = 0
            while (++i < byteLength && (mul *= 0x100)) {
              val += this[offset + i] * mul
            }
            mul *= 0x80

            if (val >= mul) val -= Math.pow(2, 8 * byteLength)

            return val
          }

          Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
            offset = offset >>> 0
            byteLength = byteLength >>> 0
            if (!noAssert) checkOffset(offset, byteLength, this.length)

            let i = byteLength
            let mul = 1
            let val = this[offset + --i]
            while (i > 0 && (mul *= 0x100)) {
              val += this[offset + --i] * mul
            }
            mul *= 0x80

            if (val >= mul) val -= Math.pow(2, 8 * byteLength)

            return val
          }

          Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
            offset = offset >>> 0
            if (!noAssert) checkOffset(offset, 1, this.length)
            if (!(this[offset] & 0x80)) return (this[offset])
            return ((0xff - this[offset] + 1) * -1)
          }

          Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
            offset = offset >>> 0
            if (!noAssert) checkOffset(offset, 2, this.length)
            const val = this[offset] | (this[offset + 1] << 8)
            return (val & 0x8000) ? val | 0xFFFF0000 : val
          }

          Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
            offset = offset >>> 0
            if (!noAssert) checkOffset(offset, 2, this.length)
            const val = this[offset + 1] | (this[offset] << 8)
            return (val & 0x8000) ? val | 0xFFFF0000 : val
          }

          Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
            offset = offset >>> 0
            if (!noAssert) checkOffset(offset, 4, this.length)

            return (this[offset]) |
              (this[offset + 1] << 8) |
              (this[offset + 2] << 16) |
              (this[offset + 3] << 24)
          }

          Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
            offset = offset >>> 0
            if (!noAssert) checkOffset(offset, 4, this.length)

            return (this[offset] << 24) |
              (this[offset + 1] << 16) |
              (this[offset + 2] << 8) |
              (this[offset + 3])
          }

          Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {
            offset = offset >>> 0
            validateNumber(offset, 'offset')
            const first = this[offset]
            const last = this[offset + 7]
            if (first === undefined || last === undefined) {
              boundsError(offset, this.length - 8)
            }

            const val = this[offset + 4] +
              this[offset + 5] * 2 ** 8 +
              this[offset + 6] * 2 ** 16 +
              (last << 24) // Overflow

            return (BigInt(val) << BigInt(32)) +
              BigInt(first +
                this[++offset] * 2 ** 8 +
                this[++offset] * 2 ** 16 +
                this[++offset] * 2 ** 24)
          })

          Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {
            offset = offset >>> 0
            validateNumber(offset, 'offset')
            const first = this[offset]
            const last = this[offset + 7]
            if (first === undefined || last === undefined) {
              boundsError(offset, this.length - 8)
            }

            const val = (first << 24) + // Overflow
              this[++offset] * 2 ** 16 +
              this[++offset] * 2 ** 8 +
              this[++offset]

            return (BigInt(val) << BigInt(32)) +
              BigInt(this[++offset] * 2 ** 24 +
                this[++offset] * 2 ** 16 +
                this[++offset] * 2 ** 8 +
                last)
          })

          Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
            offset = offset >>> 0
            if (!noAssert) checkOffset(offset, 4, this.length)
            return ieee754.read(this, offset, true, 23, 4)
          }

          Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
            offset = offset >>> 0
            if (!noAssert) checkOffset(offset, 4, this.length)
            return ieee754.read(this, offset, false, 23, 4)
          }

          Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
            offset = offset >>> 0
            if (!noAssert) checkOffset(offset, 8, this.length)
            return ieee754.read(this, offset, true, 52, 8)
          }

          Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
            offset = offset >>> 0
            if (!noAssert) checkOffset(offset, 8, this.length)
            return ieee754.read(this, offset, false, 52, 8)
          }

          function checkInt (buf, value, offset, ext, max, min) {
            if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
            if (value > max || value < min) throw new RangeError(`"value" argument is out of bounds ${min} < ${value} < ${max}`)
            if (offset + ext > buf.length) throw new RangeError('Index out of range')
          }

          Buffer.prototype.writeUintLE =
            Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
              value = +value
              offset = offset >>> 0
              byteLength = byteLength >>> 0
              if (!noAssert) {
                const maxBytes = Math.pow(2, 8 * byteLength) - 1
                checkInt(this, value, offset, byteLength, maxBytes, 0)
              }

              let mul = 1
              let i = 0
              this[offset] = value & 0xFF
              while (++i < byteLength && (mul *= 0x100)) {
                this[offset + i] = (value / mul) & 0xFF
              }

              return offset + byteLength
            }

          Buffer.prototype.writeUintBE =
            Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
              value = +value
              offset = offset >>> 0
              byteLength = byteLength >>> 0
              if (!noAssert) {
                const maxBytes = Math.pow(2, 8 * byteLength) - 1
                checkInt(this, value, offset, byteLength, maxBytes, 0)
              }

              let i = byteLength - 1
              let mul = 1
              this[offset + i] = value & 0xFF
              while (--i >= 0 && (mul *= 0x100)) {
                this[offset + i] = (value / mul) & 0xFF
              }

              return offset + byteLength
            }

          Buffer.prototype.writeUint8 =
            Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
              value = +value
              offset = offset >>> 0
              if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
              this[offset] = (value & 0xff)
              return offset + 1
            }

          Buffer.prototype.writeUint16LE =
            Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
              value = +value
              offset = offset >>> 0
              if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
              this[offset] = (value & 0xff)
              this[offset + 1] = (value >>> 8)
              return offset + 2
            }

          Buffer.prototype.writeUint16BE =
            Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
              console.log("Check value", value)
              value = +value
              console.log("Checking value", value)
              offset = offset >>> 0
              if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
              this[offset] = (value >>> 8)
              this[offset + 1] = (value & 0xff)
              return offset + 2
            }

          Buffer.prototype.writeUint32LE =
            Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
              value = +value
              offset = offset >>> 0
              if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
              this[offset + 3] = (value >>> 24)
              this[offset + 2] = (value >>> 16)
              this[offset + 1] = (value >>> 8)
              this[offset] = (value & 0xff)
              return offset + 4
            }

          Buffer.prototype.writeUint32BE =
            Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
              value = +value
              offset = offset >>> 0
              if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
              this[offset] = (value >>> 24)
              this[offset + 1] = (value >>> 16)
              this[offset + 2] = (value >>> 8)
              this[offset + 3] = (value & 0xff)
              return offset + 4
            }

          function wrtBigUInt64LE (buf, value, offset, min, max) {
            checkIntBI(value, min, max, buf, offset, 7)

            let lo = Number(value & BigInt(0xffffffff))
            buf[offset++] = lo
            lo = lo >> 8
            buf[offset++] = lo
            lo = lo >> 8
            buf[offset++] = lo
            lo = lo >> 8
            buf[offset++] = lo
            let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))
            buf[offset++] = hi
            hi = hi >> 8
            buf[offset++] = hi
            hi = hi >> 8
            buf[offset++] = hi
            hi = hi >> 8
            buf[offset++] = hi
            return offset
          }

          function wrtBigUInt64BE (buf, value, offset, min, max) {
            checkIntBI(value, min, max, buf, offset, 7)

            let lo = Number(value & BigInt(0xffffffff))
            buf[offset + 7] = lo
            lo = lo >> 8
            buf[offset + 6] = lo
            lo = lo >> 8
            buf[offset + 5] = lo
            lo = lo >> 8
            buf[offset + 4] = lo
            let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))
            buf[offset + 3] = hi
            hi = hi >> 8
            buf[offset + 2] = hi
            hi = hi >> 8
            buf[offset + 1] = hi
            hi = hi >> 8
            buf[offset] = hi
            return offset + 8
          }

          Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {
            return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
          })

          Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {
            return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
          })

          Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
            value = +value
            offset = offset >>> 0
            if (!noAssert) {
              const limit = Math.pow(2, (8 * byteLength) - 1)

              checkInt(this, value, offset, byteLength, limit - 1, -limit)
            }

            let i = 0
            let mul = 1
            let sub = 0
            this[offset] = value & 0xFF
            while (++i < byteLength && (mul *= 0x100)) {
              if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                sub = 1
              }
              this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
            }

            return offset + byteLength
          }

          Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
            value = +value
            offset = offset >>> 0
            if (!noAssert) {
              const limit = Math.pow(2, (8 * byteLength) - 1)

              checkInt(this, value, offset, byteLength, limit - 1, -limit)
            }

            let i = byteLength - 1
            let mul = 1
            let sub = 0
            this[offset + i] = value & 0xFF
            while (--i >= 0 && (mul *= 0x100)) {
              if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                sub = 1
              }
              this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
            }

            return offset + byteLength
          }

          Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
            value = +value
            offset = offset >>> 0
            if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
            if (value < 0) value = 0xff + value + 1
            this[offset] = (value & 0xff)
            return offset + 1
          }

          Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
            value = +value
            offset = offset >>> 0
            if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
            this[offset] = (value & 0xff)
            this[offset + 1] = (value >>> 8)
            return offset + 2
          }

          Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
            value = +value
            offset = offset >>> 0
            if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
            this[offset] = (value >>> 8)
            this[offset + 1] = (value & 0xff)
            return offset + 2
          }

          Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
            value = +value
            offset = offset >>> 0
            if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
            this[offset] = (value & 0xff)
            this[offset + 1] = (value >>> 8)
            this[offset + 2] = (value >>> 16)
            this[offset + 3] = (value >>> 24)
            return offset + 4
          }

          Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
            value = +value
            offset = offset >>> 0
            if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
            if (value < 0) value = 0xffffffff + value + 1
            this[offset] = (value >>> 24)
            this[offset + 1] = (value >>> 16)
            this[offset + 2] = (value >>> 8)
            this[offset + 3] = (value & 0xff)
            return offset + 4
          }

          Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {
            return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
          })

          Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {
            return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
          })

          function checkIEEE754 (buf, value, offset, ext, max, min) {
            if (offset + ext > buf.length) throw new RangeError('Index out of range')
            if (offset < 0) throw new RangeError('Index out of range')
          }

          function writeFloat (buf, value, offset, littleEndian, noAssert) {
            value = +value
            offset = offset >>> 0
            if (!noAssert) {
              checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
            }
            ieee754.write(buf, value, offset, littleEndian, 23, 4)
            return offset + 4
          }

          Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
            return writeFloat(this, value, offset, true, noAssert)
          }

          Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
            return writeFloat(this, value, offset, false, noAssert)
          }

          function writeDouble (buf, value, offset, littleEndian, noAssert) {
            value = +value
            offset = offset >>> 0
            if (!noAssert) {
              checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
            }
            ieee754.write(buf, value, offset, littleEndian, 52, 8)
            return offset + 8
          }

          Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
            return writeDouble(this, value, offset, true, noAssert)
          }

          Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
            return writeDouble(this, value, offset, false, noAssert)
          }

          // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
          Buffer.prototype.copy = function copy (target, targetStart, start, end) {
            if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
            if (!start) start = 0
            if (!end && end !== 0) end = this.length
            if (targetStart >= target.length) targetStart = target.length
            if (!targetStart) targetStart = 0
            if (end > 0 && end < start) end = start

            // Copy 0 bytes; we're done
            if (end === start) return 0
            if (target.length === 0 || this.length === 0) return 0

            // Fatal error conditions
            if (targetStart < 0) {
              throw new RangeError('targetStart out of bounds')
            }
            if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
            if (end < 0) throw new RangeError('sourceEnd out of bounds')

            // Are we oob?
            if (end > this.length) end = this.length
            if (target.length - targetStart < end - start) {
              end = target.length - targetStart + start
            }

            const len = end - start

            if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
              // Use built-in when available, missing from IE11
              this.copyWithin(targetStart, start, end)
            } else {
              Uint8Array.prototype.set.call(
                target,
                this.subarray(start, end),
                targetStart
              )
            }

            return len
          }

          // Usage:
          //    buffer.fill(number[, offset[, end]])
          //    buffer.fill(buffer[, offset[, end]])
          //    buffer.fill(string[, offset[, end]][, encoding])
          Buffer.prototype.fill = function fill (val, start, end, encoding) {
            // Handle string cases:
            if (typeof val === 'string') {
              if (typeof start === 'string') {
                encoding = start
                start = 0
                end = this.length
              } else if (typeof end === 'string') {
                encoding = end
                end = this.length
              }
              if (encoding !== undefined && typeof encoding !== 'string') {
                throw new TypeError('encoding must be a string')
              }
              if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
                throw new TypeError('Unknown encoding: ' + encoding)
              }
              if (val.length === 1) {
                const code = val.charCodeAt(0)
                if ((encoding === 'utf8' && code < 128) ||
                  encoding === 'latin1') {
                  // Fast path: If `val` fits into a single byte, use that numeric value.
                  val = code
                }
              }
            } else if (typeof val === 'number') {
              val = val & 255
            } else if (typeof val === 'boolean') {
              val = Number(val)
            }

            // Invalid ranges are not set to a default, so can range check early.
            if (start < 0 || this.length < start || this.length < end) {
              throw new RangeError('Out of range index')
            }

            if (end <= start) {
              return this
            }

            start = start >>> 0
            end = end === undefined ? this.length : end >>> 0

            if (!val) val = 0

            let i
            if (typeof val === 'number') {
              for (i = start; i < end; ++i) {
                this[i] = val
              }
            } else {
              const bytes = Buffer.isBuffer(val)
                ? val
                : Buffer.from(val, encoding)
              const len = bytes.length
              if (len === 0) {
                throw new TypeError('The value "' + val +
                  '" is invalid for argument "value"')
              }
              for (i = 0; i < end - start; ++i) {
                this[i + start] = bytes[i % len]
              }
            }

            return this
          }

          // CUSTOM ERRORS
          // =============

          // Simplified versions from Node, changed for Buffer-only usage
          const errors = {}
          function E (sym, getMessage, Base) {
            errors[sym] = class NodeError extends Base {
              constructor() {
                super()

                Object.defineProperty(this, 'message', {
                  value: getMessage.apply(this, arguments),
                  writable: true,
                  configurable: true
                })

                // Add the error code to the name to include it in the stack trace.
                this.name = `${this.name} [${sym}]`
                // Access the stack to generate the error message including the error code
                // from the name.
                this.stack // eslint-disable-line no-unused-expressions
                // Reset the name to the actual name.
                delete this.name
              }

              get code () {
                return sym
              }

              set code (value) {
                Object.defineProperty(this, 'code', {
                  configurable: true,
                  enumerable: true,
                  value,
                  writable: true
                })
              }

              toString () {
                return `${this.name} [${sym}]: ${this.message}`
              }
            }
          }

          E('ERR_BUFFER_OUT_OF_BOUNDS',
            function (name) {
              if (name) {
                return `${name} is outside of buffer bounds`
              }

              return 'Attempt to access memory outside buffer bounds'
            }, RangeError)
          E('ERR_INVALID_ARG_TYPE',
            function (name, actual) {
              return `The "${name}" argument must be of type number. Received type ${typeof actual}`
            }, TypeError)
          E('ERR_OUT_OF_RANGE',
            function (str, range, input) {
              let msg = `The value of "${str}" is out of range.`
              let received = input
              if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
                received = addNumericalSeparator(String(input))
              } else if (typeof input === 'bigint') {
                received = String(input)
                if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
                  received = addNumericalSeparator(received)
                }
                received += 'n'
              }
              msg += ` It must be ${range}. Received ${received}`
              return msg
            }, RangeError)

          function addNumericalSeparator (val) {
            let res = ''
            let i = val.length
            const start = val[0] === '-' ? 1 : 0
            for (; i >= start + 4; i -= 3) {
              res = `_${val.slice(i - 3, i)}${res}`
            }
            return `${val.slice(0, i)}${res}`
          }

          // CHECK FUNCTIONS
          // ===============

          function checkBounds (buf, offset, byteLength) {
            validateNumber(offset, 'offset')
            if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {
              boundsError(offset, buf.length - (byteLength + 1))
            }
          }

          function checkIntBI (value, min, max, buf, offset, byteLength) {
            if (value > max || value < min) {
              const n = typeof min === 'bigint' ? 'n' : ''
              let range
              if (byteLength > 3) {
                if (min === 0 || min === BigInt(0)) {
                  range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`
                } else {
                  range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +
                    `${(byteLength + 1) * 8 - 1}${n}`
                }
              } else {
                range = `>= ${min}${n} and <= ${max}${n}`
              }
              throw new errors.ERR_OUT_OF_RANGE('value', range, value)
            }
            checkBounds(buf, offset, byteLength)
          }

          function validateNumber (value, name) {
            if (typeof value !== 'number') {
              throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)
            }
          }

          function boundsError (value, length, type) {
            if (Math.floor(value) !== value) {
              validateNumber(value, type)
              throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)
            }

            if (length < 0) {
              throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()
            }

            throw new errors.ERR_OUT_OF_RANGE(type || 'offset',
              `>= ${type ? 1 : 0} and <= ${length}`,
              value)
          }

          // HELPER FUNCTIONS
          // ================

          const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

          function base64clean (str) {
            // Node takes equal signs as end of the Base64 encoding
            str = str.split('=')[0]
            // Node strips out invalid characters like \n and \t from the string, base64-js does not
            str = str.trim().replace(INVALID_BASE64_RE, '')
            // Node converts strings with length < 2 to ''
            if (str.length < 2) return ''
            // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
            while (str.length % 4 !== 0) {
              str = str + '='
            }
            return str
          }

          function utf8ToBytes (string, units) {
            units = units || Infinity
            let codePoint
            const length = string.length
            let leadSurrogate = null
            const bytes = []

            for (let i = 0; i < length; ++i) {
              codePoint = string.charCodeAt(i)

              // is surrogate component
              if (codePoint > 0xD7FF && codePoint < 0xE000) {
                // last char was a lead
                if (!leadSurrogate) {
                  // no lead yet
                  if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                    continue
                  } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                    continue
                  }

                  // valid lead
                  leadSurrogate = codePoint

                  continue
                }

                // 2 leads in a row
                if (codePoint < 0xDC00) {
                  if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
                  leadSurrogate = codePoint
                  continue
                }

                // valid surrogate pair
                codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
              } else if (leadSurrogate) {
                // valid bmp char, but last char was a lead
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
              }

              leadSurrogate = null

              // encode utf8
              if (codePoint < 0x80) {
                if ((units -= 1) < 0) break
                bytes.push(codePoint)
              } else if (codePoint < 0x800) {
                if ((units -= 2) < 0) break
                bytes.push(
                  codePoint >> 0x6 | 0xC0,
                  codePoint & 0x3F | 0x80
                )
              } else if (codePoint < 0x10000) {
                if ((units -= 3) < 0) break
                bytes.push(
                  codePoint >> 0xC | 0xE0,
                  codePoint >> 0x6 & 0x3F | 0x80,
                  codePoint & 0x3F | 0x80
                )
              } else if (codePoint < 0x110000) {
                if ((units -= 4) < 0) break
                bytes.push(
                  codePoint >> 0x12 | 0xF0,
                  codePoint >> 0xC & 0x3F | 0x80,
                  codePoint >> 0x6 & 0x3F | 0x80,
                  codePoint & 0x3F | 0x80
                )
              } else {
                throw new Error('Invalid code point')
              }
            }

            return bytes
          }

          function asciiToBytes (str) {
            const byteArray = []
            for (let i = 0; i < str.length; ++i) {
              // Node's code seems to be doing this and not & 0x7F..
              byteArray.push(str.charCodeAt(i) & 0xFF)
            }
            return byteArray
          }

          function utf16leToBytes (str, units) {
            let c, hi, lo
            const byteArray = []
            for (let i = 0; i < str.length; ++i) {
              if ((units -= 2) < 0) break

              c = str.charCodeAt(i)
              hi = c >> 8
              lo = c % 256
              byteArray.push(lo)
              byteArray.push(hi)
            }

            return byteArray
          }

          function base64ToBytes (str) {
            return base64.toByteArray(base64clean(str))
          }

          function blitBuffer (src, dst, offset, length) {
            let i
            for (i = 0; i < length; ++i) {
              if ((i + offset >= dst.length) || (i >= src.length)) break
              dst[i + offset] = src[i]
            }
            return i
          }

          // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
          // the `instanceof` check but they should be treated as of that type.
          // See: https://github.com/feross/buffer/issues/166
          function isInstance (obj, type) {
            return obj instanceof type ||
              (obj != null && obj.constructor != null && obj.constructor.name != null &&
                obj.constructor.name === type.name)
          }
          function numberIsNaN (obj) {
            // For IE11 support
            return obj !== obj // eslint-disable-line no-self-compare
          }

          // Create lookup table for `toString('hex')`
          // See: https://github.com/feross/buffer/issues/219
          const hexSliceLookupTable = (function () {
            const alphabet = '0123456789abcdef'
            const table = new Array(256)
            for (let i = 0; i < 16; ++i) {
              const i16 = i * 16
              for (let j = 0; j < 16; ++j) {
                table[i16 + j] = alphabet[i] + alphabet[j]
              }
            }
            return table
          })()

          // Return not function with Error if BigInt not supported
          function defineBigIntMethod (fn) {
            return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn
          }

          function BufferBigIntNotDefined () {
            throw new Error('BigInt not supported')
          }


          /***/
        }),

/***/ 488:
/***/ ((module) => {

          "use strict";
          // Copyright Joyent, Inc. and other Node contributors.
          //
          // Permission is hereby granted, free of charge, to any person obtaining a
          // copy of this software and associated documentation files (the
          // "Software"), to deal in the Software without restriction, including
          // without limitation the rights to use, copy, modify, merge, publish,
          // distribute, sublicense, and/or sell copies of the Software, and to permit
          // persons to whom the Software is furnished to do so, subject to the
          // following conditions:
          //
          // The above copyright notice and this permission notice shall be included
          // in all copies or substantial portions of the Software.
          //
          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
          // USE OR OTHER DEALINGS IN THE SOFTWARE.



          var R = typeof Reflect === 'object' ? Reflect : null
          var ReflectApply = R && typeof R.apply === 'function'
            ? R.apply
            : function ReflectApply (target, receiver, args) {
              return Function.prototype.apply.call(target, receiver, args);
            }

          var ReflectOwnKeys
          if (R && typeof R.ownKeys === 'function') {
            ReflectOwnKeys = R.ownKeys
          } else if (Object.getOwnPropertySymbols) {
            ReflectOwnKeys = function ReflectOwnKeys (target) {
              return Object.getOwnPropertyNames(target)
                .concat(Object.getOwnPropertySymbols(target));
            };
          } else {
            ReflectOwnKeys = function ReflectOwnKeys (target) {
              return Object.getOwnPropertyNames(target);
            };
          }

          function ProcessEmitWarning (warning) {
            if (console && console.warn) console.warn(warning);
          }

          var NumberIsNaN = Number.isNaN || function NumberIsNaN (value) {
            return value !== value;
          }

          function EventEmitter () {
            EventEmitter.init.call(this);
          }
          module.exports = EventEmitter;
          module.exports.once = once;

          // Backwards-compat with node 0.10.x
          EventEmitter.EventEmitter = EventEmitter;

          EventEmitter.prototype._events = undefined;
          EventEmitter.prototype._eventsCount = 0;
          EventEmitter.prototype._maxListeners = undefined;

          // By default EventEmitters will print a warning if more than 10 listeners are
          // added to it. This is a useful default which helps finding memory leaks.
          var defaultMaxListeners = 10;

          function checkListener (listener) {
            if (typeof listener !== 'function') {
              throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
            }
          }

          Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
            enumerable: true,
            get: function () {
              return defaultMaxListeners;
            },
            set: function (arg) {
              if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
                throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
              }
              defaultMaxListeners = arg;
            }
          });

          EventEmitter.init = function () {

            if (this._events === undefined ||
              this._events === Object.getPrototypeOf(this)._events) {
              this._events = Object.create(null);
              this._eventsCount = 0;
            }

            this._maxListeners = this._maxListeners || undefined;
          };

          // Obviously not all Emitters should be limited to 10. This function allows
          // that to be increased. Set to zero for unlimited.
          EventEmitter.prototype.setMaxListeners = function setMaxListeners (n) {
            if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
              throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
            }
            this._maxListeners = n;
            return this;
          };

          function _getMaxListeners (that) {
            if (that._maxListeners === undefined)
              return EventEmitter.defaultMaxListeners;
            return that._maxListeners;
          }

          EventEmitter.prototype.getMaxListeners = function getMaxListeners () {
            return _getMaxListeners(this);
          };

          EventEmitter.prototype.emit = function emit (type) {
            var args = [];
            for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
            var doError = (type === 'error');

            var events = this._events;
            if (events !== undefined)
              doError = (doError && events.error === undefined);
            else if (!doError)
              return false;

            // If there is no 'error' event listener then throw.
            if (doError) {
              var er;
              if (args.length > 0)
                er = args[0];
              if (er instanceof Error) {
                // Note: The comments on the `throw` lines are intentional, they show
                // up in Node's output if this results in an unhandled exception.
                throw er; // Unhandled 'error' event
              }
              // At least give some kind of context to the user
              var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
              err.context = er;
              throw err; // Unhandled 'error' event
            }

            var handler = events[type];

            if (handler === undefined)
              return false;

            if (typeof handler === 'function') {
              ReflectApply(handler, this, args);
            } else {
              var len = handler.length;
              var listeners = arrayClone(handler, len);
              for (var i = 0; i < len; ++i)
                ReflectApply(listeners[i], this, args);
            }

            return true;
          };

          function _addListener (target, type, listener, prepend) {
            var m;
            var events;
            var existing;

            checkListener(listener);

            events = target._events;
            if (events === undefined) {
              events = target._events = Object.create(null);
              target._eventsCount = 0;
            } else {
              // To avoid recursion in the case that type === "newListener"! Before
              // adding it to the listeners, first emit "newListener".
              if (events.newListener !== undefined) {
                target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

                // Re-assign `events` because a newListener handler could have caused the
                // this._events to be assigned to a new object
                events = target._events;
              }
              existing = events[type];
            }

            if (existing === undefined) {
              // Optimize the case of one listener. Don't need the extra array object.
              existing = events[type] = listener;
              ++target._eventsCount;
            } else {
              if (typeof existing === 'function') {
                // Adding the second element, need to change to array.
                existing = events[type] =
                  prepend ? [listener, existing] : [existing, listener];
                // If we've already got an array, just append.
              } else if (prepend) {
                existing.unshift(listener);
              } else {
                existing.push(listener);
              }

              // Check for listener leak
              m = _getMaxListeners(target);
              if (m > 0 && existing.length > m && !existing.warned) {
                existing.warned = true;
                // No error code for this since it is a Warning
                // eslint-disable-next-line no-restricted-syntax
                var w = new Error('Possible EventEmitter memory leak detected. ' +
                  existing.length + ' ' + String(type) + ' listeners ' +
                  'added. Use emitter.setMaxListeners() to ' +
                  'increase limit');
                w.name = 'MaxListenersExceededWarning';
                w.emitter = target;
                w.type = type;
                w.count = existing.length;
                ProcessEmitWarning(w);
              }
            }

            return target;
          }

          EventEmitter.prototype.addListener = function addListener (type, listener) {
            return _addListener(this, type, listener, false);
          };

          EventEmitter.prototype.on = EventEmitter.prototype.addListener;

          EventEmitter.prototype.prependListener =
            function prependListener (type, listener) {
              return _addListener(this, type, listener, true);
            };

          function onceWrapper () {
            if (!this.fired) {
              this.target.removeListener(this.type, this.wrapFn);
              this.fired = true;
              if (arguments.length === 0)
                return this.listener.call(this.target);
              return this.listener.apply(this.target, arguments);
            }
          }

          function _onceWrap (target, type, listener) {
            var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
            var wrapped = onceWrapper.bind(state);
            wrapped.listener = listener;
            state.wrapFn = wrapped;
            return wrapped;
          }

          EventEmitter.prototype.once = function once (type, listener) {
            checkListener(listener);
            this.on(type, _onceWrap(this, type, listener));
            return this;
          };

          EventEmitter.prototype.prependOnceListener =
            function prependOnceListener (type, listener) {
              checkListener(listener);
              this.prependListener(type, _onceWrap(this, type, listener));
              return this;
            };

          // Emits a 'removeListener' event if and only if the listener was removed.
          EventEmitter.prototype.removeListener =
            function removeListener (type, listener) {
              var list, events, position, i, originalListener;

              checkListener(listener);

              events = this._events;
              if (events === undefined)
                return this;

              list = events[type];
              if (list === undefined)
                return this;

              if (list === listener || list.listener === listener) {
                if (--this._eventsCount === 0)
                  this._events = Object.create(null);
                else {
                  delete events[type];
                  if (events.removeListener)
                    this.emit('removeListener', type, list.listener || listener);
                }
              } else if (typeof list !== 'function') {
                position = -1;

                for (i = list.length - 1; i >= 0; i--) {
                  if (list[i] === listener || list[i].listener === listener) {
                    originalListener = list[i].listener;
                    position = i;
                    break;
                  }
                }

                if (position < 0)
                  return this;

                if (position === 0)
                  list.shift();
                else {
                  spliceOne(list, position);
                }

                if (list.length === 1)
                  events[type] = list[0];

                if (events.removeListener !== undefined)
                  this.emit('removeListener', type, originalListener || listener);
              }

              return this;
            };

          EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

          EventEmitter.prototype.removeAllListeners =
            function removeAllListeners (type) {
              var listeners, events, i;

              events = this._events;
              if (events === undefined)
                return this;

              // not listening for removeListener, no need to emit
              if (events.removeListener === undefined) {
                if (arguments.length === 0) {
                  this._events = Object.create(null);
                  this._eventsCount = 0;
                } else if (events[type] !== undefined) {
                  if (--this._eventsCount === 0)
                    this._events = Object.create(null);
                  else
                    delete events[type];
                }
                return this;
              }

              // emit removeListener for all listeners on all events
              if (arguments.length === 0) {
                var keys = Object.keys(events);
                var key;
                for (i = 0; i < keys.length; ++i) {
                  key = keys[i];
                  if (key === 'removeListener') continue;
                  this.removeAllListeners(key);
                }
                this.removeAllListeners('removeListener');
                this._events = Object.create(null);
                this._eventsCount = 0;
                return this;
              }

              listeners = events[type];

              if (typeof listeners === 'function') {
                this.removeListener(type, listeners);
              } else if (listeners !== undefined) {
                // LIFO order
                for (i = listeners.length - 1; i >= 0; i--) {
                  this.removeListener(type, listeners[i]);
                }
              }

              return this;
            };

          function _listeners (target, type, unwrap) {
            var events = target._events;

            if (events === undefined)
              return [];

            var evlistener = events[type];
            if (evlistener === undefined)
              return [];

            if (typeof evlistener === 'function')
              return unwrap ? [evlistener.listener || evlistener] : [evlistener];

            return unwrap ?
              unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
          }

          EventEmitter.prototype.listeners = function listeners (type) {
            return _listeners(this, type, true);
          };

          EventEmitter.prototype.rawListeners = function rawListeners (type) {
            return _listeners(this, type, false);
          };

          EventEmitter.listenerCount = function (emitter, type) {
            if (typeof emitter.listenerCount === 'function') {
              return emitter.listenerCount(type);
            } else {
              return listenerCount.call(emitter, type);
            }
          };

          EventEmitter.prototype.listenerCount = listenerCount;
          function listenerCount (type) {
            var events = this._events;

            if (events !== undefined) {
              var evlistener = events[type];

              if (typeof evlistener === 'function') {
                return 1;
              } else if (evlistener !== undefined) {
                return evlistener.length;
              }
            }

            return 0;
          }

          EventEmitter.prototype.eventNames = function eventNames () {
            return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
          };

          function arrayClone (arr, n) {
            var copy = new Array(n);
            for (var i = 0; i < n; ++i)
              copy[i] = arr[i];
            return copy;
          }

          function spliceOne (list, index) {
            for (; index + 1 < list.length; index++)
              list[index] = list[index + 1];
            list.pop();
          }

          function unwrapListeners (arr) {
            var ret = new Array(arr.length);
            for (var i = 0; i < ret.length; ++i) {
              ret[i] = arr[i].listener || arr[i];
            }
            return ret;
          }

          function once (emitter, name) {
            return new Promise(function (resolve, reject) {
              function eventListener () {
                if (errorListener !== undefined) {
                  emitter.removeListener('error', errorListener);
                }
                resolve([].slice.call(arguments));
              };
              var errorListener;

              // Adding an error listener is not optional because
              // if an error is thrown on an event emitter we cannot
              // guarantee that the actual event we are waiting will
              // be fired. The result could be a silent way to create
              // memory or file descriptor leaks, which is something
              // we should avoid.
              if (name !== 'error') {
                errorListener = function errorListener (err) {
                  emitter.removeListener(name, eventListener);
                  reject(err);
                };

                emitter.once('error', errorListener);
              }

              emitter.once(name, eventListener);
            });
          }


          /***/
        }),

/***/ 9258:
/***/ ((__unused_webpack_module, exports) => {

          /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
          exports.read = function (buffer, offset, isLE, mLen, nBytes) {
            var e, m
            var eLen = (nBytes * 8) - mLen - 1
            var eMax = (1 << eLen) - 1
            var eBias = eMax >> 1
            var nBits = -7
            var i = isLE ? (nBytes - 1) : 0
            var d = isLE ? -1 : 1
            var s = buffer[offset + i]

            i += d

            e = s & ((1 << (-nBits)) - 1)
            s >>= (-nBits)
            nBits += eLen
            for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) { }

            m = e & ((1 << (-nBits)) - 1)
            e >>= (-nBits)
            nBits += mLen
            for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) { }

            if (e === 0) {
              e = 1 - eBias
            } else if (e === eMax) {
              return m ? NaN : ((s ? -1 : 1) * Infinity)
            } else {
              m = m + Math.pow(2, mLen)
              e = e - eBias
            }
            return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
          }

          exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
            var e, m, c
            var eLen = (nBytes * 8) - mLen - 1
            var eMax = (1 << eLen) - 1
            var eBias = eMax >> 1
            var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
            var i = isLE ? 0 : (nBytes - 1)
            var d = isLE ? 1 : -1
            var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

            value = Math.abs(value)

            if (isNaN(value) || value === Infinity) {
              m = isNaN(value) ? 1 : 0
              e = eMax
            } else {
              e = Math.floor(Math.log(value) / Math.LN2)
              if (value * (c = Math.pow(2, -e)) < 1) {
                e--
                c *= 2
              }
              if (e + eBias >= 1) {
                value += rt / c
              } else {
                value += rt * Math.pow(2, 1 - eBias)
              }
              if (value * c >= 2) {
                e++
                c /= 2
              }

              if (e + eBias >= eMax) {
                m = 0
                e = eMax
              } else if (e + eBias >= 1) {
                m = ((value * c) - 1) * Math.pow(2, mLen)
                e = e + eBias
              } else {
                m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
                e = 0
              }
            }

            for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) { }

            e = (e << mLen) | m
            eLen += mLen
            for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) { }

            buffer[offset + i - d] |= s * 128
          }


          /***/
        }),

/***/ 3730:
/***/ ((module) => {

          if (typeof Object.create === 'function') {
            // implementation from standard node.js 'util' module
            module.exports = function inherits (ctor, superCtor) {
              if (superCtor) {
                ctor.super_ = superCtor
                ctor.prototype = Object.create(superCtor.prototype, {
                  constructor: {
                    value: ctor,
                    enumerable: false,
                    writable: true,
                    configurable: true
                  }
                })
              }
            };
          } else {
            // old school shim for old browsers
            module.exports = function inherits (ctor, superCtor) {
              if (superCtor) {
                ctor.super_ = superCtor
                var TempCtor = function () { }
                TempCtor.prototype = superCtor.prototype
                ctor.prototype = new TempCtor()
                ctor.prototype.constructor = ctor
              }
            }
          }


          /***/
        }),

/***/ 6117:
/***/ ((module) => {

          /**
           * Helpers.
           */

          var s = 1000;
          var m = s * 60;
          var h = m * 60;
          var d = h * 24;
          var w = d * 7;
          var y = d * 365.25;

          /**
           * Parse or format the given `val`.
           *
           * Options:
           *
           *  - `long` verbose formatting [false]
           *
           * @param {String|Number} val
           * @param {Object} [options]
           * @throws {Error} throw an error if val is not a non-empty string or a number
           * @return {String|Number}
           * @api public
           */

          module.exports = function (val, options) {
            options = options || {};
            var type = typeof val;
            if (type === 'string' && val.length > 0) {
              return parse(val);
            } else if (type === 'number' && isFinite(val)) {
              return options.long ? fmtLong(val) : fmtShort(val);
            }
            throw new Error(
              'val is not a non-empty string or a valid number. val=' +
              JSON.stringify(val)
            );
          };

          /**
           * Parse the given `str` and return milliseconds.
           *
           * @param {String} str
           * @return {Number}
           * @api private
           */

          function parse (str) {
            str = String(str);
            if (str.length > 100) {
              return;
            }
            var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
              str
            );
            if (!match) {
              return;
            }
            var n = parseFloat(match[1]);
            var type = (match[2] || 'ms').toLowerCase();
            switch (type) {
              case 'years':
              case 'year':
              case 'yrs':
              case 'yr':
              case 'y':
                return n * y;
              case 'weeks':
              case 'week':
              case 'w':
                return n * w;
              case 'days':
              case 'day':
              case 'd':
                return n * d;
              case 'hours':
              case 'hour':
              case 'hrs':
              case 'hr':
              case 'h':
                return n * h;
              case 'minutes':
              case 'minute':
              case 'mins':
              case 'min':
              case 'm':
                return n * m;
              case 'seconds':
              case 'second':
              case 'secs':
              case 'sec':
              case 's':
                return n * s;
              case 'milliseconds':
              case 'millisecond':
              case 'msecs':
              case 'msec':
              case 'ms':
                return n;
              default:
                return undefined;
            }
          }

          /**
           * Short format for `ms`.
           *
           * @param {Number} ms
           * @return {String}
           * @api private
           */

          function fmtShort (ms) {
            var msAbs = Math.abs(ms);
            if (msAbs >= d) {
              return Math.round(ms / d) + 'd';
            }
            if (msAbs >= h) {
              return Math.round(ms / h) + 'h';
            }
            if (msAbs >= m) {
              return Math.round(ms / m) + 'm';
            }
            if (msAbs >= s) {
              return Math.round(ms / s) + 's';
            }
            return ms + 'ms';
          }

          /**
           * Long format for `ms`.
           *
           * @param {Number} ms
           * @return {String}
           * @api private
           */

          function fmtLong (ms) {
            var msAbs = Math.abs(ms);
            if (msAbs >= d) {
              return plural(ms, msAbs, d, 'day');
            }
            if (msAbs >= h) {
              return plural(ms, msAbs, h, 'hour');
            }
            if (msAbs >= m) {
              return plural(ms, msAbs, m, 'minute');
            }
            if (msAbs >= s) {
              return plural(ms, msAbs, s, 'second');
            }
            return ms + ' ms';
          }

          /**
           * Pluralization helper.
           */

          function plural (ms, msAbs, n, name) {
            var isPlural = msAbs >= n * 1.5;
            return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
          }


          /***/
        }),

/***/ 2695:
/***/ ((module) => {

          // shim for using process in browser
          var process = module.exports = {};

          // cached from whatever global is present so that test runners that stub it
          // don't break things.  But we need to wrap it in a try catch in case it is
          // wrapped in strict mode code which doesn't define any globals.  It's inside a
          // function because try/catches deoptimize in certain engines.

          var cachedSetTimeout;
          var cachedClearTimeout;

          function defaultSetTimout () {
            throw new Error('setTimeout has not been defined');
          }
          function defaultClearTimeout () {
            throw new Error('clearTimeout has not been defined');
          }
          (function () {
            try {
              if (typeof setTimeout === 'function') {
                cachedSetTimeout = setTimeout;
              } else {
                cachedSetTimeout = defaultSetTimout;
              }
            } catch (e) {
              cachedSetTimeout = defaultSetTimout;
            }
            try {
              if (typeof clearTimeout === 'function') {
                cachedClearTimeout = clearTimeout;
              } else {
                cachedClearTimeout = defaultClearTimeout;
              }
            } catch (e) {
              cachedClearTimeout = defaultClearTimeout;
            }
          }())
          function runTimeout (fun) {
            if (cachedSetTimeout === setTimeout) {
              //normal enviroments in sane situations
              return setTimeout(fun, 0);
            }
            // if setTimeout wasn't available but was latter defined
            if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
              cachedSetTimeout = setTimeout;
              return setTimeout(fun, 0);
            }
            try {
              // when when somebody has screwed with setTimeout but no I.E. maddness
              return cachedSetTimeout(fun, 0);
            } catch (e) {
              try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                return cachedSetTimeout.call(null, fun, 0);
              } catch (e) {
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                return cachedSetTimeout.call(this, fun, 0);
              }
            }


          }
          function runClearTimeout (marker) {
            if (cachedClearTimeout === clearTimeout) {
              //normal enviroments in sane situations
              return clearTimeout(marker);
            }
            // if clearTimeout wasn't available but was latter defined
            if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
              cachedClearTimeout = clearTimeout;
              return clearTimeout(marker);
            }
            try {
              // when when somebody has screwed with setTimeout but no I.E. maddness
              return cachedClearTimeout(marker);
            } catch (e) {
              try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                return cachedClearTimeout.call(null, marker);
              } catch (e) {
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                return cachedClearTimeout.call(this, marker);
              }
            }



          }
          var queue = [];
          var draining = false;
          var currentQueue;
          var queueIndex = -1;

          function cleanUpNextTick () {
            if (!draining || !currentQueue) {
              return;
            }
            draining = false;
            if (currentQueue.length) {
              queue = currentQueue.concat(queue);
            } else {
              queueIndex = -1;
            }
            if (queue.length) {
              drainQueue();
            }
          }

          function drainQueue () {
            if (draining) {
              return;
            }
            var timeout = runTimeout(cleanUpNextTick);
            draining = true;

            var len = queue.length;
            while (len) {
              currentQueue = queue;
              queue = [];
              while (++queueIndex < len) {
                if (currentQueue) {
                  currentQueue[queueIndex].run();
                }
              }
              queueIndex = -1;
              len = queue.length;
            }
            currentQueue = null;
            draining = false;
            runClearTimeout(timeout);
          }

          process.nextTick = function (fun) {
            var args = new Array(arguments.length - 1);
            if (arguments.length > 1) {
              for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i];
              }
            }
            queue.push(new Item(fun, args));
            if (queue.length === 1 && !draining) {
              runTimeout(drainQueue);
            }
          };

          // v8 likes predictible objects
          function Item (fun, array) {
            this.fun = fun;
            this.array = array;
          }
          Item.prototype.run = function () {
            this.fun.apply(null, this.array);
          };
          process.title = 'browser';
          process.browser = true;
          process.env = {};
          process.argv = [];
          process.version = ''; // empty string to avoid regexp issues
          process.versions = {};

          function noop () { }

          process.on = noop;
          process.addListener = noop;
          process.once = noop;
          process.off = noop;
          process.removeListener = noop;
          process.removeAllListeners = noop;
          process.emit = noop;
          process.prependListener = noop;
          process.prependOnceListener = noop;

          process.listeners = function (name) { return [] }

          process.binding = function (name) {
            throw new Error('process.binding is not supported');
          };

          process.cwd = function () { return '/' };
          process.chdir = function (dir) {
            throw new Error('process.chdir is not supported');
          };
          process.umask = function () { return 0; };


          /***/
        }),

/***/ 553:
/***/ ((module) => {

          "use strict";


          function _inheritsLoose (subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

          var codes = {};

          function createErrorType (code, message, Base) {
            if (!Base) {
              Base = Error;
            }

            function getMessage (arg1, arg2, arg3) {
              if (typeof message === 'string') {
                return message;
              } else {
                return message(arg1, arg2, arg3);
              }
            }

            var NodeError =
              /*#__PURE__*/
              function (_Base) {
                _inheritsLoose(NodeError, _Base);

                function NodeError (arg1, arg2, arg3) {
                  return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
                }

                return NodeError;
              }(Base);

            NodeError.prototype.name = Base.name;
            NodeError.prototype.code = code;
            codes[code] = NodeError;
          } // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


          function oneOf (expected, thing) {
            if (Array.isArray(expected)) {
              var len = expected.length;
              expected = expected.map(function (i) {
                return String(i);
              });

              if (len > 2) {
                return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
              } else if (len === 2) {
                return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
              } else {
                return "of ".concat(thing, " ").concat(expected[0]);
              }
            } else {
              return "of ".concat(thing, " ").concat(String(expected));
            }
          } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


          function startsWith (str, search, pos) {
            return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
          } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


          function endsWith (str, search, this_len) {
            if (this_len === undefined || this_len > str.length) {
              this_len = str.length;
            }

            return str.substring(this_len - search.length, this_len) === search;
          } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


          function includes (str, search, start) {
            if (typeof start !== 'number') {
              start = 0;
            }

            if (start + search.length > str.length) {
              return false;
            } else {
              return str.indexOf(search, start) !== -1;
            }
          }

          createErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {
            return 'The value "' + value + '" is invalid for option "' + name + '"';
          }, TypeError);
          createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
            // determiner: 'must be' or 'must not be'
            var determiner;

            if (typeof expected === 'string' && startsWith(expected, 'not ')) {
              determiner = 'must not be';
              expected = expected.replace(/^not /, '');
            } else {
              determiner = 'must be';
            }

            var msg;

            if (endsWith(name, ' argument')) {
              // For cases like 'first argument'
              msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
            } else {
              var type = includes(name, '.') ? 'property' : 'argument';
              msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
            }

            msg += ". Received type ".concat(typeof actual);
            return msg;
          }, TypeError);
          createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
          createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
            return 'The ' + name + ' method is not implemented';
          });
          createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
          createErrorType('ERR_STREAM_DESTROYED', function (name) {
            return 'Cannot call ' + name + ' after a stream was destroyed';
          });
          createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
          createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
          createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
          createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
          createErrorType('ERR_UNKNOWN_ENCODING', function (arg) {
            return 'Unknown encoding: ' + arg;
          }, TypeError);
          createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
          module.exports.q = codes;


          /***/
        }),

/***/ 673:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          "use strict";
/* provided dependency */ var process = __webpack_require__(2695);
          // Copyright Joyent, Inc. and other Node contributors.
          //
          // Permission is hereby granted, free of charge, to any person obtaining a
          // copy of this software and associated documentation files (the
          // "Software"), to deal in the Software without restriction, including
          // without limitation the rights to use, copy, modify, merge, publish,
          // distribute, sublicense, and/or sell copies of the Software, and to permit
          // persons to whom the Software is furnished to do so, subject to the
          // following conditions:
          //
          // The above copyright notice and this permission notice shall be included
          // in all copies or substantial portions of the Software.
          //
          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
          // USE OR OTHER DEALINGS IN THE SOFTWARE.
          // a duplex stream is just a stream that is both readable and writable.
          // Since JS doesn't have multiple prototypal inheritance, this class
          // prototypally inherits from Readable, and then parasitically from
          // Writable.

          /*<replacement>*/

          var objectKeys = Object.keys || function (obj) {
            var keys = [];

            for (var key in obj) {
              keys.push(key);
            }

            return keys;
          };
          /*</replacement>*/


          module.exports = Duplex;

          var Readable = __webpack_require__(5006);

          var Writable = __webpack_require__(8719);

          __webpack_require__(3730)(Duplex, Readable);

          {
            // Allow the keys array to be GC'ed.
            var keys = objectKeys(Writable.prototype);

            for (var v = 0; v < keys.length; v++) {
              var method = keys[v];
              if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
            }
          }

          function Duplex (options) {
            if (!(this instanceof Duplex)) return new Duplex(options);
            Readable.call(this, options);
            Writable.call(this, options);
            this.allowHalfOpen = true;

            if (options) {
              if (options.readable === false) this.readable = false;
              if (options.writable === false) this.writable = false;

              if (options.allowHalfOpen === false) {
                this.allowHalfOpen = false;
                this.once('end', onend);
              }
            }
          }

          Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
            // making it explicit this property is not enumerable
            // because otherwise some prototype manipulation in
            // userland will fail
            enumerable: false,
            get: function get () {
              return this._writableState.highWaterMark;
            }
          });
          Object.defineProperty(Duplex.prototype, 'writableBuffer', {
            // making it explicit this property is not enumerable
            // because otherwise some prototype manipulation in
            // userland will fail
            enumerable: false,
            get: function get () {
              return this._writableState && this._writableState.getBuffer();
            }
          });
          Object.defineProperty(Duplex.prototype, 'writableLength', {
            // making it explicit this property is not enumerable
            // because otherwise some prototype manipulation in
            // userland will fail
            enumerable: false,
            get: function get () {
              return this._writableState.length;
            }
          }); // the no-half-open enforcer

          function onend () {
            // If the writable side ended, then we're ok.
            if (this._writableState.ended) return; // no more data can be written.
            // But allow more writes to happen in this tick.

            process.nextTick(onEndNT, this);
          }

          function onEndNT (self) {
            self.end();
          }

          Object.defineProperty(Duplex.prototype, 'destroyed', {
            // making it explicit this property is not enumerable
            // because otherwise some prototype manipulation in
            // userland will fail
            enumerable: false,
            get: function get () {
              if (this._readableState === undefined || this._writableState === undefined) {
                return false;
              }

              return this._readableState.destroyed && this._writableState.destroyed;
            },
            set: function set (value) {
              // we ignore the value if the stream
              // has not been initialized yet
              if (this._readableState === undefined || this._writableState === undefined) {
                return;
              } // backward compatibility, the user is explicitly
              // managing destroyed


              this._readableState.destroyed = value;
              this._writableState.destroyed = value;
            }
          });

          /***/
        }),

/***/ 4343:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          "use strict";
          // Copyright Joyent, Inc. and other Node contributors.
          //
          // Permission is hereby granted, free of charge, to any person obtaining a
          // copy of this software and associated documentation files (the
          // "Software"), to deal in the Software without restriction, including
          // without limitation the rights to use, copy, modify, merge, publish,
          // distribute, sublicense, and/or sell copies of the Software, and to permit
          // persons to whom the Software is furnished to do so, subject to the
          // following conditions:
          //
          // The above copyright notice and this permission notice shall be included
          // in all copies or substantial portions of the Software.
          //
          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
          // USE OR OTHER DEALINGS IN THE SOFTWARE.
          // a passthrough stream.
          // basically just the most minimal sort of Transform stream.
          // Every written chunk gets output as-is.


          module.exports = PassThrough;

          var Transform = __webpack_require__(8597);

          __webpack_require__(3730)(PassThrough, Transform);

          function PassThrough (options) {
            if (!(this instanceof PassThrough)) return new PassThrough(options);
            Transform.call(this, options);
          }

          PassThrough.prototype._transform = function (chunk, encoding, cb) {
            cb(null, chunk);
          };

          /***/
        }),

/***/ 5006:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          "use strict";
/* provided dependency */ var process = __webpack_require__(2695);
          // Copyright Joyent, Inc. and other Node contributors.
          //
          // Permission is hereby granted, free of charge, to any person obtaining a
          // copy of this software and associated documentation files (the
          // "Software"), to deal in the Software without restriction, including
          // without limitation the rights to use, copy, modify, merge, publish,
          // distribute, sublicense, and/or sell copies of the Software, and to permit
          // persons to whom the Software is furnished to do so, subject to the
          // following conditions:
          //
          // The above copyright notice and this permission notice shall be included
          // in all copies or substantial portions of the Software.
          //
          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
          // USE OR OTHER DEALINGS IN THE SOFTWARE.


          module.exports = Readable;
          /*<replacement>*/

          var Duplex;
          /*</replacement>*/

          Readable.ReadableState = ReadableState;
          /*<replacement>*/

          var EE = __webpack_require__(488).EventEmitter;

          var EElistenerCount = function EElistenerCount (emitter, type) {
            return emitter.listeners(type).length;
          };
          /*</replacement>*/

          /*<replacement>*/


          var Stream = __webpack_require__(8208);
          /*</replacement>*/


          var Buffer = __webpack_require__(7866).Buffer;

          var OurUint8Array = __webpack_require__.g.Uint8Array || function () { };

          function _uint8ArrayToBuffer (chunk) {
            return Buffer.from(chunk);
          }

          function _isUint8Array (obj) {
            return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
          }
          /*<replacement>*/


          var debugUtil = __webpack_require__(6029);

          var debug;

          if (debugUtil && debugUtil.debuglog) {
            debug = debugUtil.debuglog('stream');
          } else {
            debug = function debug () { };
          }
          /*</replacement>*/


          var BufferList = __webpack_require__(4506);

          var destroyImpl = __webpack_require__(3390);

          var _require = __webpack_require__(1111),
            getHighWaterMark = _require.getHighWaterMark;

          var _require$codes = __webpack_require__(553)/* .codes */.q,
            ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
            ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,
            ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
            ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


          var StringDecoder;
          var createReadableStreamAsyncIterator;
          var from;

          __webpack_require__(3730)(Readable, Stream);

          var errorOrDestroy = destroyImpl.errorOrDestroy;
          var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

          function prependListener (emitter, event, fn) {
            // Sadly this is not cacheable as some libraries bundle their own
            // event emitter implementation with them.
            if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
            // userland ones.  NEVER DO THIS. This is here only because this code needs
            // to continue to work with older versions of Node.js that do not include
            // the prependListener() method. The goal is to eventually remove this hack.

            if (!emitter._events || !emitter._events[event]) emitter.on(event, fn); else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn); else emitter._events[event] = [fn, emitter._events[event]];
          }

          function ReadableState (options, stream, isDuplex) {
            Duplex = Duplex || __webpack_require__(673);
            options = options || {}; // Duplex streams are both readable and writable, but share
            // the same options object.
            // However, some cases require setting options to different
            // values for the readable and the writable sides of the duplex stream.
            // These options can be provided separately as readableXXX and writableXXX.

            if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
            // make all the buffer merging and length checks go away

            this.objectMode = !!options.objectMode;
            if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
            // Note: 0 is a valid value, means "don't call _read preemptively ever"

            this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
            // linked list can remove elements from the beginning faster than
            // array.shift()

            this.buffer = new BufferList();
            this.length = 0;
            this.pipes = null;
            this.pipesCount = 0;
            this.flowing = null;
            this.ended = false;
            this.endEmitted = false;
            this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
            // immediately, or on a later tick.  We set this to true at first, because
            // any actions that shouldn't happen until "later" should generally also
            // not happen before the first read call.

            this.sync = true; // whenever we return null, then we set a flag to say
            // that we're awaiting a 'readable' event emission.

            this.needReadable = false;
            this.emittedReadable = false;
            this.readableListening = false;
            this.resumeScheduled = false;
            this.paused = true; // Should close be emitted on destroy. Defaults to true.

            this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

            this.autoDestroy = !!options.autoDestroy; // has it been destroyed

            this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
            // encoding is 'binary' so we have to make this configurable.
            // Everything else in the universe uses 'utf8', though.

            this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

            this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

            this.readingMore = false;
            this.decoder = null;
            this.encoding = null;

            if (options.encoding) {
              if (!StringDecoder) StringDecoder = __webpack_require__(7361)/* .StringDecoder */.s;
              this.decoder = new StringDecoder(options.encoding);
              this.encoding = options.encoding;
            }
          }

          function Readable (options) {
            Duplex = Duplex || __webpack_require__(673);
            if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
            // the ReadableState constructor, at least with V8 6.5

            var isDuplex = this instanceof Duplex;
            this._readableState = new ReadableState(options, this, isDuplex); // legacy

            this.readable = true;

            if (options) {
              if (typeof options.read === 'function') this._read = options.read;
              if (typeof options.destroy === 'function') this._destroy = options.destroy;
            }

            Stream.call(this);
          }

          Object.defineProperty(Readable.prototype, 'destroyed', {
            // making it explicit this property is not enumerable
            // because otherwise some prototype manipulation in
            // userland will fail
            enumerable: false,
            get: function get () {
              if (this._readableState === undefined) {
                return false;
              }

              return this._readableState.destroyed;
            },
            set: function set (value) {
              // we ignore the value if the stream
              // has not been initialized yet
              if (!this._readableState) {
                return;
              } // backward compatibility, the user is explicitly
              // managing destroyed


              this._readableState.destroyed = value;
            }
          });
          Readable.prototype.destroy = destroyImpl.destroy;
          Readable.prototype._undestroy = destroyImpl.undestroy;

          Readable.prototype._destroy = function (err, cb) {
            cb(err);
          }; // Manually shove something into the read() buffer.
          // This returns true if the highWaterMark has not been hit yet,
          // similar to how Writable.write() returns true if you should
          // write() some more.


          Readable.prototype.push = function (chunk, encoding) {
            var state = this._readableState;
            var skipChunkCheck;

            if (!state.objectMode) {
              if (typeof chunk === 'string') {
                encoding = encoding || state.defaultEncoding;

                if (encoding !== state.encoding) {
                  chunk = Buffer.from(chunk, encoding);
                  encoding = '';
                }

                skipChunkCheck = true;
              }
            } else {
              skipChunkCheck = true;
            }

            return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
          }; // Unshift should *always* be something directly out of read()


          Readable.prototype.unshift = function (chunk) {
            return readableAddChunk(this, chunk, null, true, false);
          };

          function readableAddChunk (stream, chunk, encoding, addToFront, skipChunkCheck) {
            debug('readableAddChunk', chunk);
            var state = stream._readableState;

            if (chunk === null) {
              state.reading = false;
              onEofChunk(stream, state);
            } else {
              var er;
              if (!skipChunkCheck) er = chunkInvalid(state, chunk);

              if (er) {
                errorOrDestroy(stream, er);
              } else if (state.objectMode || chunk && chunk.length > 0) {
                if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
                  chunk = _uint8ArrayToBuffer(chunk);
                }

                if (addToFront) {
                  if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT()); else addChunk(stream, state, chunk, true);
                } else if (state.ended) {
                  errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
                } else if (state.destroyed) {
                  return false;
                } else {
                  state.reading = false;

                  if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false); else maybeReadMore(stream, state);
                  } else {
                    addChunk(stream, state, chunk, false);
                  }
                }
              } else if (!addToFront) {
                state.reading = false;
                maybeReadMore(stream, state);
              }
            } // We can push more data if we are below the highWaterMark.
            // Also, if we have no data yet, we can stand some more bytes.
            // This is to work around cases where hwm=0, such as the repl.


            return !state.ended && (state.length < state.highWaterMark || state.length === 0);
          }

          function addChunk (stream, state, chunk, addToFront) {
            if (state.flowing && state.length === 0 && !state.sync) {
              state.awaitDrain = 0;
              stream.emit('data', chunk);
            } else {
              // update the buffer info.
              state.length += state.objectMode ? 1 : chunk.length;
              if (addToFront) state.buffer.unshift(chunk); else state.buffer.push(chunk);
              if (state.needReadable) emitReadable(stream);
            }

            maybeReadMore(stream, state);
          }

          function chunkInvalid (state, chunk) {
            var er;

            if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
              er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
            }

            return er;
          }

          Readable.prototype.isPaused = function () {
            return this._readableState.flowing === false;
          }; // backwards compatibility.


          Readable.prototype.setEncoding = function (enc) {
            if (!StringDecoder) StringDecoder = __webpack_require__(7361)/* .StringDecoder */.s;
            var decoder = new StringDecoder(enc);
            this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

            this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

            var p = this._readableState.buffer.head;
            var content = '';

            while (p !== null) {
              content += decoder.write(p.data);
              p = p.next;
            }

            this._readableState.buffer.clear();

            if (content !== '') this._readableState.buffer.push(content);
            this._readableState.length = content.length;
            return this;
          }; // Don't raise the hwm > 1GB


          var MAX_HWM = 0x40000000;

          function computeNewHighWaterMark (n) {
            if (n >= MAX_HWM) {
              // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
              n = MAX_HWM;
            } else {
              // Get the next highest power of 2 to prevent increasing hwm excessively in
              // tiny amounts
              n--;
              n |= n >>> 1;
              n |= n >>> 2;
              n |= n >>> 4;
              n |= n >>> 8;
              n |= n >>> 16;
              n++;
            }

            return n;
          } // This function is designed to be inlinable, so please take care when making
          // changes to the function body.


          function howMuchToRead (n, state) {
            if (n <= 0 || state.length === 0 && state.ended) return 0;
            if (state.objectMode) return 1;

            if (n !== n) {
              // Only flow one buffer at a time
              if (state.flowing && state.length) return state.buffer.head.data.length; else return state.length;
            } // If we're asking for more than the current hwm, then raise the hwm.


            if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
            if (n <= state.length) return n; // Don't have enough

            if (!state.ended) {
              state.needReadable = true;
              return 0;
            }

            return state.length;
          } // you can override either this method, or the async _read(n) below.


          Readable.prototype.read = function (n) {
            debug('read', n);
            n = parseInt(n, 10);
            var state = this._readableState;
            var nOrig = n;
            if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
            // already have a bunch of data in the buffer, then just trigger
            // the 'readable' event and move on.

            if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
              debug('read: emitReadable', state.length, state.ended);
              if (state.length === 0 && state.ended) endReadable(this); else emitReadable(this);
              return null;
            }

            n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

            if (n === 0 && state.ended) {
              if (state.length === 0) endReadable(this);
              return null;
            } // All the actual chunk generation logic needs to be
            // *below* the call to _read.  The reason is that in certain
            // synthetic stream cases, such as passthrough streams, _read
            // may be a completely synchronous operation which may change
            // the state of the read buffer, providing enough data when
            // before there was *not* enough.
            //
            // So, the steps are:
            // 1. Figure out what the state of things will be after we do
            // a read from the buffer.
            //
            // 2. If that resulting state will trigger a _read, then call _read.
            // Note that this may be asynchronous, or synchronous.  Yes, it is
            // deeply ugly to write APIs this way, but that still doesn't mean
            // that the Readable class should behave improperly, as streams are
            // designed to be sync/async agnostic.
            // Take note if the _read call is sync or async (ie, if the read call
            // has returned yet), so that we know whether or not it's safe to emit
            // 'readable' etc.
            //
            // 3. Actually pull the requested chunks out of the buffer and return.
            // if we need a readable event, then we need to do some reading.


            var doRead = state.needReadable;
            debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

            if (state.length === 0 || state.length - n < state.highWaterMark) {
              doRead = true;
              debug('length less than watermark', doRead);
            } // however, if we've ended, then there's no point, and if we're already
            // reading, then it's unnecessary.


            if (state.ended || state.reading) {
              doRead = false;
              debug('reading or ended', doRead);
            } else if (doRead) {
              debug('do read');
              state.reading = true;
              state.sync = true; // if the length is currently zero, then we *need* a readable event.

              if (state.length === 0) state.needReadable = true; // call internal read method

              this._read(state.highWaterMark);

              state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
              // and we need to re-evaluate how much data we can return to the user.

              if (!state.reading) n = howMuchToRead(nOrig, state);
            }

            var ret;
            if (n > 0) ret = fromList(n, state); else ret = null;

            if (ret === null) {
              state.needReadable = state.length <= state.highWaterMark;
              n = 0;
            } else {
              state.length -= n;
              state.awaitDrain = 0;
            }

            if (state.length === 0) {
              // If we have nothing in the buffer, then we want to know
              // as soon as we *do* get something into the buffer.
              if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

              if (nOrig !== n && state.ended) endReadable(this);
            }

            if (ret !== null) this.emit('data', ret);
            return ret;
          };

          function onEofChunk (stream, state) {
            debug('onEofChunk');
            if (state.ended) return;

            if (state.decoder) {
              var chunk = state.decoder.end();

              if (chunk && chunk.length) {
                state.buffer.push(chunk);
                state.length += state.objectMode ? 1 : chunk.length;
              }
            }

            state.ended = true;

            if (state.sync) {
              // if we are sync, wait until next tick to emit the data.
              // Otherwise we risk emitting data in the flow()
              // the readable code triggers during a read() call
              emitReadable(stream);
            } else {
              // emit 'readable' now to make sure it gets picked up.
              state.needReadable = false;

              if (!state.emittedReadable) {
                state.emittedReadable = true;
                emitReadable_(stream);
              }
            }
          } // Don't emit readable right away in sync mode, because this can trigger
          // another read() call => stack overflow.  This way, it might trigger
          // a nextTick recursion warning, but that's not so bad.


          function emitReadable (stream) {
            var state = stream._readableState;
            debug('emitReadable', state.needReadable, state.emittedReadable);
            state.needReadable = false;

            if (!state.emittedReadable) {
              debug('emitReadable', state.flowing);
              state.emittedReadable = true;
              process.nextTick(emitReadable_, stream);
            }
          }

          function emitReadable_ (stream) {
            var state = stream._readableState;
            debug('emitReadable_', state.destroyed, state.length, state.ended);

            if (!state.destroyed && (state.length || state.ended)) {
              stream.emit('readable');
              state.emittedReadable = false;
            } // The stream needs another readable event if
            // 1. It is not flowing, as the flow mechanism will take
            //    care of it.
            // 2. It is not ended.
            // 3. It is below the highWaterMark, so we can schedule
            //    another readable later.


            state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
            flow(stream);
          } // at this point, the user has presumably seen the 'readable' event,
          // and called read() to consume some data.  that may have triggered
          // in turn another _read(n) call, in which case reading = true if
          // it's in progress.
          // However, if we're not ended, or reading, and the length < hwm,
          // then go ahead and try to read some more preemptively.


          function maybeReadMore (stream, state) {
            if (!state.readingMore) {
              state.readingMore = true;
              process.nextTick(maybeReadMore_, stream, state);
            }
          }

          function maybeReadMore_ (stream, state) {
            // Attempt to read more data if we should.
            //
            // The conditions for reading more data are (one of):
            // - Not enough data buffered (state.length < state.highWaterMark). The loop
            //   is responsible for filling the buffer with enough data if such data
            //   is available. If highWaterMark is 0 and we are not in the flowing mode
            //   we should _not_ attempt to buffer any extra data. We'll get more data
            //   when the stream consumer calls read() instead.
            // - No data in the buffer, and the stream is in flowing mode. In this mode
            //   the loop below is responsible for ensuring read() is called. Failing to
            //   call read here would abort the flow and there's no other mechanism for
            //   continuing the flow if the stream consumer has just subscribed to the
            //   'data' event.
            //
            // In addition to the above conditions to keep reading data, the following
            // conditions prevent the data from being read:
            // - The stream has ended (state.ended).
            // - There is already a pending 'read' operation (state.reading). This is a
            //   case where the the stream has called the implementation defined _read()
            //   method, but they are processing the call asynchronously and have _not_
            //   called push() with new data. In this case we skip performing more
            //   read()s. The execution ends in this method again after the _read() ends
            //   up calling push() with more data.
            while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
              var len = state.length;
              debug('maybeReadMore read 0');
              stream.read(0);
              if (len === state.length) // didn't get any data, stop spinning.
                break;
            }

            state.readingMore = false;
          } // abstract method.  to be overridden in specific implementation classes.
          // call cb(er, data) where data is <= n in length.
          // for virtual (non-string, non-buffer) streams, "length" is somewhat
          // arbitrary, and perhaps not very meaningful.


          Readable.prototype._read = function (n) {
            errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
          };

          Readable.prototype.pipe = function (dest, pipeOpts) {
            var src = this;
            var state = this._readableState;

            switch (state.pipesCount) {
              case 0:
                state.pipes = dest;
                break;

              case 1:
                state.pipes = [state.pipes, dest];
                break;

              default:
                state.pipes.push(dest);
                break;
            }

            state.pipesCount += 1;
            debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
            var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
            var endFn = doEnd ? onend : unpipe;
            if (state.endEmitted) process.nextTick(endFn); else src.once('end', endFn);
            dest.on('unpipe', onunpipe);

            function onunpipe (readable, unpipeInfo) {
              debug('onunpipe');

              if (readable === src) {
                if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                  unpipeInfo.hasUnpiped = true;
                  cleanup();
                }
              }
            }

            function onend () {
              debug('onend');
              dest.end();
            } // when the dest drains, it reduces the awaitDrain counter
            // on the source.  This would be more elegant with a .once()
            // handler in flow(), but adding and removing repeatedly is
            // too slow.


            var ondrain = pipeOnDrain(src);
            dest.on('drain', ondrain);
            var cleanedUp = false;

            function cleanup () {
              debug('cleanup'); // cleanup event handlers once the pipe is broken

              dest.removeListener('close', onclose);
              dest.removeListener('finish', onfinish);
              dest.removeListener('drain', ondrain);
              dest.removeListener('error', onerror);
              dest.removeListener('unpipe', onunpipe);
              src.removeListener('end', onend);
              src.removeListener('end', unpipe);
              src.removeListener('data', ondata);
              cleanedUp = true; // if the reader is waiting for a drain event from this
              // specific writer, then it would cause it to never start
              // flowing again.
              // So, if this is awaiting a drain, then we just call it now.
              // If we don't know, then assume that we are waiting for one.

              if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
            }

            src.on('data', ondata);

            function ondata (chunk) {
              debug('ondata');
              var ret = dest.write(chunk);
              debug('dest.write', ret);

              if (ret === false) {
                // If the user unpiped during `dest.write()`, it is possible
                // to get stuck in a permanently paused state if that write
                // also returned false.
                // => Check whether `dest` is still a piping destination.
                if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                  debug('false write response, pause', state.awaitDrain);
                  state.awaitDrain++;
                }

                src.pause();
              }
            } // if the dest has an error, then stop piping into it.
            // however, don't suppress the throwing behavior for this.


            function onerror (er) {
              debug('onerror', er);
              unpipe();
              dest.removeListener('error', onerror);
              if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
            } // Make sure our error handler is attached before userland ones.


            prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

            function onclose () {
              dest.removeListener('finish', onfinish);
              unpipe();
            }

            dest.once('close', onclose);

            function onfinish () {
              debug('onfinish');
              dest.removeListener('close', onclose);
              unpipe();
            }

            dest.once('finish', onfinish);

            function unpipe () {
              debug('unpipe');
              src.unpipe(dest);
            } // tell the dest that it's being piped to


            dest.emit('pipe', src); // start the flow if it hasn't been started already.

            if (!state.flowing) {
              debug('pipe resume');
              src.resume();
            }

            return dest;
          };

          function pipeOnDrain (src) {
            return function pipeOnDrainFunctionResult () {
              var state = src._readableState;
              debug('pipeOnDrain', state.awaitDrain);
              if (state.awaitDrain) state.awaitDrain--;

              if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
                state.flowing = true;
                flow(src);
              }
            };
          }

          Readable.prototype.unpipe = function (dest) {
            var state = this._readableState;
            var unpipeInfo = {
              hasUnpiped: false
            }; // if we're not piping anywhere, then do nothing.

            if (state.pipesCount === 0) return this; // just one destination.  most common case.

            if (state.pipesCount === 1) {
              // passed in one, but it's not the right one.
              if (dest && dest !== state.pipes) return this;
              if (!dest) dest = state.pipes; // got a match.

              state.pipes = null;
              state.pipesCount = 0;
              state.flowing = false;
              if (dest) dest.emit('unpipe', this, unpipeInfo);
              return this;
            } // slow case. multiple pipe destinations.


            if (!dest) {
              // remove all.
              var dests = state.pipes;
              var len = state.pipesCount;
              state.pipes = null;
              state.pipesCount = 0;
              state.flowing = false;

              for (var i = 0; i < len; i++) {
                dests[i].emit('unpipe', this, {
                  hasUnpiped: false
                });
              }

              return this;
            } // try to find the right one.


            var index = indexOf(state.pipes, dest);
            if (index === -1) return this;
            state.pipes.splice(index, 1);
            state.pipesCount -= 1;
            if (state.pipesCount === 1) state.pipes = state.pipes[0];
            dest.emit('unpipe', this, unpipeInfo);
            return this;
          }; // set up data events if they are asked for
          // Ensure readable listeners eventually get something


          Readable.prototype.on = function (ev, fn) {
            var res = Stream.prototype.on.call(this, ev, fn);
            var state = this._readableState;

            if (ev === 'data') {
              // update readableListening so that resume() may be a no-op
              // a few lines down. This is needed to support once('readable').
              state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

              if (state.flowing !== false) this.resume();
            } else if (ev === 'readable') {
              if (!state.endEmitted && !state.readableListening) {
                state.readableListening = state.needReadable = true;
                state.flowing = false;
                state.emittedReadable = false;
                debug('on readable', state.length, state.reading);

                if (state.length) {
                  emitReadable(this);
                } else if (!state.reading) {
                  process.nextTick(nReadingNextTick, this);
                }
              }
            }

            return res;
          };

          Readable.prototype.addListener = Readable.prototype.on;

          Readable.prototype.removeListener = function (ev, fn) {
            var res = Stream.prototype.removeListener.call(this, ev, fn);

            if (ev === 'readable') {
              // We need to check if there is someone still listening to
              // readable and reset the state. However this needs to happen
              // after readable has been emitted but before I/O (nextTick) to
              // support once('readable', fn) cycles. This means that calling
              // resume within the same tick will have no
              // effect.
              process.nextTick(updateReadableListening, this);
            }

            return res;
          };

          Readable.prototype.removeAllListeners = function (ev) {
            var res = Stream.prototype.removeAllListeners.apply(this, arguments);

            if (ev === 'readable' || ev === undefined) {
              // We need to check if there is someone still listening to
              // readable and reset the state. However this needs to happen
              // after readable has been emitted but before I/O (nextTick) to
              // support once('readable', fn) cycles. This means that calling
              // resume within the same tick will have no
              // effect.
              process.nextTick(updateReadableListening, this);
            }

            return res;
          };

          function updateReadableListening (self) {
            var state = self._readableState;
            state.readableListening = self.listenerCount('readable') > 0;

            if (state.resumeScheduled && !state.paused) {
              // flowing needs to be set to true now, otherwise
              // the upcoming resume will not flow.
              state.flowing = true; // crude way to check if we should resume
            } else if (self.listenerCount('data') > 0) {
              self.resume();
            }
          }

          function nReadingNextTick (self) {
            debug('readable nexttick read 0');
            self.read(0);
          } // pause() and resume() are remnants of the legacy readable stream API
          // If the user uses them, then switch into old mode.


          Readable.prototype.resume = function () {
            var state = this._readableState;

            if (!state.flowing) {
              debug('resume'); // we flow only if there is no one listening
              // for readable, but we still have to call
              // resume()

              state.flowing = !state.readableListening;
              resume(this, state);
            }

            state.paused = false;
            return this;
          };

          function resume (stream, state) {
            if (!state.resumeScheduled) {
              state.resumeScheduled = true;
              process.nextTick(resume_, stream, state);
            }
          }

          function resume_ (stream, state) {
            debug('resume', state.reading);

            if (!state.reading) {
              stream.read(0);
            }

            state.resumeScheduled = false;
            stream.emit('resume');
            flow(stream);
            if (state.flowing && !state.reading) stream.read(0);
          }

          Readable.prototype.pause = function () {
            debug('call pause flowing=%j', this._readableState.flowing);

            if (this._readableState.flowing !== false) {
              debug('pause');
              this._readableState.flowing = false;
              this.emit('pause');
            }

            this._readableState.paused = true;
            return this;
          };

          function flow (stream) {
            var state = stream._readableState;
            debug('flow', state.flowing);

            while (state.flowing && stream.read() !== null) {
              ;
            }
          } // wrap an old-style stream as the async data source.
          // This is *not* part of the readable stream interface.
          // It is an ugly unfortunate mess of history.


          Readable.prototype.wrap = function (stream) {
            var _this = this;

            var state = this._readableState;
            var paused = false;
            stream.on('end', function () {
              debug('wrapped end');

              if (state.decoder && !state.ended) {
                var chunk = state.decoder.end();
                if (chunk && chunk.length) _this.push(chunk);
              }

              _this.push(null);
            });
            stream.on('data', function (chunk) {
              debug('wrapped data');
              if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

              if (state.objectMode && (chunk === null || chunk === undefined)) return; else if (!state.objectMode && (!chunk || !chunk.length)) return;

              var ret = _this.push(chunk);

              if (!ret) {
                paused = true;
                stream.pause();
              }
            }); // proxy all the other methods.
            // important when wrapping filters and duplexes.

            for (var i in stream) {
              if (this[i] === undefined && typeof stream[i] === 'function') {
                this[i] = function methodWrap (method) {
                  return function methodWrapReturnFunction () {
                    return stream[method].apply(stream, arguments);
                  };
                }(i);
              }
            } // proxy certain important events.


            for (var n = 0; n < kProxyEvents.length; n++) {
              stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
            } // when we try to consume some more bytes, simply unpause the
            // underlying stream.


            this._read = function (n) {
              debug('wrapped _read', n);

              if (paused) {
                paused = false;
                stream.resume();
              }
            };

            return this;
          };

          if (typeof Symbol === 'function') {
            Readable.prototype[Symbol.asyncIterator] = function () {
              if (createReadableStreamAsyncIterator === undefined) {
                createReadableStreamAsyncIterator = __webpack_require__(8187);
              }

              return createReadableStreamAsyncIterator(this);
            };
          }

          Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
            // making it explicit this property is not enumerable
            // because otherwise some prototype manipulation in
            // userland will fail
            enumerable: false,
            get: function get () {
              return this._readableState.highWaterMark;
            }
          });
          Object.defineProperty(Readable.prototype, 'readableBuffer', {
            // making it explicit this property is not enumerable
            // because otherwise some prototype manipulation in
            // userland will fail
            enumerable: false,
            get: function get () {
              return this._readableState && this._readableState.buffer;
            }
          });
          Object.defineProperty(Readable.prototype, 'readableFlowing', {
            // making it explicit this property is not enumerable
            // because otherwise some prototype manipulation in
            // userland will fail
            enumerable: false,
            get: function get () {
              return this._readableState.flowing;
            },
            set: function set (state) {
              if (this._readableState) {
                this._readableState.flowing = state;
              }
            }
          }); // exposed for testing purposes only.

          Readable._fromList = fromList;
          Object.defineProperty(Readable.prototype, 'readableLength', {
            // making it explicit this property is not enumerable
            // because otherwise some prototype manipulation in
            // userland will fail
            enumerable: false,
            get: function get () {
              return this._readableState.length;
            }
          }); // Pluck off n bytes from an array of buffers.
          // Length is the combined lengths of all the buffers in the list.
          // This function is designed to be inlinable, so please take care when making
          // changes to the function body.

          function fromList (n, state) {
            // nothing buffered
            if (state.length === 0) return null;
            var ret;
            if (state.objectMode) ret = state.buffer.shift(); else if (!n || n >= state.length) {
              // read it all, truncate the list
              if (state.decoder) ret = state.buffer.join(''); else if (state.buffer.length === 1) ret = state.buffer.first(); else ret = state.buffer.concat(state.length);
              state.buffer.clear();
            } else {
              // read part of list
              ret = state.buffer.consume(n, state.decoder);
            }
            return ret;
          }

          function endReadable (stream) {
            var state = stream._readableState;
            debug('endReadable', state.endEmitted);

            if (!state.endEmitted) {
              state.ended = true;
              process.nextTick(endReadableNT, state, stream);
            }
          }

          function endReadableNT (state, stream) {
            debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

            if (!state.endEmitted && state.length === 0) {
              state.endEmitted = true;
              stream.readable = false;
              stream.emit('end');

              if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the writable side is ready for autoDestroy as well
                var wState = stream._writableState;

                if (!wState || wState.autoDestroy && wState.finished) {
                  stream.destroy();
                }
              }
            }
          }

          if (typeof Symbol === 'function') {
            Readable.from = function (iterable, opts) {
              if (from === undefined) {
                from = __webpack_require__(3733);
              }

              return from(Readable, iterable, opts);
            };
          }

          function indexOf (xs, x) {
            for (var i = 0, l = xs.length; i < l; i++) {
              if (xs[i] === x) return i;
            }

            return -1;
          }

          /***/
        }),

/***/ 8597:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          "use strict";
          // Copyright Joyent, Inc. and other Node contributors.
          //
          // Permission is hereby granted, free of charge, to any person obtaining a
          // copy of this software and associated documentation files (the
          // "Software"), to deal in the Software without restriction, including
          // without limitation the rights to use, copy, modify, merge, publish,
          // distribute, sublicense, and/or sell copies of the Software, and to permit
          // persons to whom the Software is furnished to do so, subject to the
          // following conditions:
          //
          // The above copyright notice and this permission notice shall be included
          // in all copies or substantial portions of the Software.
          //
          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
          // USE OR OTHER DEALINGS IN THE SOFTWARE.
          // a transform stream is a readable/writable stream where you do
          // something with the data.  Sometimes it's called a "filter",
          // but that's not a great name for it, since that implies a thing where
          // some bits pass through, and others are simply ignored.  (That would
          // be a valid example of a transform, of course.)
          //
          // While the output is causally related to the input, it's not a
          // necessarily symmetric or synchronous transformation.  For example,
          // a zlib stream might take multiple plain-text writes(), and then
          // emit a single compressed chunk some time in the future.
          //
          // Here's how this works:
          //
          // The Transform stream has all the aspects of the readable and writable
          // stream classes.  When you write(chunk), that calls _write(chunk,cb)
          // internally, and returns false if there's a lot of pending writes
          // buffered up.  When you call read(), that calls _read(n) until
          // there's enough pending readable data buffered up.
          //
          // In a transform stream, the written data is placed in a buffer.  When
          // _read(n) is called, it transforms the queued up data, calling the
          // buffered _write cb's as it consumes chunks.  If consuming a single
          // written chunk would result in multiple output chunks, then the first
          // outputted bit calls the readcb, and subsequent chunks just go into
          // the read buffer, and will cause it to emit 'readable' if necessary.
          //
          // This way, back-pressure is actually determined by the reading side,
          // since _read has to be called to start processing a new chunk.  However,
          // a pathological inflate type of transform can cause excessive buffering
          // here.  For example, imagine a stream where every byte of input is
          // interpreted as an integer from 0-255, and then results in that many
          // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
          // 1kb of data being output.  In this case, you could write a very small
          // amount of input, and end up with a very large amount of output.  In
          // such a pathological inflating mechanism, there'd be no way to tell
          // the system to stop doing the transform.  A single 4MB write could
          // cause the system to run out of memory.
          //
          // However, even in such a pathological case, only a single written chunk
          // would be consumed, and then the rest would wait (un-transformed) until
          // the results of the previous transformed chunk were consumed.


          module.exports = Transform;

          var _require$codes = __webpack_require__(553)/* .codes */.q,
            ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
            ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
            ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,
            ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

          var Duplex = __webpack_require__(673);

          __webpack_require__(3730)(Transform, Duplex);

          function afterTransform (er, data) {
            var ts = this._transformState;
            ts.transforming = false;
            var cb = ts.writecb;

            if (cb === null) {
              return this.emit('error', new ERR_MULTIPLE_CALLBACK());
            }

            ts.writechunk = null;
            ts.writecb = null;
            if (data != null) // single equals check for both `null` and `undefined`
              this.push(data);
            cb(er);
            var rs = this._readableState;
            rs.reading = false;

            if (rs.needReadable || rs.length < rs.highWaterMark) {
              this._read(rs.highWaterMark);
            }
          }

          function Transform (options) {
            if (!(this instanceof Transform)) return new Transform(options);
            Duplex.call(this, options);
            this._transformState = {
              afterTransform: afterTransform.bind(this),
              needTransform: false,
              transforming: false,
              writecb: null,
              writechunk: null,
              writeencoding: null
            }; // start out asking for a readable event once data is transformed.

            this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
            // that Readable wants before the first _read call, so unset the
            // sync guard flag.

            this._readableState.sync = false;

            if (options) {
              if (typeof options.transform === 'function') this._transform = options.transform;
              if (typeof options.flush === 'function') this._flush = options.flush;
            } // When the writable side finishes, then flush out anything remaining.


            this.on('prefinish', prefinish);
          }

          function prefinish () {
            var _this = this;

            if (typeof this._flush === 'function' && !this._readableState.destroyed) {
              this._flush(function (er, data) {
                done(_this, er, data);
              });
            } else {
              done(this, null, null);
            }
          }

          Transform.prototype.push = function (chunk, encoding) {
            this._transformState.needTransform = false;
            return Duplex.prototype.push.call(this, chunk, encoding);
          }; // This is the part where you do stuff!
          // override this function in implementation classes.
          // 'chunk' is an input chunk.
          //
          // Call `push(newChunk)` to pass along transformed output
          // to the readable side.  You may call 'push' zero or more times.
          //
          // Call `cb(err)` when you are done with this chunk.  If you pass
          // an error, then that'll put the hurt on the whole operation.  If you
          // never call cb(), then you'll never get another chunk.


          Transform.prototype._transform = function (chunk, encoding, cb) {
            cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
          };

          Transform.prototype._write = function (chunk, encoding, cb) {
            var ts = this._transformState;
            ts.writecb = cb;
            ts.writechunk = chunk;
            ts.writeencoding = encoding;

            if (!ts.transforming) {
              var rs = this._readableState;
              if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
            }
          }; // Doesn't matter what the args are here.
          // _transform does all the work.
          // That we got here means that the readable side wants more data.


          Transform.prototype._read = function (n) {
            var ts = this._transformState;

            if (ts.writechunk !== null && !ts.transforming) {
              ts.transforming = true;

              this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
            } else {
              // mark that we need a transform, so that any data that comes in
              // will get processed, now that we've asked for it.
              ts.needTransform = true;
            }
          };

          Transform.prototype._destroy = function (err, cb) {
            Duplex.prototype._destroy.call(this, err, function (err2) {
              cb(err2);
            });
          };

          function done (stream, er, data) {
            if (er) return stream.emit('error', er);
            if (data != null) // single equals check for both `null` and `undefined`
              stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
            // if there's nothing in the write buffer, then that means
            // that nothing more will ever be provided

            if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
            if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
            return stream.push(null);
          }

          /***/
        }),

/***/ 8719:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          "use strict";
/* provided dependency */ var process = __webpack_require__(2695);
          // Copyright Joyent, Inc. and other Node contributors.
          //
          // Permission is hereby granted, free of charge, to any person obtaining a
          // copy of this software and associated documentation files (the
          // "Software"), to deal in the Software without restriction, including
          // without limitation the rights to use, copy, modify, merge, publish,
          // distribute, sublicense, and/or sell copies of the Software, and to permit
          // persons to whom the Software is furnished to do so, subject to the
          // following conditions:
          //
          // The above copyright notice and this permission notice shall be included
          // in all copies or substantial portions of the Software.
          //
          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
          // USE OR OTHER DEALINGS IN THE SOFTWARE.
          // A bit simpler than readable streams.
          // Implement an async ._write(chunk, encoding, cb), and it'll handle all
          // the drain event emission and buffering.


          module.exports = Writable;
          /* <replacement> */

          function WriteReq (chunk, encoding, cb) {
            this.chunk = chunk;
            this.encoding = encoding;
            this.callback = cb;
            this.next = null;
          } // It seems a linked list but it is not
          // there will be only 2 of these for each stream


          function CorkedRequest (state) {
            var _this = this;

            this.next = null;
            this.entry = null;

            this.finish = function () {
              onCorkedFinish(_this, state);
            };
          }
          /* </replacement> */

          /*<replacement>*/


          var Duplex;
          /*</replacement>*/

          Writable.WritableState = WritableState;
          /*<replacement>*/

          var internalUtil = {
            deprecate: __webpack_require__(72)
          };
          /*</replacement>*/

          /*<replacement>*/

          var Stream = __webpack_require__(8208);
          /*</replacement>*/


          var Buffer = __webpack_require__(7866).Buffer;

          var OurUint8Array = __webpack_require__.g.Uint8Array || function () { };

          function _uint8ArrayToBuffer (chunk) {
            return Buffer.from(chunk);
          }

          function _isUint8Array (obj) {
            return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
          }

          var destroyImpl = __webpack_require__(3390);

          var _require = __webpack_require__(1111),
            getHighWaterMark = _require.getHighWaterMark;

          var _require$codes = __webpack_require__(553)/* .codes */.q,
            ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
            ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,
            ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,
            ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,
            ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,
            ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,
            ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,
            ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;

          var errorOrDestroy = destroyImpl.errorOrDestroy;

          __webpack_require__(3730)(Writable, Stream);

          function nop () { }

          function WritableState (options, stream, isDuplex) {
            Duplex = Duplex || __webpack_require__(673);
            options = options || {}; // Duplex streams are both readable and writable, but share
            // the same options object.
            // However, some cases require setting options to different
            // values for the readable and the writable sides of the duplex stream,
            // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

            if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
            // contains buffers or objects.

            this.objectMode = !!options.objectMode;
            if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
            // Note: 0 is a valid value, means that we always return false if
            // the entire buffer is not flushed immediately on write()

            this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

            this.finalCalled = false; // drain event flag.

            this.needDrain = false; // at the start of calling end()

            this.ending = false; // when end() has been called, and returned

            this.ended = false; // when 'finish' is emitted

            this.finished = false; // has it been destroyed

            this.destroyed = false; // should we decode strings into buffers before passing to _write?
            // this is here so that some node-core streams can optimize string
            // handling at a lower level.

            var noDecode = options.decodeStrings === false;
            this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
            // encoding is 'binary' so we have to make this configurable.
            // Everything else in the universe uses 'utf8', though.

            this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
            // of how much we're waiting to get pushed to some underlying
            // socket or file.

            this.length = 0; // a flag to see when we're in the middle of a write.

            this.writing = false; // when true all writes will be buffered until .uncork() call

            this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
            // or on a later tick.  We set this to true at first, because any
            // actions that shouldn't happen until "later" should generally also
            // not happen before the first write call.

            this.sync = true; // a flag to know if we're processing previously buffered items, which
            // may call the _write() callback in the same tick, so that we don't
            // end up in an overlapped onwrite situation.

            this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

            this.onwrite = function (er) {
              onwrite(stream, er);
            }; // the callback that the user supplies to write(chunk,encoding,cb)


            this.writecb = null; // the amount that is being written when _write is called.

            this.writelen = 0;
            this.bufferedRequest = null;
            this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
            // this must be 0 before 'finish' can be emitted

            this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
            // This is relevant for synchronous Transform streams

            this.prefinished = false; // True if the error was already emitted and should not be thrown again

            this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

            this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

            this.autoDestroy = !!options.autoDestroy; // count buffered requests

            this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
            // one allocated and free to use, and we maintain at most two

            this.corkedRequestsFree = new CorkedRequest(this);
          }

          WritableState.prototype.getBuffer = function getBuffer () {
            var current = this.bufferedRequest;
            var out = [];

            while (current) {
              out.push(current);
              current = current.next;
            }

            return out;
          };

          (function () {
            try {
              Object.defineProperty(WritableState.prototype, 'buffer', {
                get: internalUtil.deprecate(function writableStateBufferGetter () {
                  return this.getBuffer();
                }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
              });
            } catch (_) { }
          })(); // Test _writableState for inheritance to account for Duplex streams,
          // whose prototype chain only points to Readable.


          var realHasInstance;

          if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
            realHasInstance = Function.prototype[Symbol.hasInstance];
            Object.defineProperty(Writable, Symbol.hasInstance, {
              value: function value (object) {
                if (realHasInstance.call(this, object)) return true;
                if (this !== Writable) return false;
                return object && object._writableState instanceof WritableState;
              }
            });
          } else {
            realHasInstance = function realHasInstance (object) {
              return object instanceof this;
            };
          }

          function Writable (options) {
            Duplex = Duplex || __webpack_require__(673); // Writable ctor is applied to Duplexes, too.
            // `realHasInstance` is necessary because using plain `instanceof`
            // would return false, as no `_writableState` property is attached.
            // Trying to use the custom `instanceof` for Writable here will also break the
            // Node.js LazyTransform implementation, which has a non-trivial getter for
            // `_writableState` that would lead to infinite recursion.
            // Checking for a Stream.Duplex instance is faster here instead of inside
            // the WritableState constructor, at least with V8 6.5

            var isDuplex = this instanceof Duplex;
            if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
            this._writableState = new WritableState(options, this, isDuplex); // legacy.

            this.writable = true;

            if (options) {
              if (typeof options.write === 'function') this._write = options.write;
              if (typeof options.writev === 'function') this._writev = options.writev;
              if (typeof options.destroy === 'function') this._destroy = options.destroy;
              if (typeof options.final === 'function') this._final = options.final;
            }

            Stream.call(this);
          } // Otherwise people can pipe Writable streams, which is just wrong.


          Writable.prototype.pipe = function () {
            errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
          };

          function writeAfterEnd (stream, cb) {
            var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

            errorOrDestroy(stream, er);
            process.nextTick(cb, er);
          } // Checks that a user-supplied chunk is valid, especially for the particular
          // mode the stream is in. Currently this means that `null` is never accepted
          // and undefined/non-string values are only allowed in object mode.


          function validChunk (stream, state, chunk, cb) {
            var er;

            if (chunk === null) {
              er = new ERR_STREAM_NULL_VALUES();
            } else if (typeof chunk !== 'string' && !state.objectMode) {
              er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);
            }

            if (er) {
              errorOrDestroy(stream, er);
              process.nextTick(cb, er);
              return false;
            }

            return true;
          }

          Writable.prototype.write = function (chunk, encoding, cb) {
            var state = this._writableState;
            var ret = false;

            var isBuf = !state.objectMode && _isUint8Array(chunk);

            if (isBuf && !Buffer.isBuffer(chunk)) {
              chunk = _uint8ArrayToBuffer(chunk);
            }

            if (typeof encoding === 'function') {
              cb = encoding;
              encoding = null;
            }

            if (isBuf) encoding = 'buffer'; else if (!encoding) encoding = state.defaultEncoding;
            if (typeof cb !== 'function') cb = nop;
            if (state.ending) writeAfterEnd(this, cb); else if (isBuf || validChunk(this, state, chunk, cb)) {
              state.pendingcb++;
              ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
            }
            return ret;
          };

          Writable.prototype.cork = function () {
            this._writableState.corked++;
          };

          Writable.prototype.uncork = function () {
            var state = this._writableState;

            if (state.corked) {
              state.corked--;
              if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
            }
          };

          Writable.prototype.setDefaultEncoding = function setDefaultEncoding (encoding) {
            // node::ParseEncoding() requires lower case.
            if (typeof encoding === 'string') encoding = encoding.toLowerCase();
            if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
            this._writableState.defaultEncoding = encoding;
            return this;
          };

          Object.defineProperty(Writable.prototype, 'writableBuffer', {
            // making it explicit this property is not enumerable
            // because otherwise some prototype manipulation in
            // userland will fail
            enumerable: false,
            get: function get () {
              return this._writableState && this._writableState.getBuffer();
            }
          });

          function decodeChunk (state, chunk, encoding) {
            if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
              chunk = Buffer.from(chunk, encoding);
            }

            return chunk;
          }

          Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
            // making it explicit this property is not enumerable
            // because otherwise some prototype manipulation in
            // userland will fail
            enumerable: false,
            get: function get () {
              return this._writableState.highWaterMark;
            }
          }); // if we're already writing something, then just put this
          // in the queue, and wait our turn.  Otherwise, call _write
          // If we return false, then we need a drain event, so set that flag.

          function writeOrBuffer (stream, state, isBuf, chunk, encoding, cb) {
            if (!isBuf) {
              var newChunk = decodeChunk(state, chunk, encoding);

              if (chunk !== newChunk) {
                isBuf = true;
                encoding = 'buffer';
                chunk = newChunk;
              }
            }

            var len = state.objectMode ? 1 : chunk.length;
            state.length += len;
            var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

            if (!ret) state.needDrain = true;

            if (state.writing || state.corked) {
              var last = state.lastBufferedRequest;
              state.lastBufferedRequest = {
                chunk: chunk,
                encoding: encoding,
                isBuf: isBuf,
                callback: cb,
                next: null
              };

              if (last) {
                last.next = state.lastBufferedRequest;
              } else {
                state.bufferedRequest = state.lastBufferedRequest;
              }

              state.bufferedRequestCount += 1;
            } else {
              doWrite(stream, state, false, len, chunk, encoding, cb);
            }

            return ret;
          }

          function doWrite (stream, state, writev, len, chunk, encoding, cb) {
            state.writelen = len;
            state.writecb = cb;
            state.writing = true;
            state.sync = true;
            if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write')); else if (writev) stream._writev(chunk, state.onwrite); else stream._write(chunk, encoding, state.onwrite);
            state.sync = false;
          }

          function onwriteError (stream, state, sync, er, cb) {
            --state.pendingcb;

            if (sync) {
              // defer the callback if we are being called synchronously
              // to avoid piling up things on the stack
              process.nextTick(cb, er); // this can emit finish, and it will always happen
              // after error

              process.nextTick(finishMaybe, stream, state);
              stream._writableState.errorEmitted = true;
              errorOrDestroy(stream, er);
            } else {
              // the caller expect this to happen before if
              // it is async
              cb(er);
              stream._writableState.errorEmitted = true;
              errorOrDestroy(stream, er); // this can emit finish, but finish must
              // always follow error

              finishMaybe(stream, state);
            }
          }

          function onwriteStateUpdate (state) {
            state.writing = false;
            state.writecb = null;
            state.length -= state.writelen;
            state.writelen = 0;
          }

          function onwrite (stream, er) {
            var state = stream._writableState;
            var sync = state.sync;
            var cb = state.writecb;
            if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
            onwriteStateUpdate(state);
            if (er) onwriteError(stream, state, sync, er, cb); else {
              // Check if we're actually ready to finish, but don't emit yet
              var finished = needFinish(state) || stream.destroyed;

              if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
                clearBuffer(stream, state);
              }

              if (sync) {
                process.nextTick(afterWrite, stream, state, finished, cb);
              } else {
                afterWrite(stream, state, finished, cb);
              }
            }
          }

          function afterWrite (stream, state, finished, cb) {
            if (!finished) onwriteDrain(stream, state);
            state.pendingcb--;
            cb();
            finishMaybe(stream, state);
          } // Must force callback to be called on nextTick, so that we don't
          // emit 'drain' before the write() consumer gets the 'false' return
          // value, and has a chance to attach a 'drain' listener.


          function onwriteDrain (stream, state) {
            if (state.length === 0 && state.needDrain) {
              state.needDrain = false;
              stream.emit('drain');
            }
          } // if there's something in the buffer waiting, then process it


          function clearBuffer (stream, state) {
            state.bufferProcessing = true;
            var entry = state.bufferedRequest;

            if (stream._writev && entry && entry.next) {
              // Fast case, write everything using _writev()
              var l = state.bufferedRequestCount;
              var buffer = new Array(l);
              var holder = state.corkedRequestsFree;
              holder.entry = entry;
              var count = 0;
              var allBuffers = true;

              while (entry) {
                buffer[count] = entry;
                if (!entry.isBuf) allBuffers = false;
                entry = entry.next;
                count += 1;
              }

              buffer.allBuffers = allBuffers;
              doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
              // as the hot path ends with doWrite

              state.pendingcb++;
              state.lastBufferedRequest = null;

              if (holder.next) {
                state.corkedRequestsFree = holder.next;
                holder.next = null;
              } else {
                state.corkedRequestsFree = new CorkedRequest(state);
              }

              state.bufferedRequestCount = 0;
            } else {
              // Slow case, write chunks one-by-one
              while (entry) {
                var chunk = entry.chunk;
                var encoding = entry.encoding;
                var cb = entry.callback;
                var len = state.objectMode ? 1 : chunk.length;
                doWrite(stream, state, false, len, chunk, encoding, cb);
                entry = entry.next;
                state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
                // it means that we need to wait until it does.
                // also, that means that the chunk and cb are currently
                // being processed, so move the buffer counter past them.

                if (state.writing) {
                  break;
                }
              }

              if (entry === null) state.lastBufferedRequest = null;
            }

            state.bufferedRequest = entry;
            state.bufferProcessing = false;
          }

          Writable.prototype._write = function (chunk, encoding, cb) {
            cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
          };

          Writable.prototype._writev = null;

          Writable.prototype.end = function (chunk, encoding, cb) {
            var state = this._writableState;

            if (typeof chunk === 'function') {
              cb = chunk;
              chunk = null;
              encoding = null;
            } else if (typeof encoding === 'function') {
              cb = encoding;
              encoding = null;
            }

            if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

            if (state.corked) {
              state.corked = 1;
              this.uncork();
            } // ignore unnecessary end() calls.


            if (!state.ending) endWritable(this, state, cb);
            return this;
          };

          Object.defineProperty(Writable.prototype, 'writableLength', {
            // making it explicit this property is not enumerable
            // because otherwise some prototype manipulation in
            // userland will fail
            enumerable: false,
            get: function get () {
              return this._writableState.length;
            }
          });

          function needFinish (state) {
            return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
          }

          function callFinal (stream, state) {
            stream._final(function (err) {
              state.pendingcb--;

              if (err) {
                errorOrDestroy(stream, err);
              }

              state.prefinished = true;
              stream.emit('prefinish');
              finishMaybe(stream, state);
            });
          }

          function prefinish (stream, state) {
            if (!state.prefinished && !state.finalCalled) {
              if (typeof stream._final === 'function' && !state.destroyed) {
                state.pendingcb++;
                state.finalCalled = true;
                process.nextTick(callFinal, stream, state);
              } else {
                state.prefinished = true;
                stream.emit('prefinish');
              }
            }
          }

          function finishMaybe (stream, state) {
            var need = needFinish(state);

            if (need) {
              prefinish(stream, state);

              if (state.pendingcb === 0) {
                state.finished = true;
                stream.emit('finish');

                if (state.autoDestroy) {
                  // In case of duplex streams we need a way to detect
                  // if the readable side is ready for autoDestroy as well
                  var rState = stream._readableState;

                  if (!rState || rState.autoDestroy && rState.endEmitted) {
                    stream.destroy();
                  }
                }
              }
            }

            return need;
          }

          function endWritable (stream, state, cb) {
            state.ending = true;
            finishMaybe(stream, state);

            if (cb) {
              if (state.finished) process.nextTick(cb); else stream.once('finish', cb);
            }

            state.ended = true;
            stream.writable = false;
          }

          function onCorkedFinish (corkReq, state, err) {
            var entry = corkReq.entry;
            corkReq.entry = null;

            while (entry) {
              var cb = entry.callback;
              state.pendingcb--;
              cb(err);
              entry = entry.next;
            } // reuse the free corkReq.


            state.corkedRequestsFree.next = corkReq;
          }

          Object.defineProperty(Writable.prototype, 'destroyed', {
            // making it explicit this property is not enumerable
            // because otherwise some prototype manipulation in
            // userland will fail
            enumerable: false,
            get: function get () {
              if (this._writableState === undefined) {
                return false;
              }

              return this._writableState.destroyed;
            },
            set: function set (value) {
              // we ignore the value if the stream
              // has not been initialized yet
              if (!this._writableState) {
                return;
              } // backward compatibility, the user is explicitly
              // managing destroyed


              this._writableState.destroyed = value;
            }
          });
          Writable.prototype.destroy = destroyImpl.destroy;
          Writable.prototype._undestroy = destroyImpl.undestroy;

          Writable.prototype._destroy = function (err, cb) {
            cb(err);
          };

          /***/
        }),

/***/ 8187:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          "use strict";
/* provided dependency */ var process = __webpack_require__(2695);


          var _Object$setPrototypeO;

          function _defineProperty (obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

          var finished = __webpack_require__(2426);

          var kLastResolve = Symbol('lastResolve');
          var kLastReject = Symbol('lastReject');
          var kError = Symbol('error');
          var kEnded = Symbol('ended');
          var kLastPromise = Symbol('lastPromise');
          var kHandlePromise = Symbol('handlePromise');
          var kStream = Symbol('stream');

          function createIterResult (value, done) {
            return {
              value: value,
              done: done
            };
          }

          function readAndResolve (iter) {
            var resolve = iter[kLastResolve];

            if (resolve !== null) {
              var data = iter[kStream].read(); // we defer if data is null
              // we can be expecting either 'end' or
              // 'error'

              if (data !== null) {
                iter[kLastPromise] = null;
                iter[kLastResolve] = null;
                iter[kLastReject] = null;
                resolve(createIterResult(data, false));
              }
            }
          }

          function onReadable (iter) {
            // we wait for the next tick, because it might
            // emit an error with process.nextTick
            process.nextTick(readAndResolve, iter);
          }

          function wrapForNext (lastPromise, iter) {
            return function (resolve, reject) {
              lastPromise.then(function () {
                if (iter[kEnded]) {
                  resolve(createIterResult(undefined, true));
                  return;
                }

                iter[kHandlePromise](resolve, reject);
              }, reject);
            };
          }

          var AsyncIteratorPrototype = Object.getPrototypeOf(function () { });
          var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
            get stream () {
              return this[kStream];
            },

            next: function next () {
              var _this = this;

              // if we have detected an error in the meanwhile
              // reject straight away
              var error = this[kError];

              if (error !== null) {
                return Promise.reject(error);
              }

              if (this[kEnded]) {
                return Promise.resolve(createIterResult(undefined, true));
              }

              if (this[kStream].destroyed) {
                // We need to defer via nextTick because if .destroy(err) is
                // called, the error will be emitted via nextTick, and
                // we cannot guarantee that there is no error lingering around
                // waiting to be emitted.
                return new Promise(function (resolve, reject) {
                  process.nextTick(function () {
                    if (_this[kError]) {
                      reject(_this[kError]);
                    } else {
                      resolve(createIterResult(undefined, true));
                    }
                  });
                });
              } // if we have multiple next() calls
              // we will wait for the previous Promise to finish
              // this logic is optimized to support for await loops,
              // where next() is only called once at a time


              var lastPromise = this[kLastPromise];
              var promise;

              if (lastPromise) {
                promise = new Promise(wrapForNext(lastPromise, this));
              } else {
                // fast path needed to support multiple this.push()
                // without triggering the next() queue
                var data = this[kStream].read();

                if (data !== null) {
                  return Promise.resolve(createIterResult(data, false));
                }

                promise = new Promise(this[kHandlePromise]);
              }

              this[kLastPromise] = promise;
              return promise;
            }
          }, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {
            return this;
          }), _defineProperty(_Object$setPrototypeO, "return", function _return () {
            var _this2 = this;

            // destroy(err, cb) is a private API
            // we can guarantee we have that here, because we control the
            // Readable class this is attached to
            return new Promise(function (resolve, reject) {
              _this2[kStream].destroy(null, function (err) {
                if (err) {
                  reject(err);
                  return;
                }

                resolve(createIterResult(undefined, true));
              });
            });
          }), _Object$setPrototypeO), AsyncIteratorPrototype);

          var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator (stream) {
            var _Object$create;

            var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {
              value: stream,
              writable: true
            }), _defineProperty(_Object$create, kLastResolve, {
              value: null,
              writable: true
            }), _defineProperty(_Object$create, kLastReject, {
              value: null,
              writable: true
            }), _defineProperty(_Object$create, kError, {
              value: null,
              writable: true
            }), _defineProperty(_Object$create, kEnded, {
              value: stream._readableState.endEmitted,
              writable: true
            }), _defineProperty(_Object$create, kHandlePromise, {
              value: function value (resolve, reject) {
                var data = iterator[kStream].read();

                if (data) {
                  iterator[kLastPromise] = null;
                  iterator[kLastResolve] = null;
                  iterator[kLastReject] = null;
                  resolve(createIterResult(data, false));
                } else {
                  iterator[kLastResolve] = resolve;
                  iterator[kLastReject] = reject;
                }
              },
              writable: true
            }), _Object$create));
            iterator[kLastPromise] = null;
            finished(stream, function (err) {
              if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
                var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
                // returned by next() and store the error

                if (reject !== null) {
                  iterator[kLastPromise] = null;
                  iterator[kLastResolve] = null;
                  iterator[kLastReject] = null;
                  reject(err);
                }

                iterator[kError] = err;
                return;
              }

              var resolve = iterator[kLastResolve];

              if (resolve !== null) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                resolve(createIterResult(undefined, true));
              }

              iterator[kEnded] = true;
            });
            stream.on('readable', onReadable.bind(null, iterator));
            return iterator;
          };

          module.exports = createReadableStreamAsyncIterator;

          /***/
        }),

/***/ 4506:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          "use strict";


          function ownKeys (object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

          function _objectSpread (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

          function _defineProperty (obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

          function _classCallCheck (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

          function _defineProperties (target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

          function _createClass (Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

          var _require = __webpack_require__(7866),
            Buffer = _require.Buffer;

          var _require2 = __webpack_require__(462),
            inspect = _require2.inspect;

          var custom = inspect && inspect.custom || 'inspect';

          function copyBuffer (src, target, offset) {
            Buffer.prototype.copy.call(src, target, offset);
          }

          module.exports =
            /*#__PURE__*/
            function () {
              function BufferList () {
                _classCallCheck(this, BufferList);

                this.head = null;
                this.tail = null;
                this.length = 0;
              }

              _createClass(BufferList, [{
                key: "push",
                value: function push (v) {
                  var entry = {
                    data: v,
                    next: null
                  };
                  if (this.length > 0) this.tail.next = entry; else this.head = entry;
                  this.tail = entry;
                  ++this.length;
                }
              }, {
                key: "unshift",
                value: function unshift (v) {
                  var entry = {
                    data: v,
                    next: this.head
                  };
                  if (this.length === 0) this.tail = entry;
                  this.head = entry;
                  ++this.length;
                }
              }, {
                key: "shift",
                value: function shift () {
                  if (this.length === 0) return;
                  var ret = this.head.data;
                  if (this.length === 1) this.head = this.tail = null; else this.head = this.head.next;
                  --this.length;
                  return ret;
                }
              }, {
                key: "clear",
                value: function clear () {
                  this.head = this.tail = null;
                  this.length = 0;
                }
              }, {
                key: "join",
                value: function join (s) {
                  if (this.length === 0) return '';
                  var p = this.head;
                  var ret = '' + p.data;

                  while (p = p.next) {
                    ret += s + p.data;
                  }

                  return ret;
                }
              }, {
                key: "concat",
                value: function concat (n) {
                  if (this.length === 0) return Buffer.alloc(0);
                  var ret = Buffer.allocUnsafe(n >>> 0);
                  var p = this.head;
                  var i = 0;

                  while (p) {
                    copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                  }

                  return ret;
                } // Consumes a specified amount of bytes or characters from the buffered data.

              }, {
                key: "consume",
                value: function consume (n, hasStrings) {
                  var ret;

                  if (n < this.head.data.length) {
                    // `slice` is the same for buffers and strings.
                    ret = this.head.data.slice(0, n);
                    this.head.data = this.head.data.slice(n);
                  } else if (n === this.head.data.length) {
                    // First chunk is a perfect match.
                    ret = this.shift();
                  } else {
                    // Result spans more than one buffer.
                    ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                  }

                  return ret;
                }
              }, {
                key: "first",
                value: function first () {
                  return this.head.data;
                } // Consumes a specified amount of characters from the buffered data.

              }, {
                key: "_getString",
                value: function _getString (n) {
                  var p = this.head;
                  var c = 1;
                  var ret = p.data;
                  n -= ret.length;

                  while (p = p.next) {
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str; else ret += str.slice(0, n);
                    n -= nb;

                    if (n === 0) {
                      if (nb === str.length) {
                        ++c;
                        if (p.next) this.head = p.next; else this.head = this.tail = null;
                      } else {
                        this.head = p;
                        p.data = str.slice(nb);
                      }

                      break;
                    }

                    ++c;
                  }

                  this.length -= c;
                  return ret;
                } // Consumes a specified amount of bytes from the buffered data.

              }, {
                key: "_getBuffer",
                value: function _getBuffer (n) {
                  var ret = Buffer.allocUnsafe(n);
                  var p = this.head;
                  var c = 1;
                  p.data.copy(ret);
                  n -= p.data.length;

                  while (p = p.next) {
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;

                    if (n === 0) {
                      if (nb === buf.length) {
                        ++c;
                        if (p.next) this.head = p.next; else this.head = this.tail = null;
                      } else {
                        this.head = p;
                        p.data = buf.slice(nb);
                      }

                      break;
                    }

                    ++c;
                  }

                  this.length -= c;
                  return ret;
                } // Make sure the linked list only shows the minimal necessary information.

              }, {
                key: custom,
                value: function value (_, options) {
                  return inspect(this, _objectSpread({}, options, {
                    // Only inspect one level.
                    depth: 0,
                    // It should not recurse.
                    customInspect: false
                  }));
                }
              }]);

              return BufferList;
            }();

          /***/
        }),

/***/ 3390:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          "use strict";
/* provided dependency */ var process = __webpack_require__(2695);
          // undocumented cb() API, needed for core, not for public API

          function destroy (err, cb) {
            var _this = this;

            var readableDestroyed = this._readableState && this._readableState.destroyed;
            var writableDestroyed = this._writableState && this._writableState.destroyed;

            if (readableDestroyed || writableDestroyed) {
              if (cb) {
                cb(err);
              } else if (err) {
                if (!this._writableState) {
                  process.nextTick(emitErrorNT, this, err);
                } else if (!this._writableState.errorEmitted) {
                  this._writableState.errorEmitted = true;
                  process.nextTick(emitErrorNT, this, err);
                }
              }

              return this;
            } // we set destroyed to true before firing error callbacks in order
            // to make it re-entrance safe in case destroy() is called within callbacks


            if (this._readableState) {
              this._readableState.destroyed = true;
            } // if this is a duplex stream mark the writable part as destroyed as well


            if (this._writableState) {
              this._writableState.destroyed = true;
            }

            this._destroy(err || null, function (err) {
              if (!cb && err) {
                if (!_this._writableState) {
                  process.nextTick(emitErrorAndCloseNT, _this, err);
                } else if (!_this._writableState.errorEmitted) {
                  _this._writableState.errorEmitted = true;
                  process.nextTick(emitErrorAndCloseNT, _this, err);
                } else {
                  process.nextTick(emitCloseNT, _this);
                }
              } else if (cb) {
                process.nextTick(emitCloseNT, _this);
                cb(err);
              } else {
                process.nextTick(emitCloseNT, _this);
              }
            });

            return this;
          }

          function emitErrorAndCloseNT (self, err) {
            emitErrorNT(self, err);
            emitCloseNT(self);
          }

          function emitCloseNT (self) {
            if (self._writableState && !self._writableState.emitClose) return;
            if (self._readableState && !self._readableState.emitClose) return;
            self.emit('close');
          }

          function undestroy () {
            if (this._readableState) {
              this._readableState.destroyed = false;
              this._readableState.reading = false;
              this._readableState.ended = false;
              this._readableState.endEmitted = false;
            }

            if (this._writableState) {
              this._writableState.destroyed = false;
              this._writableState.ended = false;
              this._writableState.ending = false;
              this._writableState.finalCalled = false;
              this._writableState.prefinished = false;
              this._writableState.finished = false;
              this._writableState.errorEmitted = false;
            }
          }

          function emitErrorNT (self, err) {
            self.emit('error', err);
          }

          function errorOrDestroy (stream, err) {
            // We have tests that rely on errors being emitted
            // in the same tick, so changing this is semver major.
            // For now when you opt-in to autoDestroy we allow
            // the error to be emitted nextTick. In a future
            // semver major update we should change the default to this.
            var rState = stream._readableState;
            var wState = stream._writableState;
            if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err); else stream.emit('error', err);
          }

          module.exports = {
            destroy: destroy,
            undestroy: undestroy,
            errorOrDestroy: errorOrDestroy
          };

          /***/
        }),

/***/ 2426:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          "use strict";
          // Ported from https://github.com/mafintosh/end-of-stream with
          // permission from the author, Mathias Buus (@mafintosh).


          var ERR_STREAM_PREMATURE_CLOSE = __webpack_require__(553)/* .codes.ERR_STREAM_PREMATURE_CLOSE */.q.ERR_STREAM_PREMATURE_CLOSE;

          function once (callback) {
            var called = false;
            return function () {
              if (called) return;
              called = true;

              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }

              callback.apply(this, args);
            };
          }

          function noop () { }

          function isRequest (stream) {
            return stream.setHeader && typeof stream.abort === 'function';
          }

          function eos (stream, opts, callback) {
            if (typeof opts === 'function') return eos(stream, null, opts);
            if (!opts) opts = {};
            callback = once(callback || noop);
            var readable = opts.readable || opts.readable !== false && stream.readable;
            var writable = opts.writable || opts.writable !== false && stream.writable;

            var onlegacyfinish = function onlegacyfinish () {
              if (!stream.writable) onfinish();
            };

            var writableEnded = stream._writableState && stream._writableState.finished;

            var onfinish = function onfinish () {
              writable = false;
              writableEnded = true;
              if (!readable) callback.call(stream);
            };

            var readableEnded = stream._readableState && stream._readableState.endEmitted;

            var onend = function onend () {
              readable = false;
              readableEnded = true;
              if (!writable) callback.call(stream);
            };

            var onerror = function onerror (err) {
              callback.call(stream, err);
            };

            var onclose = function onclose () {
              var err;

              if (readable && !readableEnded) {
                if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
                return callback.call(stream, err);
              }

              if (writable && !writableEnded) {
                if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
                return callback.call(stream, err);
              }
            };

            var onrequest = function onrequest () {
              stream.req.on('finish', onfinish);
            };

            if (isRequest(stream)) {
              stream.on('complete', onfinish);
              stream.on('abort', onclose);
              if (stream.req) onrequest(); else stream.on('request', onrequest);
            } else if (writable && !stream._writableState) {
              // legacy streams
              stream.on('end', onlegacyfinish);
              stream.on('close', onlegacyfinish);
            }

            stream.on('end', onend);
            stream.on('finish', onfinish);
            if (opts.error !== false) stream.on('error', onerror);
            stream.on('close', onclose);
            return function () {
              stream.removeListener('complete', onfinish);
              stream.removeListener('abort', onclose);
              stream.removeListener('request', onrequest);
              if (stream.req) stream.req.removeListener('finish', onfinish);
              stream.removeListener('end', onlegacyfinish);
              stream.removeListener('close', onlegacyfinish);
              stream.removeListener('finish', onfinish);
              stream.removeListener('end', onend);
              stream.removeListener('error', onerror);
              stream.removeListener('close', onclose);
            };
          }

          module.exports = eos;

          /***/
        }),

/***/ 3733:
/***/ ((module) => {

          module.exports = function () {
            throw new Error('Readable.from is not available in the browser')
          };


          /***/
        }),

/***/ 2970:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          "use strict";
          // Ported from https://github.com/mafintosh/pump with
          // permission from the author, Mathias Buus (@mafintosh).


          var eos;

          function once (callback) {
            var called = false;
            return function () {
              if (called) return;
              called = true;
              callback.apply(void 0, arguments);
            };
          }

          var _require$codes = __webpack_require__(553)/* .codes */.q,
            ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
            ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

          function noop (err) {
            // Rethrow the error if it exists to avoid swallowing it
            if (err) throw err;
          }

          function isRequest (stream) {
            return stream.setHeader && typeof stream.abort === 'function';
          }

          function destroyer (stream, reading, writing, callback) {
            callback = once(callback);
            var closed = false;
            stream.on('close', function () {
              closed = true;
            });
            if (eos === undefined) eos = __webpack_require__(2426);
            eos(stream, {
              readable: reading,
              writable: writing
            }, function (err) {
              if (err) return callback(err);
              closed = true;
              callback();
            });
            var destroyed = false;
            return function (err) {
              if (closed) return;
              if (destroyed) return;
              destroyed = true; // request.destroy just do .end - .abort is what we want

              if (isRequest(stream)) return stream.abort();
              if (typeof stream.destroy === 'function') return stream.destroy();
              callback(err || new ERR_STREAM_DESTROYED('pipe'));
            };
          }

          function call (fn) {
            fn();
          }

          function pipe (from, to) {
            return from.pipe(to);
          }

          function popCallback (streams) {
            if (!streams.length) return noop;
            if (typeof streams[streams.length - 1] !== 'function') return noop;
            return streams.pop();
          }

          function pipeline () {
            for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
              streams[_key] = arguments[_key];
            }

            var callback = popCallback(streams);
            if (Array.isArray(streams[0])) streams = streams[0];

            if (streams.length < 2) {
              throw new ERR_MISSING_ARGS('streams');
            }

            var error;
            var destroys = streams.map(function (stream, i) {
              var reading = i < streams.length - 1;
              var writing = i > 0;
              return destroyer(stream, reading, writing, function (err) {
                if (!error) error = err;
                if (err) destroys.forEach(call);
                if (reading) return;
                destroys.forEach(call);
                callback(error);
              });
            });
            return streams.reduce(pipe);
          }

          module.exports = pipeline;

          /***/
        }),

/***/ 1111:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          "use strict";


          var ERR_INVALID_OPT_VALUE = __webpack_require__(553)/* .codes.ERR_INVALID_OPT_VALUE */.q.ERR_INVALID_OPT_VALUE;

          function highWaterMarkFrom (options, isDuplex, duplexKey) {
            return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
          }

          function getHighWaterMark (state, options, duplexKey, isDuplex) {
            var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

            if (hwm != null) {
              if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
                var name = isDuplex ? duplexKey : 'highWaterMark';
                throw new ERR_INVALID_OPT_VALUE(name, hwm);
              }

              return Math.floor(hwm);
            } // Default value


            return state.objectMode ? 16 : 16 * 1024;
          }

          module.exports = {
            getHighWaterMark: getHighWaterMark
          };

          /***/
        }),

/***/ 8208:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          module.exports = __webpack_require__(488).EventEmitter;


          /***/
        }),

/***/ 9685:
/***/ ((module, exports, __webpack_require__) => {

          /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
          /* eslint-disable node/no-deprecated-api */
          var buffer = __webpack_require__(7866)
          var Buffer = buffer.Buffer

          // alternative to using Object.keys for old browsers
          function copyProps (src, dst) {
            for (var key in src) {
              dst[key] = src[key]
            }
          }
          if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
            module.exports = buffer
          } else {
            // Copy properties from require('buffer')
            copyProps(buffer, exports)
            exports.Buffer = SafeBuffer
          }

          function SafeBuffer (arg, encodingOrOffset, length) {
            return Buffer(arg, encodingOrOffset, length)
          }

          SafeBuffer.prototype = Object.create(Buffer.prototype)

          // Copy static methods from Buffer
          copyProps(Buffer, SafeBuffer)

          SafeBuffer.from = function (arg, encodingOrOffset, length) {
            if (typeof arg === 'number') {
              throw new TypeError('Argument must not be a number')
            }
            return Buffer(arg, encodingOrOffset, length)
          }

          SafeBuffer.alloc = function (size, fill, encoding) {
            if (typeof size !== 'number') {
              throw new TypeError('Argument must be a number')
            }
            var buf = Buffer(size)
            if (fill !== undefined) {
              if (typeof encoding === 'string') {
                buf.fill(fill, encoding)
              } else {
                buf.fill(fill)
              }
            } else {
              buf.fill(0)
            }
            return buf
          }

          SafeBuffer.allocUnsafe = function (size) {
            if (typeof size !== 'number') {
              throw new TypeError('Argument must be a number')
            }
            return Buffer(size)
          }

          SafeBuffer.allocUnsafeSlow = function (size) {
            if (typeof size !== 'number') {
              throw new TypeError('Argument must be a number')
            }
            return buffer.SlowBuffer(size)
          }


          /***/
        }),

/***/ 8981:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          // Copyright Joyent, Inc. and other Node contributors.
          //
          // Permission is hereby granted, free of charge, to any person obtaining a
          // copy of this software and associated documentation files (the
          // "Software"), to deal in the Software without restriction, including
          // without limitation the rights to use, copy, modify, merge, publish,
          // distribute, sublicense, and/or sell copies of the Software, and to permit
          // persons to whom the Software is furnished to do so, subject to the
          // following conditions:
          //
          // The above copyright notice and this permission notice shall be included
          // in all copies or substantial portions of the Software.
          //
          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
          // USE OR OTHER DEALINGS IN THE SOFTWARE.

          module.exports = Stream;

          var EE = __webpack_require__(488).EventEmitter;
          var inherits = __webpack_require__(3730);

          inherits(Stream, EE);
          Stream.Readable = __webpack_require__(5006);
          Stream.Writable = __webpack_require__(8719);
          Stream.Duplex = __webpack_require__(673);
          Stream.Transform = __webpack_require__(8597);
          Stream.PassThrough = __webpack_require__(4343);
          Stream.finished = __webpack_require__(2426)
          Stream.pipeline = __webpack_require__(2970)

          // Backwards-compat with node 0.4.x
          Stream.Stream = Stream;



          // old-style streams.  Note that the pipe method (the only relevant
          // part of this class) is overridden in the Readable class.

          function Stream () {
            EE.call(this);
          }

          Stream.prototype.pipe = function (dest, options) {
            var source = this;

            function ondata (chunk) {
              if (dest.writable) {
                if (false === dest.write(chunk) && source.pause) {
                  source.pause();
                }
              }
            }

            source.on('data', ondata);

            function ondrain () {
              if (source.readable && source.resume) {
                source.resume();
              }
            }

            dest.on('drain', ondrain);

            // If the 'end' option is not supplied, dest.end() will be called when
            // source gets the 'end' or 'close' events.  Only dest.end() once.
            if (!dest._isStdio && (!options || options.end !== false)) {
              source.on('end', onend);
              source.on('close', onclose);
            }

            var didOnEnd = false;
            function onend () {
              if (didOnEnd) return;
              didOnEnd = true;

              dest.end();
            }


            function onclose () {
              if (didOnEnd) return;
              didOnEnd = true;

              if (typeof dest.destroy === 'function') dest.destroy();
            }

            // don't leave dangling pipes when there are errors.
            function onerror (er) {
              cleanup();
              if (EE.listenerCount(this, 'error') === 0) {
                throw er; // Unhandled stream error in pipe.
              }
            }

            source.on('error', onerror);
            dest.on('error', onerror);

            // remove all the event listeners that were added.
            function cleanup () {
              source.removeListener('data', ondata);
              dest.removeListener('drain', ondrain);

              source.removeListener('end', onend);
              source.removeListener('close', onclose);

              source.removeListener('error', onerror);
              dest.removeListener('error', onerror);

              source.removeListener('end', cleanup);
              source.removeListener('close', cleanup);

              dest.removeListener('close', cleanup);
            }

            source.on('end', cleanup);
            source.on('close', cleanup);

            dest.on('close', cleanup);

            dest.emit('pipe', source);

            // Allow for unix-like usage: A.pipe(B).pipe(C)
            return dest;
          };


          /***/
        }),

/***/ 7361:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

          "use strict";
          // Copyright Joyent, Inc. and other Node contributors.
          //
          // Permission is hereby granted, free of charge, to any person obtaining a
          // copy of this software and associated documentation files (the
          // "Software"), to deal in the Software without restriction, including
          // without limitation the rights to use, copy, modify, merge, publish,
          // distribute, sublicense, and/or sell copies of the Software, and to permit
          // persons to whom the Software is furnished to do so, subject to the
          // following conditions:
          //
          // The above copyright notice and this permission notice shall be included
          // in all copies or substantial portions of the Software.
          //
          // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
          // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
          // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
          // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
          // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
          // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
          // USE OR OTHER DEALINGS IN THE SOFTWARE.



          /*<replacement>*/

          var Buffer = __webpack_require__(9685).Buffer;
          /*</replacement>*/

          var isEncoding = Buffer.isEncoding || function (encoding) {
            encoding = '' + encoding;
            switch (encoding && encoding.toLowerCase()) {
              case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw':
                return true;
              default:
                return false;
            }
          };

          function _normalizeEncoding (enc) {
            if (!enc) return 'utf8';
            var retried;
            while (true) {
              switch (enc) {
                case 'utf8':
                case 'utf-8':
                  return 'utf8';
                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                  return 'utf16le';
                case 'latin1':
                case 'binary':
                  return 'latin1';
                case 'base64':
                case 'ascii':
                case 'hex':
                  return enc;
                default:
                  if (retried) return; // undefined
                  enc = ('' + enc).toLowerCase();
                  retried = true;
              }
            }
          };

          // Do not cache `Buffer.isEncoding` when checking encoding names as some
          // modules monkey-patch it to support additional encodings
          function normalizeEncoding (enc) {
            var nenc = _normalizeEncoding(enc);
            if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
            return nenc || enc;
          }

          // StringDecoder provides an interface for efficiently splitting a series of
          // buffers into a series of JS strings without breaking apart multi-byte
          // characters.
          exports.s = StringDecoder;
          function StringDecoder (encoding) {
            this.encoding = normalizeEncoding(encoding);
            var nb;
            switch (this.encoding) {
              case 'utf16le':
                this.text = utf16Text;
                this.end = utf16End;
                nb = 4;
                break;
              case 'utf8':
                this.fillLast = utf8FillLast;
                nb = 4;
                break;
              case 'base64':
                this.text = base64Text;
                this.end = base64End;
                nb = 3;
                break;
              default:
                this.write = simpleWrite;
                this.end = simpleEnd;
                return;
            }
            this.lastNeed = 0;
            this.lastTotal = 0;
            this.lastChar = Buffer.allocUnsafe(nb);
          }

          StringDecoder.prototype.write = function (buf) {
            if (buf.length === 0) return '';
            var r;
            var i;
            if (this.lastNeed) {
              r = this.fillLast(buf);
              if (r === undefined) return '';
              i = this.lastNeed;
              this.lastNeed = 0;
            } else {
              i = 0;
            }
            if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
            return r || '';
          };

          StringDecoder.prototype.end = utf8End;

          // Returns only complete characters in a Buffer
          StringDecoder.prototype.text = utf8Text;

          // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
          StringDecoder.prototype.fillLast = function (buf) {
            if (this.lastNeed <= buf.length) {
              buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
              return this.lastChar.toString(this.encoding, 0, this.lastTotal);
            }
            buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
            this.lastNeed -= buf.length;
          };

          // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
          // continuation byte. If an invalid byte is detected, -2 is returned.
          function utf8CheckByte (byte) {
            if (byte <= 0x7F) return 0; else if (byte >> 5 === 0x06) return 2; else if (byte >> 4 === 0x0E) return 3; else if (byte >> 3 === 0x1E) return 4;
            return byte >> 6 === 0x02 ? -1 : -2;
          }

          // Checks at most 3 bytes at the end of a Buffer in order to detect an
          // incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
          // needed to complete the UTF-8 character (if applicable) are returned.
          function utf8CheckIncomplete (self, buf, i) {
            var j = buf.length - 1;
            if (j < i) return 0;
            var nb = utf8CheckByte(buf[j]);
            if (nb >= 0) {
              if (nb > 0) self.lastNeed = nb - 1;
              return nb;
            }
            if (--j < i || nb === -2) return 0;
            nb = utf8CheckByte(buf[j]);
            if (nb >= 0) {
              if (nb > 0) self.lastNeed = nb - 2;
              return nb;
            }
            if (--j < i || nb === -2) return 0;
            nb = utf8CheckByte(buf[j]);
            if (nb >= 0) {
              if (nb > 0) {
                if (nb === 2) nb = 0; else self.lastNeed = nb - 3;
              }
              return nb;
            }
            return 0;
          }

          // Validates as many continuation bytes for a multi-byte UTF-8 character as
          // needed or are available. If we see a non-continuation byte where we expect
          // one, we "replace" the validated continuation bytes we've seen so far with
          // a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
          // behavior. The continuation byte check is included three times in the case
          // where all of the continuation bytes for a character exist in the same buffer.
          // It is also done this way as a slight performance increase instead of using a
          // loop.
          function utf8CheckExtraBytes (self, buf, p) {
            if ((buf[0] & 0xC0) !== 0x80) {
              self.lastNeed = 0;
              return '\ufffd';
            }
            if (self.lastNeed > 1 && buf.length > 1) {
              if ((buf[1] & 0xC0) !== 0x80) {
                self.lastNeed = 1;
                return '\ufffd';
              }
              if (self.lastNeed > 2 && buf.length > 2) {
                if ((buf[2] & 0xC0) !== 0x80) {
                  self.lastNeed = 2;
                  return '\ufffd';
                }
              }
            }
          }

          // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
          function utf8FillLast (buf) {
            var p = this.lastTotal - this.lastNeed;
            var r = utf8CheckExtraBytes(this, buf, p);
            if (r !== undefined) return r;
            if (this.lastNeed <= buf.length) {
              buf.copy(this.lastChar, p, 0, this.lastNeed);
              return this.lastChar.toString(this.encoding, 0, this.lastTotal);
            }
            buf.copy(this.lastChar, p, 0, buf.length);
            this.lastNeed -= buf.length;
          }

          // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
          // partial character, the character's bytes are buffered until the required
          // number of bytes are available.
          function utf8Text (buf, i) {
            var total = utf8CheckIncomplete(this, buf, i);
            if (!this.lastNeed) return buf.toString('utf8', i);
            this.lastTotal = total;
            var end = buf.length - (total - this.lastNeed);
            buf.copy(this.lastChar, 0, end);
            return buf.toString('utf8', i, end);
          }

          // For UTF-8, a replacement character is added when ending on a partial
          // character.
          function utf8End (buf) {
            var r = buf && buf.length ? this.write(buf) : '';
            if (this.lastNeed) return r + '\ufffd';
            return r;
          }

          // UTF-16LE typically needs two bytes per character, but even if we have an even
          // number of bytes available, we need to check if we end on a leading/high
          // surrogate. In that case, we need to wait for the next two bytes in order to
          // decode the last character properly.
          function utf16Text (buf, i) {
            if ((buf.length - i) % 2 === 0) {
              var r = buf.toString('utf16le', i);
              if (r) {
                var c = r.charCodeAt(r.length - 1);
                if (c >= 0xD800 && c <= 0xDBFF) {
                  this.lastNeed = 2;
                  this.lastTotal = 4;
                  this.lastChar[0] = buf[buf.length - 2];
                  this.lastChar[1] = buf[buf.length - 1];
                  return r.slice(0, -1);
                }
              }
              return r;
            }
            this.lastNeed = 1;
            this.lastTotal = 2;
            this.lastChar[0] = buf[buf.length - 1];
            return buf.toString('utf16le', i, buf.length - 1);
          }

          // For UTF-16LE we do not explicitly append special replacement characters if we
          // end on a partial character, we simply let v8 handle that.
          function utf16End (buf) {
            var r = buf && buf.length ? this.write(buf) : '';
            if (this.lastNeed) {
              var end = this.lastTotal - this.lastNeed;
              return r + this.lastChar.toString('utf16le', 0, end);
            }
            return r;
          }

          function base64Text (buf, i) {
            var n = (buf.length - i) % 3;
            if (n === 0) return buf.toString('base64', i);
            this.lastNeed = 3 - n;
            this.lastTotal = 3;
            if (n === 1) {
              this.lastChar[0] = buf[buf.length - 1];
            } else {
              this.lastChar[0] = buf[buf.length - 2];
              this.lastChar[1] = buf[buf.length - 1];
            }
            return buf.toString('base64', i, buf.length - n);
          }

          function base64End (buf) {
            var r = buf && buf.length ? this.write(buf) : '';
            if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
            return r;
          }

          // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
          function simpleWrite (buf) {
            return buf.toString(this.encoding);
          }

          function simpleEnd (buf) {
            return buf && buf.length ? this.write(buf) : '';
          }

          /***/
        }),

/***/ 2993:
/***/ ((__unused_webpack_module, exports) => {

          "use strict";
          var __webpack_unused_export__;

          /*
          
          TypeScript Md5
          ==============
          
          Based on work by
          * Joseph Myers: http://www.myersdaily.org/joseph/javascript/md5-text.html
          * André Cruz: https://github.com/satazor/SparkMD5
          * Raymond Hill: https://github.com/gorhill/yamd5.js
          
          Effectively a TypeScrypt re-write of Raymond Hill JS Library
          
          The MIT License (MIT)
          
          Copyright (C) 2014 Raymond Hill
          
          Permission is hereby granted, free of charge, to any person obtaining a copy
          of this software and associated documentation files (the "Software"), to deal
          in the Software without restriction, including without limitation the rights
          to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
          copies of the Software, and to permit persons to whom the Software is
          furnished to do so, subject to the following conditions:
          
          The above copyright notice and this permission notice shall be included in
          all copies or substantial portions of the Software.
          
          THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
          IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
          FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
          AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
          LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
          OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
          THE SOFTWARE.
          
          
          
                      DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
                              Version 2, December 2004
          
           Copyright (C) 2015 André Cruz <amdfcruz@gmail.com>
          
           Everyone is permitted to copy and distribute verbatim or modified
           copies of this license document, and changing it is allowed as long
           as the name is changed.
          
                      DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
             TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
          
            0. You just DO WHAT THE FUCK YOU WANT TO.
          
          
          */
          __webpack_unused_export__ = ({ value: true });
          var Md5 = /** @class */ (function () {
            function Md5 () {
              this._state = new Int32Array(4);
              this._buffer = new ArrayBuffer(68);
              this._buffer8 = new Uint8Array(this._buffer, 0, 68);
              this._buffer32 = new Uint32Array(this._buffer, 0, 17);
              this.start();
            }
            Md5.hashStr = function (str, raw) {
              if (raw === void 0) { raw = false; }
              return this.onePassHasher
                .start()
                .appendStr(str)
                .end(raw);
            };
            Md5.hashAsciiStr = function (str, raw) {
              if (raw === void 0) { raw = false; }
              return this.onePassHasher
                .start()
                .appendAsciiStr(str)
                .end(raw);
            };
            Md5._hex = function (x) {
              var hc = Md5.hexChars;
              var ho = Md5.hexOut;
              var n;
              var offset;
              var j;
              var i;
              for (i = 0; i < 4; i += 1) {
                offset = i * 8;
                n = x[i];
                for (j = 0; j < 8; j += 2) {
                  ho[offset + 1 + j] = hc.charAt(n & 0x0F);
                  n >>>= 4;
                  ho[offset + 0 + j] = hc.charAt(n & 0x0F);
                  n >>>= 4;
                }
              }
              return ho.join('');
            };
            Md5._md5cycle = function (x, k) {
              var a = x[0];
              var b = x[1];
              var c = x[2];
              var d = x[3];
              // ff()
              a += (b & c | ~b & d) + k[0] - 680876936 | 0;
              a = (a << 7 | a >>> 25) + b | 0;
              d += (a & b | ~a & c) + k[1] - 389564586 | 0;
              d = (d << 12 | d >>> 20) + a | 0;
              c += (d & a | ~d & b) + k[2] + 606105819 | 0;
              c = (c << 17 | c >>> 15) + d | 0;
              b += (c & d | ~c & a) + k[3] - 1044525330 | 0;
              b = (b << 22 | b >>> 10) + c | 0;
              a += (b & c | ~b & d) + k[4] - 176418897 | 0;
              a = (a << 7 | a >>> 25) + b | 0;
              d += (a & b | ~a & c) + k[5] + 1200080426 | 0;
              d = (d << 12 | d >>> 20) + a | 0;
              c += (d & a | ~d & b) + k[6] - 1473231341 | 0;
              c = (c << 17 | c >>> 15) + d | 0;
              b += (c & d | ~c & a) + k[7] - 45705983 | 0;
              b = (b << 22 | b >>> 10) + c | 0;
              a += (b & c | ~b & d) + k[8] + 1770035416 | 0;
              a = (a << 7 | a >>> 25) + b | 0;
              d += (a & b | ~a & c) + k[9] - 1958414417 | 0;
              d = (d << 12 | d >>> 20) + a | 0;
              c += (d & a | ~d & b) + k[10] - 42063 | 0;
              c = (c << 17 | c >>> 15) + d | 0;
              b += (c & d | ~c & a) + k[11] - 1990404162 | 0;
              b = (b << 22 | b >>> 10) + c | 0;
              a += (b & c | ~b & d) + k[12] + 1804603682 | 0;
              a = (a << 7 | a >>> 25) + b | 0;
              d += (a & b | ~a & c) + k[13] - 40341101 | 0;
              d = (d << 12 | d >>> 20) + a | 0;
              c += (d & a | ~d & b) + k[14] - 1502002290 | 0;
              c = (c << 17 | c >>> 15) + d | 0;
              b += (c & d | ~c & a) + k[15] + 1236535329 | 0;
              b = (b << 22 | b >>> 10) + c | 0;
              // gg()
              a += (b & d | c & ~d) + k[1] - 165796510 | 0;
              a = (a << 5 | a >>> 27) + b | 0;
              d += (a & c | b & ~c) + k[6] - 1069501632 | 0;
              d = (d << 9 | d >>> 23) + a | 0;
              c += (d & b | a & ~b) + k[11] + 643717713 | 0;
              c = (c << 14 | c >>> 18) + d | 0;
              b += (c & a | d & ~a) + k[0] - 373897302 | 0;
              b = (b << 20 | b >>> 12) + c | 0;
              a += (b & d | c & ~d) + k[5] - 701558691 | 0;
              a = (a << 5 | a >>> 27) + b | 0;
              d += (a & c | b & ~c) + k[10] + 38016083 | 0;
              d = (d << 9 | d >>> 23) + a | 0;
              c += (d & b | a & ~b) + k[15] - 660478335 | 0;
              c = (c << 14 | c >>> 18) + d | 0;
              b += (c & a | d & ~a) + k[4] - 405537848 | 0;
              b = (b << 20 | b >>> 12) + c | 0;
              a += (b & d | c & ~d) + k[9] + 568446438 | 0;
              a = (a << 5 | a >>> 27) + b | 0;
              d += (a & c | b & ~c) + k[14] - 1019803690 | 0;
              d = (d << 9 | d >>> 23) + a | 0;
              c += (d & b | a & ~b) + k[3] - 187363961 | 0;
              c = (c << 14 | c >>> 18) + d | 0;
              b += (c & a | d & ~a) + k[8] + 1163531501 | 0;
              b = (b << 20 | b >>> 12) + c | 0;
              a += (b & d | c & ~d) + k[13] - 1444681467 | 0;
              a = (a << 5 | a >>> 27) + b | 0;
              d += (a & c | b & ~c) + k[2] - 51403784 | 0;
              d = (d << 9 | d >>> 23) + a | 0;
              c += (d & b | a & ~b) + k[7] + 1735328473 | 0;
              c = (c << 14 | c >>> 18) + d | 0;
              b += (c & a | d & ~a) + k[12] - 1926607734 | 0;
              b = (b << 20 | b >>> 12) + c | 0;
              // hh()
              a += (b ^ c ^ d) + k[5] - 378558 | 0;
              a = (a << 4 | a >>> 28) + b | 0;
              d += (a ^ b ^ c) + k[8] - 2022574463 | 0;
              d = (d << 11 | d >>> 21) + a | 0;
              c += (d ^ a ^ b) + k[11] + 1839030562 | 0;
              c = (c << 16 | c >>> 16) + d | 0;
              b += (c ^ d ^ a) + k[14] - 35309556 | 0;
              b = (b << 23 | b >>> 9) + c | 0;
              a += (b ^ c ^ d) + k[1] - 1530992060 | 0;
              a = (a << 4 | a >>> 28) + b | 0;
              d += (a ^ b ^ c) + k[4] + 1272893353 | 0;
              d = (d << 11 | d >>> 21) + a | 0;
              c += (d ^ a ^ b) + k[7] - 155497632 | 0;
              c = (c << 16 | c >>> 16) + d | 0;
              b += (c ^ d ^ a) + k[10] - 1094730640 | 0;
              b = (b << 23 | b >>> 9) + c | 0;
              a += (b ^ c ^ d) + k[13] + 681279174 | 0;
              a = (a << 4 | a >>> 28) + b | 0;
              d += (a ^ b ^ c) + k[0] - 358537222 | 0;
              d = (d << 11 | d >>> 21) + a | 0;
              c += (d ^ a ^ b) + k[3] - 722521979 | 0;
              c = (c << 16 | c >>> 16) + d | 0;
              b += (c ^ d ^ a) + k[6] + 76029189 | 0;
              b = (b << 23 | b >>> 9) + c | 0;
              a += (b ^ c ^ d) + k[9] - 640364487 | 0;
              a = (a << 4 | a >>> 28) + b | 0;
              d += (a ^ b ^ c) + k[12] - 421815835 | 0;
              d = (d << 11 | d >>> 21) + a | 0;
              c += (d ^ a ^ b) + k[15] + 530742520 | 0;
              c = (c << 16 | c >>> 16) + d | 0;
              b += (c ^ d ^ a) + k[2] - 995338651 | 0;
              b = (b << 23 | b >>> 9) + c | 0;
              // ii()
              a += (c ^ (b | ~d)) + k[0] - 198630844 | 0;
              a = (a << 6 | a >>> 26) + b | 0;
              d += (b ^ (a | ~c)) + k[7] + 1126891415 | 0;
              d = (d << 10 | d >>> 22) + a | 0;
              c += (a ^ (d | ~b)) + k[14] - 1416354905 | 0;
              c = (c << 15 | c >>> 17) + d | 0;
              b += (d ^ (c | ~a)) + k[5] - 57434055 | 0;
              b = (b << 21 | b >>> 11) + c | 0;
              a += (c ^ (b | ~d)) + k[12] + 1700485571 | 0;
              a = (a << 6 | a >>> 26) + b | 0;
              d += (b ^ (a | ~c)) + k[3] - 1894986606 | 0;
              d = (d << 10 | d >>> 22) + a | 0;
              c += (a ^ (d | ~b)) + k[10] - 1051523 | 0;
              c = (c << 15 | c >>> 17) + d | 0;
              b += (d ^ (c | ~a)) + k[1] - 2054922799 | 0;
              b = (b << 21 | b >>> 11) + c | 0;
              a += (c ^ (b | ~d)) + k[8] + 1873313359 | 0;
              a = (a << 6 | a >>> 26) + b | 0;
              d += (b ^ (a | ~c)) + k[15] - 30611744 | 0;
              d = (d << 10 | d >>> 22) + a | 0;
              c += (a ^ (d | ~b)) + k[6] - 1560198380 | 0;
              c = (c << 15 | c >>> 17) + d | 0;
              b += (d ^ (c | ~a)) + k[13] + 1309151649 | 0;
              b = (b << 21 | b >>> 11) + c | 0;
              a += (c ^ (b | ~d)) + k[4] - 145523070 | 0;
              a = (a << 6 | a >>> 26) + b | 0;
              d += (b ^ (a | ~c)) + k[11] - 1120210379 | 0;
              d = (d << 10 | d >>> 22) + a | 0;
              c += (a ^ (d | ~b)) + k[2] + 718787259 | 0;
              c = (c << 15 | c >>> 17) + d | 0;
              b += (d ^ (c | ~a)) + k[9] - 343485551 | 0;
              b = (b << 21 | b >>> 11) + c | 0;
              x[0] = a + x[0] | 0;
              x[1] = b + x[1] | 0;
              x[2] = c + x[2] | 0;
              x[3] = d + x[3] | 0;
            };
            Md5.prototype.start = function () {
              this._dataLength = 0;
              this._bufferLength = 0;
              this._state.set(Md5.stateIdentity);
              return this;
            };
            // Char to code point to to array conversion:
            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt
            // #Example.3A_Fixing_charCodeAt_to_handle_non-Basic-Multilingual-Plane_characters_if_their_presence_earlier_in_the_string_is_unknown
            Md5.prototype.appendStr = function (str) {
              var buf8 = this._buffer8;
              var buf32 = this._buffer32;
              var bufLen = this._bufferLength;
              var code;
              var i;
              for (i = 0; i < str.length; i += 1) {
                code = str.charCodeAt(i);
                if (code < 128) {
                  buf8[bufLen++] = code;
                }
                else if (code < 0x800) {
                  buf8[bufLen++] = (code >>> 6) + 0xC0;
                  buf8[bufLen++] = code & 0x3F | 0x80;
                }
                else if (code < 0xD800 || code > 0xDBFF) {
                  buf8[bufLen++] = (code >>> 12) + 0xE0;
                  buf8[bufLen++] = (code >>> 6 & 0x3F) | 0x80;
                  buf8[bufLen++] = (code & 0x3F) | 0x80;
                }
                else {
                  code = ((code - 0xD800) * 0x400) + (str.charCodeAt(++i) - 0xDC00) + 0x10000;
                  if (code > 0x10FFFF) {
                    throw new Error('Unicode standard supports code points up to U+10FFFF');
                  }
                  buf8[bufLen++] = (code >>> 18) + 0xF0;
                  buf8[bufLen++] = (code >>> 12 & 0x3F) | 0x80;
                  buf8[bufLen++] = (code >>> 6 & 0x3F) | 0x80;
                  buf8[bufLen++] = (code & 0x3F) | 0x80;
                }
                if (bufLen >= 64) {
                  this._dataLength += 64;
                  Md5._md5cycle(this._state, buf32);
                  bufLen -= 64;
                  buf32[0] = buf32[16];
                }
              }
              this._bufferLength = bufLen;
              return this;
            };
            Md5.prototype.appendAsciiStr = function (str) {
              var buf8 = this._buffer8;
              var buf32 = this._buffer32;
              var bufLen = this._bufferLength;
              var i;
              var j = 0;
              for (; ;) {
                i = Math.min(str.length - j, 64 - bufLen);
                while (i--) {
                  buf8[bufLen++] = str.charCodeAt(j++);
                }
                if (bufLen < 64) {
                  break;
                }
                this._dataLength += 64;
                Md5._md5cycle(this._state, buf32);
                bufLen = 0;
              }
              this._bufferLength = bufLen;
              return this;
            };
            Md5.prototype.appendByteArray = function (input) {
              var buf8 = this._buffer8;
              var buf32 = this._buffer32;
              var bufLen = this._bufferLength;
              var i;
              var j = 0;
              for (; ;) {
                i = Math.min(input.length - j, 64 - bufLen);
                while (i--) {
                  buf8[bufLen++] = input[j++];
                }
                if (bufLen < 64) {
                  break;
                }
                this._dataLength += 64;
                Md5._md5cycle(this._state, buf32);
                bufLen = 0;
              }
              this._bufferLength = bufLen;
              return this;
            };
            Md5.prototype.getState = function () {
              var self = this;
              var s = self._state;
              return {
                buffer: String.fromCharCode.apply(null, self._buffer8),
                buflen: self._bufferLength,
                length: self._dataLength,
                state: [s[0], s[1], s[2], s[3]]
              };
            };
            Md5.prototype.setState = function (state) {
              var buf = state.buffer;
              var x = state.state;
              var s = this._state;
              var i;
              this._dataLength = state.length;
              this._bufferLength = state.buflen;
              s[0] = x[0];
              s[1] = x[1];
              s[2] = x[2];
              s[3] = x[3];
              for (i = 0; i < buf.length; i += 1) {
                this._buffer8[i] = buf.charCodeAt(i);
              }
            };
            Md5.prototype.end = function (raw) {
              if (raw === void 0) { raw = false; }
              var bufLen = this._bufferLength;
              var buf8 = this._buffer8;
              var buf32 = this._buffer32;
              var i = (bufLen >> 2) + 1;
              var dataBitsLen;
              this._dataLength += bufLen;
              buf8[bufLen] = 0x80;
              buf8[bufLen + 1] = buf8[bufLen + 2] = buf8[bufLen + 3] = 0;
              buf32.set(Md5.buffer32Identity.subarray(i), i);
              if (bufLen > 55) {
                Md5._md5cycle(this._state, buf32);
                buf32.set(Md5.buffer32Identity);
              }
              // Do the final computation based on the tail and length
              // Beware that the final length may not fit in 32 bits so we take care of that
              dataBitsLen = this._dataLength * 8;
              if (dataBitsLen <= 0xFFFFFFFF) {
                buf32[14] = dataBitsLen;
              }
              else {
                var matches = dataBitsLen.toString(16).match(/(.*?)(.{0,8})$/);
                if (matches === null) {
                  return;
                }
                var lo = parseInt(matches[2], 16);
                var hi = parseInt(matches[1], 16) || 0;
                buf32[14] = lo;
                buf32[15] = hi;
              }
              Md5._md5cycle(this._state, buf32);
              return raw ? this._state : Md5._hex(this._state);
            };
            // Private Static Variables
            Md5.stateIdentity = new Int32Array([1732584193, -271733879, -1732584194, 271733878]);
            Md5.buffer32Identity = new Int32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
            Md5.hexChars = '0123456789abcdef';
            Md5.hexOut = [];
            // Permanent instance is to use for one-call hashing
            Md5.onePassHasher = new Md5();
            return Md5;
          }());
          exports.V = Md5;
          if (Md5.hashStr('hello') !== '5d41402abc4b2a76b9719d911017c592') {
            console.error('Md5 self test failed.');
          }
          //# sourceMappingURL=md5.js.map

          /***/
        }),

/***/ 72:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


          /**
           * Module exports.
           */

          module.exports = deprecate;

          /**
           * Mark that a method should not be used.
           * Returns a modified function which warns once by default.
           *
           * If `localStorage.noDeprecation = true` is set, then it is a no-op.
           *
           * If `localStorage.throwDeprecation = true` is set, then deprecated functions
           * will throw an Error when invoked.
           *
           * If `localStorage.traceDeprecation = true` is set, then deprecated functions
           * will invoke `console.trace()` instead of `console.error()`.
           *
           * @param {Function} fn - the function to deprecate
           * @param {String} msg - the string to print to the console when `fn` is invoked
           * @returns {Function} a new "deprecated" version of `fn`
           * @api public
           */

          function deprecate (fn, msg) {
            if (config('noDeprecation')) {
              return fn;
            }

            var warned = false;
            function deprecated () {
              if (!warned) {
                if (config('throwDeprecation')) {
                  throw new Error(msg);
                } else if (config('traceDeprecation')) {
                  console.trace(msg);
                } else {
                  console.warn(msg);
                }
                warned = true;
              }
              return fn.apply(this, arguments);
            }

            return deprecated;
          }

          /**
           * Checks `localStorage` for boolean values for the given `name`.
           *
           * @param {String} name
           * @returns {Boolean}
           * @api private
           */

          function config (name) {
            // accessing global.localStorage can trigger a DOMException in sandboxed iframes
            try {
              if (!__webpack_require__.g.localStorage) return false;
            } catch (_) {
              return false;
            }
            var val = __webpack_require__.g.localStorage[name];
            if (null == val) return false;
            return String(val).toLowerCase() === 'true';
          }


          /***/
        }),

/***/ 769:
/***/ ((module) => {

          module.exports = function (it) {
            if (typeof it != 'function') {
              throw TypeError(String(it) + ' is not a function');
            } return it;
          };


          /***/
        }),

/***/ 8143:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var isObject = __webpack_require__(6944);

          module.exports = function (it) {
            if (!isObject(it) && it !== null) {
              throw TypeError("Can't set " + String(it) + ' as a prototype');
            } return it;
          };


          /***/
        }),

/***/ 9611:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var wellKnownSymbol = __webpack_require__(3706);
          var create = __webpack_require__(2361);
          var definePropertyModule = __webpack_require__(3376);

          var UNSCOPABLES = wellKnownSymbol('unscopables');
          var ArrayPrototype = Array.prototype;

          // Array.prototype[@@unscopables]
          // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
          if (ArrayPrototype[UNSCOPABLES] == undefined) {
            definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {
              configurable: true,
              value: create(null)
            });
          }

          // add a key to Array.prototype[@@unscopables]
          module.exports = function (key) {
            ArrayPrototype[UNSCOPABLES][key] = true;
          };


          /***/
        }),

/***/ 2482:
/***/ ((module) => {

          module.exports = function (it, Constructor, name) {
            if (!(it instanceof Constructor)) {
              throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
            } return it;
          };


          /***/
        }),

/***/ 47:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var isObject = __webpack_require__(6944);

          module.exports = function (it) {
            if (!isObject(it)) {
              throw TypeError(String(it) + ' is not an object');
            } return it;
          };


          /***/
        }),

/***/ 1774:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          "use strict";

          var bind = __webpack_require__(4833);
          var toObject = __webpack_require__(4680);
          var callWithSafeIterationClosing = __webpack_require__(3960);
          var isArrayIteratorMethod = __webpack_require__(1008);
          var toLength = __webpack_require__(4954);
          var createProperty = __webpack_require__(2076);
          var getIteratorMethod = __webpack_require__(3126);

          // `Array.from` method implementation
          // https://tc39.es/ecma262/#sec-array.from
          module.exports = function from (arrayLike /* , mapfn = undefined, thisArg = undefined */) {
            var O = toObject(arrayLike);
            var C = typeof this == 'function' ? this : Array;
            var argumentsLength = arguments.length;
            var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
            var mapping = mapfn !== undefined;
            var iteratorMethod = getIteratorMethod(O);
            var index = 0;
            var length, result, step, iterator, next, value;
            if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);
            // if the target is not iterable or it's an array with the default iterator - use a simple case
            if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
              iterator = iteratorMethod.call(O);
              next = iterator.next;
              result = new C();
              for (; !(step = next.call(iterator)).done; index++) {
                value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
                createProperty(result, index, value);
              }
            } else {
              length = toLength(O.length);
              result = new C(length);
              for (; length > index; index++) {
                value = mapping ? mapfn(O[index], index) : O[index];
                createProperty(result, index, value);
              }
            }
            result.length = index;
            return result;
          };


          /***/
        }),

/***/ 1270:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var toIndexedObject = __webpack_require__(8852);
          var toLength = __webpack_require__(4954);
          var toAbsoluteIndex = __webpack_require__(2145);

          // `Array.prototype.{ indexOf, includes }` methods implementation
          var createMethod = function (IS_INCLUDES) {
            return function ($this, el, fromIndex) {
              var O = toIndexedObject($this);
              var length = toLength(O.length);
              var index = toAbsoluteIndex(fromIndex, length);
              var value;
              // Array#includes uses SameValueZero equality algorithm
              // eslint-disable-next-line no-self-compare -- NaN check
              if (IS_INCLUDES && el != el) while (length > index) {
                value = O[index++];
                // eslint-disable-next-line no-self-compare -- NaN check
                if (value != value) return true;
                // Array#indexOf ignores holes, Array#includes - not
              } else for (; length > index; index++) {
                if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
              } return !IS_INCLUDES && -1;
            };
          };

          module.exports = {
            // `Array.prototype.includes` method
            // https://tc39.es/ecma262/#sec-array.prototype.includes
            includes: createMethod(true),
            // `Array.prototype.indexOf` method
            // https://tc39.es/ecma262/#sec-array.prototype.indexof
            indexOf: createMethod(false)
          };


          /***/
        }),

/***/ 3960:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var anObject = __webpack_require__(47);
          var iteratorClose = __webpack_require__(2608);

          // call something on iterator step with safe closing on error
          module.exports = function (iterator, fn, value, ENTRIES) {
            try {
              return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
            } catch (error) {
              iteratorClose(iterator);
              throw error;
            }
          };


          /***/
        }),

/***/ 3565:
/***/ ((module) => {

          var toString = {}.toString;

          module.exports = function (it) {
            return toString.call(it).slice(8, -1);
          };


          /***/
        }),

/***/ 8753:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var TO_STRING_TAG_SUPPORT = __webpack_require__(939);
          var classofRaw = __webpack_require__(3565);
          var wellKnownSymbol = __webpack_require__(3706);

          var TO_STRING_TAG = wellKnownSymbol('toStringTag');
          // ES3 wrong here
          var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

          // fallback for IE11 Script Access Denied error
          var tryGet = function (it, key) {
            try {
              return it[key];
            } catch (error) { /* empty */ }
          };

          // getting tag from ES6+ `Object.prototype.toString`
          module.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {
            var O, tag, result;
            return it === undefined ? 'Undefined' : it === null ? 'Null'
              // @@toStringTag case
              : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag
                // builtinTag case
                : CORRECT_ARGUMENTS ? classofRaw(O)
                  // ES3 arguments fallback
                  : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
          };


          /***/
        }),

/***/ 7918:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var has = __webpack_require__(5884);
          var ownKeys = __webpack_require__(8204);
          var getOwnPropertyDescriptorModule = __webpack_require__(7825);
          var definePropertyModule = __webpack_require__(3376);

          module.exports = function (target, source) {
            var keys = ownKeys(source);
            var defineProperty = definePropertyModule.f;
            var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
            for (var i = 0; i < keys.length; i++) {
              var key = keys[i];
              if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
            }
          };


          /***/
        }),

/***/ 9241:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var fails = __webpack_require__(7841);

          module.exports = !fails(function () {
            function F () { /* empty */ }
            F.prototype.constructor = null;
            // eslint-disable-next-line es/no-object-getprototypeof -- required for testing
            return Object.getPrototypeOf(new F()) !== F.prototype;
          });


          /***/
        }),

/***/ 9670:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          "use strict";

          var IteratorPrototype = __webpack_require__(888).IteratorPrototype;
          var create = __webpack_require__(2361);
          var createPropertyDescriptor = __webpack_require__(976);
          var setToStringTag = __webpack_require__(9400);
          var Iterators = __webpack_require__(873);

          var returnThis = function () { return this; };

          module.exports = function (IteratorConstructor, NAME, next) {
            var TO_STRING_TAG = NAME + ' Iterator';
            IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(1, next) });
            setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
            Iterators[TO_STRING_TAG] = returnThis;
            return IteratorConstructor;
          };


          /***/
        }),

/***/ 4791:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var DESCRIPTORS = __webpack_require__(5542);
          var definePropertyModule = __webpack_require__(3376);
          var createPropertyDescriptor = __webpack_require__(976);

          module.exports = DESCRIPTORS ? function (object, key, value) {
            return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
          } : function (object, key, value) {
            object[key] = value;
            return object;
          };


          /***/
        }),

/***/ 976:
/***/ ((module) => {

          module.exports = function (bitmap, value) {
            return {
              enumerable: !(bitmap & 1),
              configurable: !(bitmap & 2),
              writable: !(bitmap & 4),
              value: value
            };
          };


          /***/
        }),

/***/ 2076:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          "use strict";

          var toPropertyKey = __webpack_require__(2694);
          var definePropertyModule = __webpack_require__(3376);
          var createPropertyDescriptor = __webpack_require__(976);

          module.exports = function (object, key, value) {
            var propertyKey = toPropertyKey(key);
            if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
            else object[propertyKey] = value;
          };


          /***/
        }),

/***/ 3131:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          "use strict";

          var $ = __webpack_require__(1082);
          var createIteratorConstructor = __webpack_require__(9670);
          var getPrototypeOf = __webpack_require__(8186);
          var setPrototypeOf = __webpack_require__(2686);
          var setToStringTag = __webpack_require__(9400);
          var createNonEnumerableProperty = __webpack_require__(4791);
          var redefine = __webpack_require__(1249);
          var wellKnownSymbol = __webpack_require__(3706);
          var IS_PURE = __webpack_require__(6852);
          var Iterators = __webpack_require__(873);
          var IteratorsCore = __webpack_require__(888);

          var IteratorPrototype = IteratorsCore.IteratorPrototype;
          var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
          var ITERATOR = wellKnownSymbol('iterator');
          var KEYS = 'keys';
          var VALUES = 'values';
          var ENTRIES = 'entries';

          var returnThis = function () { return this; };

          module.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
            createIteratorConstructor(IteratorConstructor, NAME, next);

            var getIterationMethod = function (KIND) {
              if (KIND === DEFAULT && defaultIterator) return defaultIterator;
              if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
              switch (KIND) {
                case KEYS: return function keys () { return new IteratorConstructor(this, KIND); };
                case VALUES: return function values () { return new IteratorConstructor(this, KIND); };
                case ENTRIES: return function entries () { return new IteratorConstructor(this, KIND); };
              } return function () { return new IteratorConstructor(this); };
            };

            var TO_STRING_TAG = NAME + ' Iterator';
            var INCORRECT_VALUES_NAME = false;
            var IterablePrototype = Iterable.prototype;
            var nativeIterator = IterablePrototype[ITERATOR]
              || IterablePrototype['@@iterator']
              || DEFAULT && IterablePrototype[DEFAULT];
            var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
            var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
            var CurrentIteratorPrototype, methods, KEY;

            // fix native
            if (anyNativeIterator) {
              CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
              if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
                if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
                  if (setPrototypeOf) {
                    setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
                  } else if (typeof CurrentIteratorPrototype[ITERATOR] != 'function') {
                    createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR, returnThis);
                  }
                }
                // Set @@toStringTag to native iterators
                setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
                if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
              }
            }

            // fix Array.prototype.{ values, @@iterator }.name in V8 / FF
            if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
              INCORRECT_VALUES_NAME = true;
              defaultIterator = function values () { return nativeIterator.call(this); };
            }

            // define iterator
            if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
              createNonEnumerableProperty(IterablePrototype, ITERATOR, defaultIterator);
            }
            Iterators[NAME] = defaultIterator;

            // export additional methods
            if (DEFAULT) {
              methods = {
                values: getIterationMethod(VALUES),
                keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
                entries: getIterationMethod(ENTRIES)
              };
              if (FORCED) for (KEY in methods) {
                if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
                  redefine(IterablePrototype, KEY, methods[KEY]);
                }
              } else $({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
            }

            return methods;
          };


          /***/
        }),

/***/ 5542:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var fails = __webpack_require__(7841);

          // Detect IE8's incomplete defineProperty implementation
          module.exports = !fails(function () {
            // eslint-disable-next-line es/no-object-defineproperty -- required for testing
            return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
          });


          /***/
        }),

/***/ 3879:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var global = __webpack_require__(6874);
          var isObject = __webpack_require__(6944);

          var document = global.document;
          // typeof document.createElement is 'object' in old IE
          var EXISTS = isObject(document) && isObject(document.createElement);

          module.exports = function (it) {
            return EXISTS ? document.createElement(it) : {};
          };


          /***/
        }),

/***/ 4229:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var getBuiltIn = __webpack_require__(4578);

          module.exports = getBuiltIn('navigator', 'userAgent') || '';


          /***/
        }),

/***/ 579:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var global = __webpack_require__(6874);
          var userAgent = __webpack_require__(4229);

          var process = global.process;
          var Deno = global.Deno;
          var versions = process && process.versions || Deno && Deno.version;
          var v8 = versions && versions.v8;
          var match, version;

          if (v8) {
            match = v8.split('.');
            version = match[0] < 4 ? 1 : match[0] + match[1];
          } else if (userAgent) {
            match = userAgent.match(/Edge\/(\d+)/);
            if (!match || match[1] >= 74) {
              match = userAgent.match(/Chrome\/(\d+)/);
              if (match) version = match[1];
            }
          }

          module.exports = version && +version;


          /***/
        }),

/***/ 9752:
/***/ ((module) => {

          // IE8- don't enum bug keys
          module.exports = [
            'constructor',
            'hasOwnProperty',
            'isPrototypeOf',
            'propertyIsEnumerable',
            'toLocaleString',
            'toString',
            'valueOf'
          ];


          /***/
        }),

/***/ 1082:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var global = __webpack_require__(6874);
          var getOwnPropertyDescriptor = __webpack_require__(7825).f;
          var createNonEnumerableProperty = __webpack_require__(4791);
          var redefine = __webpack_require__(1249);
          var setGlobal = __webpack_require__(1278);
          var copyConstructorProperties = __webpack_require__(7918);
          var isForced = __webpack_require__(2350);

          /*
            options.target      - name of the target object
            options.global      - target is the global object
            options.stat        - export as static methods of target
            options.proto       - export as prototype methods of target
            options.real        - real prototype method for the `pure` version
            options.forced      - export even if the native feature is available
            options.bind        - bind methods to the target, required for the `pure` version
            options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
            options.unsafe      - use the simple assignment of property instead of delete + defineProperty
            options.sham        - add a flag to not completely full polyfills
            options.enumerable  - export as enumerable property
            options.noTargetGet - prevent calling a getter on target
          */
          module.exports = function (options, source) {
            var TARGET = options.target;
            var GLOBAL = options.global;
            var STATIC = options.stat;
            var FORCED, target, key, targetProperty, sourceProperty, descriptor;
            if (GLOBAL) {
              target = global;
            } else if (STATIC) {
              target = global[TARGET] || setGlobal(TARGET, {});
            } else {
              target = (global[TARGET] || {}).prototype;
            }
            if (target) for (key in source) {
              sourceProperty = source[key];
              if (options.noTargetGet) {
                descriptor = getOwnPropertyDescriptor(target, key);
                targetProperty = descriptor && descriptor.value;
              } else targetProperty = target[key];
              FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
              // contained in target
              if (!FORCED && targetProperty !== undefined) {
                if (typeof sourceProperty === typeof targetProperty) continue;
                copyConstructorProperties(sourceProperty, targetProperty);
              }
              // add a flag to not completely full polyfills
              if (options.sham || (targetProperty && targetProperty.sham)) {
                createNonEnumerableProperty(sourceProperty, 'sham', true);
              }
              // extend global
              redefine(target, key, sourceProperty, options);
            }
          };


          /***/
        }),

/***/ 7841:
/***/ ((module) => {

          module.exports = function (exec) {
            try {
              return !!exec();
            } catch (error) {
              return true;
            }
          };


          /***/
        }),

/***/ 4833:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var aFunction = __webpack_require__(769);

          // optional / simple context binding
          module.exports = function (fn, that, length) {
            aFunction(fn);
            if (that === undefined) return fn;
            switch (length) {
              case 0: return function () {
                return fn.call(that);
              };
              case 1: return function (a) {
                return fn.call(that, a);
              };
              case 2: return function (a, b) {
                return fn.call(that, a, b);
              };
              case 3: return function (a, b, c) {
                return fn.call(that, a, b, c);
              };
            }
            return function (/* ...args */) {
              return fn.apply(that, arguments);
            };
          };


          /***/
        }),

/***/ 4578:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var global = __webpack_require__(6874);

          var aFunction = function (variable) {
            return typeof variable == 'function' ? variable : undefined;
          };

          module.exports = function (namespace, method) {
            return arguments.length < 2 ? aFunction(global[namespace]) : global[namespace] && global[namespace][method];
          };


          /***/
        }),

/***/ 3126:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var classof = __webpack_require__(8753);
          var Iterators = __webpack_require__(873);
          var wellKnownSymbol = __webpack_require__(3706);

          var ITERATOR = wellKnownSymbol('iterator');

          module.exports = function (it) {
            if (it != undefined) return it[ITERATOR]
              || it['@@iterator']
              || Iterators[classof(it)];
          };


          /***/
        }),

/***/ 7053:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var anObject = __webpack_require__(47);
          var getIteratorMethod = __webpack_require__(3126);

          module.exports = function (it) {
            var iteratorMethod = getIteratorMethod(it);
            if (typeof iteratorMethod != 'function') {
              throw TypeError(String(it) + ' is not iterable');
            } return anObject(iteratorMethod.call(it));
          };


          /***/
        }),

/***/ 6874:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var check = function (it) {
            return it && it.Math == Math && it;
          };

          // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
          module.exports =
            // eslint-disable-next-line es/no-global-this -- safe
            check(typeof globalThis == 'object' && globalThis) ||
            check(typeof window == 'object' && window) ||
            // eslint-disable-next-line no-restricted-globals -- safe
            check(typeof self == 'object' && self) ||
            check(typeof __webpack_require__.g == 'object' && __webpack_require__.g) ||
            // eslint-disable-next-line no-new-func -- fallback
            (function () { return this; })() || Function('return this')();


          /***/
        }),

/***/ 5884:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var toObject = __webpack_require__(4680);

          var hasOwnProperty = {}.hasOwnProperty;

          module.exports = Object.hasOwn || function hasOwn (it, key) {
            return hasOwnProperty.call(toObject(it), key);
          };


          /***/
        }),

/***/ 5644:
/***/ ((module) => {

          module.exports = {};


          /***/
        }),

/***/ 7666:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var getBuiltIn = __webpack_require__(4578);

          module.exports = getBuiltIn('document', 'documentElement');


          /***/
        }),

/***/ 6056:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var DESCRIPTORS = __webpack_require__(5542);
          var fails = __webpack_require__(7841);
          var createElement = __webpack_require__(3879);

          // Thank's IE8 for his funny defineProperty
          module.exports = !DESCRIPTORS && !fails(function () {
            // eslint-disable-next-line es/no-object-defineproperty -- requied for testing
            return Object.defineProperty(createElement('div'), 'a', {
              get: function () { return 7; }
            }).a != 7;
          });


          /***/
        }),

/***/ 8517:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var fails = __webpack_require__(7841);
          var classof = __webpack_require__(3565);

          var split = ''.split;

          // fallback for non-array-like ES3 and non-enumerable old V8 strings
          module.exports = fails(function () {
            // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
            // eslint-disable-next-line no-prototype-builtins -- safe
            return !Object('z').propertyIsEnumerable(0);
          }) ? function (it) {
            return classof(it) == 'String' ? split.call(it, '') : Object(it);
          } : Object;


          /***/
        }),

/***/ 6090:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var store = __webpack_require__(4925);

          var functionToString = Function.toString;

          // this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
          if (typeof store.inspectSource != 'function') {
            store.inspectSource = function (it) {
              return functionToString.call(it);
            };
          }

          module.exports = store.inspectSource;


          /***/
        }),

/***/ 6619:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var NATIVE_WEAK_MAP = __webpack_require__(9957);
          var global = __webpack_require__(6874);
          var isObject = __webpack_require__(6944);
          var createNonEnumerableProperty = __webpack_require__(4791);
          var objectHas = __webpack_require__(5884);
          var shared = __webpack_require__(4925);
          var sharedKey = __webpack_require__(8698);
          var hiddenKeys = __webpack_require__(5644);

          var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
          var WeakMap = global.WeakMap;
          var set, get, has;

          var enforce = function (it) {
            return has(it) ? get(it) : set(it, {});
          };

          var getterFor = function (TYPE) {
            return function (it) {
              var state;
              if (!isObject(it) || (state = get(it)).type !== TYPE) {
                throw TypeError('Incompatible receiver, ' + TYPE + ' required');
              } return state;
            };
          };

          if (NATIVE_WEAK_MAP || shared.state) {
            var store = shared.state || (shared.state = new WeakMap());
            var wmget = store.get;
            var wmhas = store.has;
            var wmset = store.set;
            set = function (it, metadata) {
              if (wmhas.call(store, it)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
              metadata.facade = it;
              wmset.call(store, it, metadata);
              return metadata;
            };
            get = function (it) {
              return wmget.call(store, it) || {};
            };
            has = function (it) {
              return wmhas.call(store, it);
            };
          } else {
            var STATE = sharedKey('state');
            hiddenKeys[STATE] = true;
            set = function (it, metadata) {
              if (objectHas(it, STATE)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
              metadata.facade = it;
              createNonEnumerableProperty(it, STATE, metadata);
              return metadata;
            };
            get = function (it) {
              return objectHas(it, STATE) ? it[STATE] : {};
            };
            has = function (it) {
              return objectHas(it, STATE);
            };
          }

          module.exports = {
            set: set,
            get: get,
            has: has,
            enforce: enforce,
            getterFor: getterFor
          };


          /***/
        }),

/***/ 1008:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var wellKnownSymbol = __webpack_require__(3706);
          var Iterators = __webpack_require__(873);

          var ITERATOR = wellKnownSymbol('iterator');
          var ArrayPrototype = Array.prototype;

          // check on default Array iterator
          module.exports = function (it) {
            return it !== undefined && (Iterators.Array === it || ArrayPrototype[ITERATOR] === it);
          };


          /***/
        }),

/***/ 2350:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var fails = __webpack_require__(7841);

          var replacement = /#|\.prototype\./;

          var isForced = function (feature, detection) {
            var value = data[normalize(feature)];
            return value == POLYFILL ? true
              : value == NATIVE ? false
                : typeof detection == 'function' ? fails(detection)
                  : !!detection;
          };

          var normalize = isForced.normalize = function (string) {
            return String(string).replace(replacement, '.').toLowerCase();
          };

          var data = isForced.data = {};
          var NATIVE = isForced.NATIVE = 'N';
          var POLYFILL = isForced.POLYFILL = 'P';

          module.exports = isForced;


          /***/
        }),

/***/ 6944:
/***/ ((module) => {

          module.exports = function (it) {
            return typeof it === 'object' ? it !== null : typeof it === 'function';
          };


          /***/
        }),

/***/ 6852:
/***/ ((module) => {

          module.exports = false;


          /***/
        }),

/***/ 8377:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var getBuiltIn = __webpack_require__(4578);
          var USE_SYMBOL_AS_UID = __webpack_require__(4587);

          module.exports = USE_SYMBOL_AS_UID ? function (it) {
            return typeof it == 'symbol';
          } : function (it) {
            var $Symbol = getBuiltIn('Symbol');
            return typeof $Symbol == 'function' && Object(it) instanceof $Symbol;
          };


          /***/
        }),

/***/ 2608:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var anObject = __webpack_require__(47);

          module.exports = function (iterator) {
            var returnMethod = iterator['return'];
            if (returnMethod !== undefined) {
              return anObject(returnMethod.call(iterator)).value;
            }
          };


          /***/
        }),

/***/ 888:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          "use strict";

          var fails = __webpack_require__(7841);
          var getPrototypeOf = __webpack_require__(8186);
          var createNonEnumerableProperty = __webpack_require__(4791);
          var has = __webpack_require__(5884);
          var wellKnownSymbol = __webpack_require__(3706);
          var IS_PURE = __webpack_require__(6852);

          var ITERATOR = wellKnownSymbol('iterator');
          var BUGGY_SAFARI_ITERATORS = false;

          var returnThis = function () { return this; };

          // `%IteratorPrototype%` object
          // https://tc39.es/ecma262/#sec-%iteratorprototype%-object
          var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

          /* eslint-disable es/no-array-prototype-keys -- safe */
          if ([].keys) {
            arrayIterator = [].keys();
            // Safari 8 has buggy iterators w/o `next`
            if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
            else {
              PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
              if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
            }
          }

          var NEW_ITERATOR_PROTOTYPE = IteratorPrototype == undefined || fails(function () {
            var test = {};
            // FF44- legacy iterators case
            return IteratorPrototype[ITERATOR].call(test) !== test;
          });

          if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype = {};

          // `%IteratorPrototype%[@@iterator]()` method
          // https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator
          if ((!IS_PURE || NEW_ITERATOR_PROTOTYPE) && !has(IteratorPrototype, ITERATOR)) {
            createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);
          }

          module.exports = {
            IteratorPrototype: IteratorPrototype,
            BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
          };


          /***/
        }),

/***/ 873:
/***/ ((module) => {

          module.exports = {};


          /***/
        }),

/***/ 1453:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          /* eslint-disable es/no-symbol -- required for testing */
          var V8_VERSION = __webpack_require__(579);
          var fails = __webpack_require__(7841);

          // eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing
          module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
            var symbol = Symbol();
            // Chrome 38 Symbol has incorrect toString conversion
            // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
            return !String(symbol) || !(Object(symbol) instanceof Symbol) ||
              // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
              !Symbol.sham && V8_VERSION && V8_VERSION < 41;
          });


          /***/
        }),

/***/ 1781:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var fails = __webpack_require__(7841);
          var wellKnownSymbol = __webpack_require__(3706);
          var IS_PURE = __webpack_require__(6852);

          var ITERATOR = wellKnownSymbol('iterator');

          module.exports = !fails(function () {
            var url = new URL('b?a=1&b=2&c=3', 'http://a');
            var searchParams = url.searchParams;
            var result = '';
            url.pathname = 'c%20d';
            searchParams.forEach(function (value, key) {
              searchParams['delete']('b');
              result += key + value;
            });
            return (IS_PURE && !url.toJSON)
              || !searchParams.sort
              || url.href !== 'http://a/c%20d?a=1&c=3'
              || searchParams.get('c') !== '3'
              || String(new URLSearchParams('?a=1')) !== 'a=1'
              || !searchParams[ITERATOR]
              // throws in Edge
              || new URL('https://a@b').username !== 'a'
              || new URLSearchParams(new URLSearchParams('a=b')).get('a') !== 'b'
              // not punycoded in Edge
              || new URL('http://тест').host !== 'xn--e1aybc'
              // not escaped in Chrome 62-
              || new URL('http://a#б').hash !== '#%D0%B1'
              // fails in Chrome 66-
              || result !== 'a1c3'
              // throws in Safari
              || new URL('http://x', undefined).host !== 'x';
          });


          /***/
        }),

/***/ 9957:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var global = __webpack_require__(6874);
          var inspectSource = __webpack_require__(6090);

          var WeakMap = global.WeakMap;

          module.exports = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));


          /***/
        }),

/***/ 5277:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          "use strict";

          var DESCRIPTORS = __webpack_require__(5542);
          var fails = __webpack_require__(7841);
          var objectKeys = __webpack_require__(965);
          var getOwnPropertySymbolsModule = __webpack_require__(1913);
          var propertyIsEnumerableModule = __webpack_require__(3626);
          var toObject = __webpack_require__(4680);
          var IndexedObject = __webpack_require__(8517);

          // eslint-disable-next-line es/no-object-assign -- safe
          var $assign = Object.assign;
          // eslint-disable-next-line es/no-object-defineproperty -- required for testing
          var defineProperty = Object.defineProperty;

          // `Object.assign` method
          // https://tc39.es/ecma262/#sec-object.assign
          module.exports = !$assign || fails(function () {
            // should have correct order of operations (Edge bug)
            if (DESCRIPTORS && $assign({ b: 1 }, $assign(defineProperty({}, 'a', {
              enumerable: true,
              get: function () {
                defineProperty(this, 'b', {
                  value: 3,
                  enumerable: false
                });
              }
            }), { b: 2 })).b !== 1) return true;
            // should work with symbols and should have deterministic property order (V8 bug)
            var A = {};
            var B = {};
            // eslint-disable-next-line es/no-symbol -- safe
            var symbol = Symbol();
            var alphabet = 'abcdefghijklmnopqrst';
            A[symbol] = 7;
            alphabet.split('').forEach(function (chr) { B[chr] = chr; });
            return $assign({}, A)[symbol] != 7 || objectKeys($assign({}, B)).join('') != alphabet;
          }) ? function assign (target, source) { // eslint-disable-line no-unused-vars -- required for `.length`
            var T = toObject(target);
            var argumentsLength = arguments.length;
            var index = 1;
            var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
            var propertyIsEnumerable = propertyIsEnumerableModule.f;
            while (argumentsLength > index) {
              var S = IndexedObject(arguments[index++]);
              var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
              var length = keys.length;
              var j = 0;
              var key;
              while (length > j) {
                key = keys[j++];
                if (!DESCRIPTORS || propertyIsEnumerable.call(S, key)) T[key] = S[key];
              }
            } return T;
          } : $assign;


          /***/
        }),

/***/ 2361:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          /* global ActiveXObject -- old IE, WSH */
          var anObject = __webpack_require__(47);
          var defineProperties = __webpack_require__(7852);
          var enumBugKeys = __webpack_require__(9752);
          var hiddenKeys = __webpack_require__(5644);
          var html = __webpack_require__(7666);
          var documentCreateElement = __webpack_require__(3879);
          var sharedKey = __webpack_require__(8698);

          var GT = '>';
          var LT = '<';
          var PROTOTYPE = 'prototype';
          var SCRIPT = 'script';
          var IE_PROTO = sharedKey('IE_PROTO');

          var EmptyConstructor = function () { /* empty */ };

          var scriptTag = function (content) {
            return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
          };

          // Create object with fake `null` prototype: use ActiveX Object with cleared prototype
          var NullProtoObjectViaActiveX = function (activeXDocument) {
            activeXDocument.write(scriptTag(''));
            activeXDocument.close();
            var temp = activeXDocument.parentWindow.Object;
            activeXDocument = null; // avoid memory leak
            return temp;
          };

          // Create object with fake `null` prototype: use iframe Object with cleared prototype
          var NullProtoObjectViaIFrame = function () {
            // Thrash, waste and sodomy: IE GC bug
            var iframe = documentCreateElement('iframe');
            var JS = 'java' + SCRIPT + ':';
            var iframeDocument;
            iframe.style.display = 'none';
            html.appendChild(iframe);
            // https://github.com/zloirock/core-js/issues/475
            iframe.src = String(JS);
            iframeDocument = iframe.contentWindow.document;
            iframeDocument.open();
            iframeDocument.write(scriptTag('document.F=Object'));
            iframeDocument.close();
            return iframeDocument.F;
          };

          // Check for document.domain and active x support
          // No need to use active x approach when document.domain is not set
          // see https://github.com/es-shims/es5-shim/issues/150
          // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
          // avoid IE GC bug
          var activeXDocument;
          var NullProtoObject = function () {
            try {
              activeXDocument = new ActiveXObject('htmlfile');
            } catch (error) { /* ignore */ }
            NullProtoObject = typeof document != 'undefined'
              ? document.domain && activeXDocument
                ? NullProtoObjectViaActiveX(activeXDocument) // old IE
                : NullProtoObjectViaIFrame()
              : NullProtoObjectViaActiveX(activeXDocument); // WSH
            var length = enumBugKeys.length;
            while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
            return NullProtoObject();
          };

          hiddenKeys[IE_PROTO] = true;

          // `Object.create` method
          // https://tc39.es/ecma262/#sec-object.create
          module.exports = Object.create || function create (O, Properties) {
            var result;
            if (O !== null) {
              EmptyConstructor[PROTOTYPE] = anObject(O);
              result = new EmptyConstructor();
              EmptyConstructor[PROTOTYPE] = null;
              // add "__proto__" for Object.getPrototypeOf polyfill
              result[IE_PROTO] = O;
            } else result = NullProtoObject();
            return Properties === undefined ? result : defineProperties(result, Properties);
          };


          /***/
        }),

/***/ 7852:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var DESCRIPTORS = __webpack_require__(5542);
          var definePropertyModule = __webpack_require__(3376);
          var anObject = __webpack_require__(47);
          var objectKeys = __webpack_require__(965);

          // `Object.defineProperties` method
          // https://tc39.es/ecma262/#sec-object.defineproperties
          // eslint-disable-next-line es/no-object-defineproperties -- safe
          module.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties (O, Properties) {
            anObject(O);
            var keys = objectKeys(Properties);
            var length = keys.length;
            var index = 0;
            var key;
            while (length > index) definePropertyModule.f(O, key = keys[index++], Properties[key]);
            return O;
          };


          /***/
        }),

/***/ 3376:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

          var DESCRIPTORS = __webpack_require__(5542);
          var IE8_DOM_DEFINE = __webpack_require__(6056);
          var anObject = __webpack_require__(47);
          var toPropertyKey = __webpack_require__(2694);

          // eslint-disable-next-line es/no-object-defineproperty -- safe
          var $defineProperty = Object.defineProperty;

          // `Object.defineProperty` method
          // https://tc39.es/ecma262/#sec-object.defineproperty
          exports.f = DESCRIPTORS ? $defineProperty : function defineProperty (O, P, Attributes) {
            anObject(O);
            P = toPropertyKey(P);
            anObject(Attributes);
            if (IE8_DOM_DEFINE) try {
              return $defineProperty(O, P, Attributes);
            } catch (error) { /* empty */ }
            if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
            if ('value' in Attributes) O[P] = Attributes.value;
            return O;
          };


          /***/
        }),

/***/ 7825:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

          var DESCRIPTORS = __webpack_require__(5542);
          var propertyIsEnumerableModule = __webpack_require__(3626);
          var createPropertyDescriptor = __webpack_require__(976);
          var toIndexedObject = __webpack_require__(8852);
          var toPropertyKey = __webpack_require__(2694);
          var has = __webpack_require__(5884);
          var IE8_DOM_DEFINE = __webpack_require__(6056);

          // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
          var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

          // `Object.getOwnPropertyDescriptor` method
          // https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
          exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor (O, P) {
            O = toIndexedObject(O);
            P = toPropertyKey(P);
            if (IE8_DOM_DEFINE) try {
              return $getOwnPropertyDescriptor(O, P);
            } catch (error) { /* empty */ }
            if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);
          };


          /***/
        }),

/***/ 8401:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

          var internalObjectKeys = __webpack_require__(8104);
          var enumBugKeys = __webpack_require__(9752);

          var hiddenKeys = enumBugKeys.concat('length', 'prototype');

          // `Object.getOwnPropertyNames` method
          // https://tc39.es/ecma262/#sec-object.getownpropertynames
          // eslint-disable-next-line es/no-object-getownpropertynames -- safe
          exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames (O) {
            return internalObjectKeys(O, hiddenKeys);
          };


          /***/
        }),

/***/ 1913:
/***/ ((__unused_webpack_module, exports) => {

          // eslint-disable-next-line es/no-object-getownpropertysymbols -- safe
          exports.f = Object.getOwnPropertySymbols;


          /***/
        }),

/***/ 8186:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var has = __webpack_require__(5884);
          var toObject = __webpack_require__(4680);
          var sharedKey = __webpack_require__(8698);
          var CORRECT_PROTOTYPE_GETTER = __webpack_require__(9241);

          var IE_PROTO = sharedKey('IE_PROTO');
          var ObjectPrototype = Object.prototype;

          // `Object.getPrototypeOf` method
          // https://tc39.es/ecma262/#sec-object.getprototypeof
          // eslint-disable-next-line es/no-object-getprototypeof -- safe
          module.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {
            O = toObject(O);
            if (has(O, IE_PROTO)) return O[IE_PROTO];
            if (typeof O.constructor == 'function' && O instanceof O.constructor) {
              return O.constructor.prototype;
            } return O instanceof Object ? ObjectPrototype : null;
          };


          /***/
        }),

/***/ 8104:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var has = __webpack_require__(5884);
          var toIndexedObject = __webpack_require__(8852);
          var indexOf = __webpack_require__(1270).indexOf;
          var hiddenKeys = __webpack_require__(5644);

          module.exports = function (object, names) {
            var O = toIndexedObject(object);
            var i = 0;
            var result = [];
            var key;
            for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
            // Don't enum bug & hidden keys
            while (names.length > i) if (has(O, key = names[i++])) {
              ~indexOf(result, key) || result.push(key);
            }
            return result;
          };


          /***/
        }),

/***/ 965:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var internalObjectKeys = __webpack_require__(8104);
          var enumBugKeys = __webpack_require__(9752);

          // `Object.keys` method
          // https://tc39.es/ecma262/#sec-object.keys
          // eslint-disable-next-line es/no-object-keys -- safe
          module.exports = Object.keys || function keys (O) {
            return internalObjectKeys(O, enumBugKeys);
          };


          /***/
        }),

/***/ 3626:
/***/ ((__unused_webpack_module, exports) => {

          "use strict";

          var $propertyIsEnumerable = {}.propertyIsEnumerable;
          // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
          var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

          // Nashorn ~ JDK8 bug
          var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);

          // `Object.prototype.propertyIsEnumerable` method implementation
          // https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
          exports.f = NASHORN_BUG ? function propertyIsEnumerable (V) {
            var descriptor = getOwnPropertyDescriptor(this, V);
            return !!descriptor && descriptor.enumerable;
          } : $propertyIsEnumerable;


          /***/
        }),

/***/ 2686:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          /* eslint-disable no-proto -- safe */
          var anObject = __webpack_require__(47);
          var aPossiblePrototype = __webpack_require__(8143);

          // `Object.setPrototypeOf` method
          // https://tc39.es/ecma262/#sec-object.setprototypeof
          // Works with __proto__ only. Old v8 can't work with null proto objects.
          // eslint-disable-next-line es/no-object-setprototypeof -- safe
          module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () {
            var CORRECT_SETTER = false;
            var test = {};
            var setter;
            try {
              // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
              setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
              setter.call(test, []);
              CORRECT_SETTER = test instanceof Array;
            } catch (error) { /* empty */ }
            return function setPrototypeOf (O, proto) {
              anObject(O);
              aPossiblePrototype(proto);
              if (CORRECT_SETTER) setter.call(O, proto);
              else O.__proto__ = proto;
              return O;
            };
          }() : undefined);


          /***/
        }),

/***/ 2392:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var isObject = __webpack_require__(6944);

          // `OrdinaryToPrimitive` abstract operation
          // https://tc39.es/ecma262/#sec-ordinarytoprimitive
          module.exports = function (input, pref) {
            var fn, val;
            if (pref === 'string' && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
            if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
            if (pref !== 'string' && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
            throw TypeError("Can't convert object to primitive value");
          };


          /***/
        }),

/***/ 8204:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var getBuiltIn = __webpack_require__(4578);
          var getOwnPropertyNamesModule = __webpack_require__(8401);
          var getOwnPropertySymbolsModule = __webpack_require__(1913);
          var anObject = __webpack_require__(47);

          // all object keys, includes non-enumerable and symbols
          module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys (it) {
            var keys = getOwnPropertyNamesModule.f(anObject(it));
            var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
            return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
          };


          /***/
        }),

/***/ 7490:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var redefine = __webpack_require__(1249);

          module.exports = function (target, src, options) {
            for (var key in src) redefine(target, key, src[key], options);
            return target;
          };


          /***/
        }),

/***/ 1249:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var global = __webpack_require__(6874);
          var createNonEnumerableProperty = __webpack_require__(4791);
          var has = __webpack_require__(5884);
          var setGlobal = __webpack_require__(1278);
          var inspectSource = __webpack_require__(6090);
          var InternalStateModule = __webpack_require__(6619);

          var getInternalState = InternalStateModule.get;
          var enforceInternalState = InternalStateModule.enforce;
          var TEMPLATE = String(String).split('String');

          (module.exports = function (O, key, value, options) {
            var unsafe = options ? !!options.unsafe : false;
            var simple = options ? !!options.enumerable : false;
            var noTargetGet = options ? !!options.noTargetGet : false;
            var state;
            if (typeof value == 'function') {
              if (typeof key == 'string' && !has(value, 'name')) {
                createNonEnumerableProperty(value, 'name', key);
              }
              state = enforceInternalState(value);
              if (!state.source) {
                state.source = TEMPLATE.join(typeof key == 'string' ? key : '');
              }
            }
            if (O === global) {
              if (simple) O[key] = value;
              else setGlobal(key, value);
              return;
            } else if (!unsafe) {
              delete O[key];
            } else if (!noTargetGet && O[key]) {
              simple = true;
            }
            if (simple) O[key] = value;
            else createNonEnumerableProperty(O, key, value);
            // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
          })(Function.prototype, 'toString', function toString () {
            return typeof this == 'function' && getInternalState(this).source || inspectSource(this);
          });


          /***/
        }),

/***/ 164:
/***/ ((module) => {

          // `RequireObjectCoercible` abstract operation
          // https://tc39.es/ecma262/#sec-requireobjectcoercible
          module.exports = function (it) {
            if (it == undefined) throw TypeError("Can't call method on " + it);
            return it;
          };


          /***/
        }),

/***/ 1278:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var global = __webpack_require__(6874);

          module.exports = function (key, value) {
            try {
              // eslint-disable-next-line es/no-object-defineproperty -- safe
              Object.defineProperty(global, key, { value: value, configurable: true, writable: true });
            } catch (error) {
              global[key] = value;
            } return value;
          };


          /***/
        }),

/***/ 9400:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var defineProperty = __webpack_require__(3376).f;
          var has = __webpack_require__(5884);
          var wellKnownSymbol = __webpack_require__(3706);

          var TO_STRING_TAG = wellKnownSymbol('toStringTag');

          module.exports = function (it, TAG, STATIC) {
            if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
              defineProperty(it, TO_STRING_TAG, { configurable: true, value: TAG });
            }
          };


          /***/
        }),

/***/ 8698:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var shared = __webpack_require__(3215);
          var uid = __webpack_require__(8435);

          var keys = shared('keys');

          module.exports = function (key) {
            return keys[key] || (keys[key] = uid(key));
          };


          /***/
        }),

/***/ 4925:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var global = __webpack_require__(6874);
          var setGlobal = __webpack_require__(1278);

          var SHARED = '__core-js_shared__';
          var store = global[SHARED] || setGlobal(SHARED, {});

          module.exports = store;


          /***/
        }),

/***/ 3215:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var IS_PURE = __webpack_require__(6852);
          var store = __webpack_require__(4925);

          (module.exports = function (key, value) {
            return store[key] || (store[key] = value !== undefined ? value : {});
          })('versions', []).push({
            version: '3.16.2',
            mode: IS_PURE ? 'pure' : 'global',
            copyright: '© 2021 Denis Pushkarev (zloirock.ru)'
          });


          /***/
        }),

/***/ 6174:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var toInteger = __webpack_require__(7896);
          var toString = __webpack_require__(401);
          var requireObjectCoercible = __webpack_require__(164);

          // `String.prototype.codePointAt` methods implementation
          var createMethod = function (CONVERT_TO_STRING) {
            return function ($this, pos) {
              var S = toString(requireObjectCoercible($this));
              var position = toInteger(pos);
              var size = S.length;
              var first, second;
              if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
              first = S.charCodeAt(position);
              return first < 0xD800 || first > 0xDBFF || position + 1 === size
                || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF
                ? CONVERT_TO_STRING ? S.charAt(position) : first
                : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
            };
          };

          module.exports = {
            // `String.prototype.codePointAt` method
            // https://tc39.es/ecma262/#sec-string.prototype.codepointat
            codeAt: createMethod(false),
            // `String.prototype.at` method
            // https://github.com/mathiasbynens/String.prototype.at
            charAt: createMethod(true)
          };


          /***/
        }),

/***/ 8:
/***/ ((module) => {

          "use strict";

          // based on https://github.com/bestiejs/punycode.js/blob/master/punycode.js
          var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1
          var base = 36;
          var tMin = 1;
          var tMax = 26;
          var skew = 38;
          var damp = 700;
          var initialBias = 72;
          var initialN = 128; // 0x80
          var delimiter = '-'; // '\x2D'
          var regexNonASCII = /[^\0-\u007E]/; // non-ASCII chars
          var regexSeparators = /[.\u3002\uFF0E\uFF61]/g; // RFC 3490 separators
          var OVERFLOW_ERROR = 'Overflow: input needs wider integers to process';
          var baseMinusTMin = base - tMin;
          var floor = Math.floor;
          var stringFromCharCode = String.fromCharCode;

          /**
           * Creates an array containing the numeric code points of each Unicode
           * character in the string. While JavaScript uses UCS-2 internally,
           * this function will convert a pair of surrogate halves (each of which
           * UCS-2 exposes as separate characters) into a single code point,
           * matching UTF-16.
           */
          var ucs2decode = function (string) {
            var output = [];
            var counter = 0;
            var length = string.length;
            while (counter < length) {
              var value = string.charCodeAt(counter++);
              if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
                // It's a high surrogate, and there is a next character.
                var extra = string.charCodeAt(counter++);
                if ((extra & 0xFC00) == 0xDC00) { // Low surrogate.
                  output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
                } else {
                  // It's an unmatched surrogate; only append this code unit, in case the
                  // next code unit is the high surrogate of a surrogate pair.
                  output.push(value);
                  counter--;
                }
              } else {
                output.push(value);
              }
            }
            return output;
          };

          /**
           * Converts a digit/integer into a basic code point.
           */
          var digitToBasic = function (digit) {
            //  0..25 map to ASCII a..z or A..Z
            // 26..35 map to ASCII 0..9
            return digit + 22 + 75 * (digit < 26);
          };

          /**
           * Bias adaptation function as per section 3.4 of RFC 3492.
           * https://tools.ietf.org/html/rfc3492#section-3.4
           */
          var adapt = function (delta, numPoints, firstTime) {
            var k = 0;
            delta = firstTime ? floor(delta / damp) : delta >> 1;
            delta += floor(delta / numPoints);
            for (; delta > baseMinusTMin * tMax >> 1; k += base) {
              delta = floor(delta / baseMinusTMin);
            }
            return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
          };

          /**
           * Converts a string of Unicode symbols (e.g. a domain name label) to a
           * Punycode string of ASCII-only symbols.
           */
          // eslint-disable-next-line max-statements -- TODO
          var encode = function (input) {
            var output = [];

            // Convert the input in UCS-2 to an array of Unicode code points.
            input = ucs2decode(input);

            // Cache the length.
            var inputLength = input.length;

            // Initialize the state.
            var n = initialN;
            var delta = 0;
            var bias = initialBias;
            var i, currentValue;

            // Handle the basic code points.
            for (i = 0; i < input.length; i++) {
              currentValue = input[i];
              if (currentValue < 0x80) {
                output.push(stringFromCharCode(currentValue));
              }
            }

            var basicLength = output.length; // number of basic code points.
            var handledCPCount = basicLength; // number of code points that have been handled;

            // Finish the basic string with a delimiter unless it's empty.
            if (basicLength) {
              output.push(delimiter);
            }

            // Main encoding loop:
            while (handledCPCount < inputLength) {
              // All non-basic code points < n have been handled already. Find the next larger one:
              var m = maxInt;
              for (i = 0; i < input.length; i++) {
                currentValue = input[i];
                if (currentValue >= n && currentValue < m) {
                  m = currentValue;
                }
              }

              // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>, but guard against overflow.
              var handledCPCountPlusOne = handledCPCount + 1;
              if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
                throw RangeError(OVERFLOW_ERROR);
              }

              delta += (m - n) * handledCPCountPlusOne;
              n = m;

              for (i = 0; i < input.length; i++) {
                currentValue = input[i];
                if (currentValue < n && ++delta > maxInt) {
                  throw RangeError(OVERFLOW_ERROR);
                }
                if (currentValue == n) {
                  // Represent delta as a generalized variable-length integer.
                  var q = delta;
                  for (var k = base; /* no condition */; k += base) {
                    var t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
                    if (q < t) break;
                    var qMinusT = q - t;
                    var baseMinusT = base - t;
                    output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT)));
                    q = floor(qMinusT / baseMinusT);
                  }

                  output.push(stringFromCharCode(digitToBasic(q)));
                  bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                  delta = 0;
                  ++handledCPCount;
                }
              }

              ++delta;
              ++n;
            }
            return output.join('');
          };

          module.exports = function (input) {
            var encoded = [];
            var labels = input.toLowerCase().replace(regexSeparators, '\u002E').split('.');
            var i, label;
            for (i = 0; i < labels.length; i++) {
              label = labels[i];
              encoded.push(regexNonASCII.test(label) ? 'xn--' + encode(label) : label);
            }
            return encoded.join('.');
          };


          /***/
        }),

/***/ 2145:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var toInteger = __webpack_require__(7896);

          var max = Math.max;
          var min = Math.min;

          // Helper for a popular repeating case of the spec:
          // Let integer be ? ToInteger(index).
          // If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
          module.exports = function (index, length) {
            var integer = toInteger(index);
            return integer < 0 ? max(integer + length, 0) : min(integer, length);
          };


          /***/
        }),

/***/ 8852:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          // toObject with fallback for non-array-like ES3 strings
          var IndexedObject = __webpack_require__(8517);
          var requireObjectCoercible = __webpack_require__(164);

          module.exports = function (it) {
            return IndexedObject(requireObjectCoercible(it));
          };


          /***/
        }),

/***/ 7896:
/***/ ((module) => {

          var ceil = Math.ceil;
          var floor = Math.floor;

          // `ToInteger` abstract operation
          // https://tc39.es/ecma262/#sec-tointeger
          module.exports = function (argument) {
            return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
          };


          /***/
        }),

/***/ 4954:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var toInteger = __webpack_require__(7896);

          var min = Math.min;

          // `ToLength` abstract operation
          // https://tc39.es/ecma262/#sec-tolength
          module.exports = function (argument) {
            return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
          };


          /***/
        }),

/***/ 4680:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var requireObjectCoercible = __webpack_require__(164);

          // `ToObject` abstract operation
          // https://tc39.es/ecma262/#sec-toobject
          module.exports = function (argument) {
            return Object(requireObjectCoercible(argument));
          };


          /***/
        }),

/***/ 2034:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var isObject = __webpack_require__(6944);
          var isSymbol = __webpack_require__(8377);
          var ordinaryToPrimitive = __webpack_require__(2392);
          var wellKnownSymbol = __webpack_require__(3706);

          var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');

          // `ToPrimitive` abstract operation
          // https://tc39.es/ecma262/#sec-toprimitive
          module.exports = function (input, pref) {
            if (!isObject(input) || isSymbol(input)) return input;
            var exoticToPrim = input[TO_PRIMITIVE];
            var result;
            if (exoticToPrim !== undefined) {
              if (pref === undefined) pref = 'default';
              result = exoticToPrim.call(input, pref);
              if (!isObject(result) || isSymbol(result)) return result;
              throw TypeError("Can't convert object to primitive value");
            }
            if (pref === undefined) pref = 'number';
            return ordinaryToPrimitive(input, pref);
          };


          /***/
        }),

/***/ 2694:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var toPrimitive = __webpack_require__(2034);
          var isSymbol = __webpack_require__(8377);

          // `ToPropertyKey` abstract operation
          // https://tc39.es/ecma262/#sec-topropertykey
          module.exports = function (argument) {
            var key = toPrimitive(argument, 'string');
            return isSymbol(key) ? key : String(key);
          };


          /***/
        }),

/***/ 939:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var wellKnownSymbol = __webpack_require__(3706);

          var TO_STRING_TAG = wellKnownSymbol('toStringTag');
          var test = {};

          test[TO_STRING_TAG] = 'z';

          module.exports = String(test) === '[object z]';


          /***/
        }),

/***/ 401:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var isSymbol = __webpack_require__(8377);

          module.exports = function (argument) {
            if (isSymbol(argument)) throw TypeError('Cannot convert a Symbol value to a string');
            return String(argument);
          };


          /***/
        }),

/***/ 8435:
/***/ ((module) => {

          var id = 0;
          var postfix = Math.random();

          module.exports = function (key) {
            return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
          };


          /***/
        }),

/***/ 4587:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          /* eslint-disable es/no-symbol -- required for testing */
          var NATIVE_SYMBOL = __webpack_require__(1453);

          module.exports = NATIVE_SYMBOL
            && !Symbol.sham
            && typeof Symbol.iterator == 'symbol';


          /***/
        }),

/***/ 3706:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          var global = __webpack_require__(6874);
          var shared = __webpack_require__(3215);
          var has = __webpack_require__(5884);
          var uid = __webpack_require__(8435);
          var NATIVE_SYMBOL = __webpack_require__(1453);
          var USE_SYMBOL_AS_UID = __webpack_require__(4587);

          var WellKnownSymbolsStore = shared('wks');
          var Symbol = global.Symbol;
          var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;

          module.exports = function (name) {
            if (!has(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == 'string')) {
              if (NATIVE_SYMBOL && has(Symbol, name)) {
                WellKnownSymbolsStore[name] = Symbol[name];
              } else {
                WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
              }
            } return WellKnownSymbolsStore[name];
          };


          /***/
        }),

/***/ 2837:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          "use strict";

          var toIndexedObject = __webpack_require__(8852);
          var addToUnscopables = __webpack_require__(9611);
          var Iterators = __webpack_require__(873);
          var InternalStateModule = __webpack_require__(6619);
          var defineIterator = __webpack_require__(3131);

          var ARRAY_ITERATOR = 'Array Iterator';
          var setInternalState = InternalStateModule.set;
          var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);

          // `Array.prototype.entries` method
          // https://tc39.es/ecma262/#sec-array.prototype.entries
          // `Array.prototype.keys` method
          // https://tc39.es/ecma262/#sec-array.prototype.keys
          // `Array.prototype.values` method
          // https://tc39.es/ecma262/#sec-array.prototype.values
          // `Array.prototype[@@iterator]` method
          // https://tc39.es/ecma262/#sec-array.prototype-@@iterator
          // `CreateArrayIterator` internal method
          // https://tc39.es/ecma262/#sec-createarrayiterator
          module.exports = defineIterator(Array, 'Array', function (iterated, kind) {
            setInternalState(this, {
              type: ARRAY_ITERATOR,
              target: toIndexedObject(iterated), // target
              index: 0,                          // next index
              kind: kind                         // kind
            });
            // `%ArrayIteratorPrototype%.next` method
            // https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next
          }, function () {
            var state = getInternalState(this);
            var target = state.target;
            var kind = state.kind;
            var index = state.index++;
            if (!target || index >= target.length) {
              state.target = undefined;
              return { value: undefined, done: true };
            }
            if (kind == 'keys') return { value: index, done: false };
            if (kind == 'values') return { value: target[index], done: false };
            return { value: [index, target[index]], done: false };
          }, 'values');

          // argumentsList[@@iterator] is %ArrayProto_values%
          // https://tc39.es/ecma262/#sec-createunmappedargumentsobject
          // https://tc39.es/ecma262/#sec-createmappedargumentsobject
          Iterators.Arguments = Iterators.Array;

          // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
          addToUnscopables('keys');
          addToUnscopables('values');
          addToUnscopables('entries');


          /***/
        }),

/***/ 6949:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

          "use strict";

          var charAt = __webpack_require__(6174).charAt;
          var toString = __webpack_require__(401);
          var InternalStateModule = __webpack_require__(6619);
          var defineIterator = __webpack_require__(3131);

          var STRING_ITERATOR = 'String Iterator';
          var setInternalState = InternalStateModule.set;
          var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);

          // `String.prototype[@@iterator]` method
          // https://tc39.es/ecma262/#sec-string.prototype-@@iterator
          defineIterator(String, 'String', function (iterated) {
            setInternalState(this, {
              type: STRING_ITERATOR,
              string: toString(iterated),
              index: 0
            });
            // `%StringIteratorPrototype%.next` method
            // https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next
          }, function next () {
            var state = getInternalState(this);
            var string = state.string;
            var index = state.index;
            var point;
            if (index >= string.length) return { value: undefined, done: true };
            point = charAt(string, index);
            state.index += point.length;
            return { value: point, done: false };
          });


          /***/
        }),

/***/ 2303:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

          "use strict";

          // TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
          __webpack_require__(2837);
          var $ = __webpack_require__(1082);
          var getBuiltIn = __webpack_require__(4578);
          var USE_NATIVE_URL = __webpack_require__(1781);
          var redefine = __webpack_require__(1249);
          var redefineAll = __webpack_require__(7490);
          var setToStringTag = __webpack_require__(9400);
          var createIteratorConstructor = __webpack_require__(9670);
          var InternalStateModule = __webpack_require__(6619);
          var anInstance = __webpack_require__(2482);
          var hasOwn = __webpack_require__(5884);
          var bind = __webpack_require__(4833);
          var classof = __webpack_require__(8753);
          var anObject = __webpack_require__(47);
          var isObject = __webpack_require__(6944);
          var $toString = __webpack_require__(401);
          var create = __webpack_require__(2361);
          var createPropertyDescriptor = __webpack_require__(976);
          var getIterator = __webpack_require__(7053);
          var getIteratorMethod = __webpack_require__(3126);
          var wellKnownSymbol = __webpack_require__(3706);

          var nativeFetch = getBuiltIn('fetch');
          var NativeRequest = getBuiltIn('Request');
          var RequestPrototype = NativeRequest && NativeRequest.prototype;
          var Headers = getBuiltIn('Headers');
          var ITERATOR = wellKnownSymbol('iterator');
          var URL_SEARCH_PARAMS = 'URLSearchParams';
          var URL_SEARCH_PARAMS_ITERATOR = URL_SEARCH_PARAMS + 'Iterator';
          var setInternalState = InternalStateModule.set;
          var getInternalParamsState = InternalStateModule.getterFor(URL_SEARCH_PARAMS);
          var getInternalIteratorState = InternalStateModule.getterFor(URL_SEARCH_PARAMS_ITERATOR);

          var plus = /\+/g;
          var sequences = Array(4);

          var percentSequence = function (bytes) {
            return sequences[bytes - 1] || (sequences[bytes - 1] = RegExp('((?:%[\\da-f]{2}){' + bytes + '})', 'gi'));
          };

          var percentDecode = function (sequence) {
            try {
              return decodeURIComponent(sequence);
            } catch (error) {
              return sequence;
            }
          };

          var deserialize = function (it) {
            var result = it.replace(plus, ' ');
            var bytes = 4;
            try {
              return decodeURIComponent(result);
            } catch (error) {
              while (bytes) {
                result = result.replace(percentSequence(bytes--), percentDecode);
              }
              return result;
            }
          };

          var find = /[!'()~]|%20/g;

          var replace = {
            '!': '%21',
            "'": '%27',
            '(': '%28',
            ')': '%29',
            '~': '%7E',
            '%20': '+'
          };

          var replacer = function (match) {
            return replace[match];
          };

          var serialize = function (it) {
            return encodeURIComponent(it).replace(find, replacer);
          };

          var parseSearchParams = function (result, query) {
            if (query) {
              var attributes = query.split('&');
              var index = 0;
              var attribute, entry;
              while (index < attributes.length) {
                attribute = attributes[index++];
                if (attribute.length) {
                  entry = attribute.split('=');
                  result.push({
                    key: deserialize(entry.shift()),
                    value: deserialize(entry.join('='))
                  });
                }
              }
            }
          };

          var updateSearchParams = function (query) {
            this.entries.length = 0;
            parseSearchParams(this.entries, query);
          };

          var validateArgumentsLength = function (passed, required) {
            if (passed < required) throw TypeError('Not enough arguments');
          };

          var URLSearchParamsIterator = createIteratorConstructor(function Iterator (params, kind) {
            setInternalState(this, {
              type: URL_SEARCH_PARAMS_ITERATOR,
              iterator: getIterator(getInternalParamsState(params).entries),
              kind: kind
            });
          }, 'Iterator', function next () {
            var state = getInternalIteratorState(this);
            var kind = state.kind;
            var step = state.iterator.next();
            var entry = step.value;
            if (!step.done) {
              step.value = kind === 'keys' ? entry.key : kind === 'values' ? entry.value : [entry.key, entry.value];
            } return step;
          });

          // `URLSearchParams` constructor
          // https://url.spec.whatwg.org/#interface-urlsearchparams
          var URLSearchParamsConstructor = function URLSearchParams (/* init */) {
            anInstance(this, URLSearchParamsConstructor, URL_SEARCH_PARAMS);
            var init = arguments.length > 0 ? arguments[0] : undefined;
            var that = this;
            var entries = [];
            var iteratorMethod, iterator, next, step, entryIterator, entryNext, first, second, key;

            setInternalState(that, {
              type: URL_SEARCH_PARAMS,
              entries: entries,
              updateURL: function () { /* empty */ },
              updateSearchParams: updateSearchParams
            });

            if (init !== undefined) {
              if (isObject(init)) {
                iteratorMethod = getIteratorMethod(init);
                if (typeof iteratorMethod === 'function') {
                  iterator = iteratorMethod.call(init);
                  next = iterator.next;
                  while (!(step = next.call(iterator)).done) {
                    entryIterator = getIterator(anObject(step.value));
                    entryNext = entryIterator.next;
                    if (
                      (first = entryNext.call(entryIterator)).done ||
                      (second = entryNext.call(entryIterator)).done ||
                      !entryNext.call(entryIterator).done
                    ) throw TypeError('Expected sequence with length 2');
                    entries.push({ key: $toString(first.value), value: $toString(second.value) });
                  }
                } else for (key in init) if (hasOwn(init, key)) entries.push({ key: key, value: $toString(init[key]) });
              } else {
                parseSearchParams(
                  entries,
                  typeof init === 'string' ? init.charAt(0) === '?' ? init.slice(1) : init : $toString(init)
                );
              }
            }
          };

          var URLSearchParamsPrototype = URLSearchParamsConstructor.prototype;

          redefineAll(URLSearchParamsPrototype, {
            // `URLSearchParams.prototype.append` method
            // https://url.spec.whatwg.org/#dom-urlsearchparams-append
            append: function append (name, value) {
              validateArgumentsLength(arguments.length, 2);
              var state = getInternalParamsState(this);
              state.entries.push({ key: $toString(name), value: $toString(value) });
              state.updateURL();
            },
            // `URLSearchParams.prototype.delete` method
            // https://url.spec.whatwg.org/#dom-urlsearchparams-delete
            'delete': function (name) {
              validateArgumentsLength(arguments.length, 1);
              var state = getInternalParamsState(this);
              var entries = state.entries;
              var key = $toString(name);
              var index = 0;
              while (index < entries.length) {
                if (entries[index].key === key) entries.splice(index, 1);
                else index++;
              }
              state.updateURL();
            },
            // `URLSearchParams.prototype.get` method
            // https://url.spec.whatwg.org/#dom-urlsearchparams-get
            get: function get (name) {
              validateArgumentsLength(arguments.length, 1);
              var entries = getInternalParamsState(this).entries;
              var key = $toString(name);
              var index = 0;
              for (; index < entries.length; index++) {
                if (entries[index].key === key) return entries[index].value;
              }
              return null;
            },
            // `URLSearchParams.prototype.getAll` method
            // https://url.spec.whatwg.org/#dom-urlsearchparams-getall
            getAll: function getAll (name) {
              validateArgumentsLength(arguments.length, 1);
              var entries = getInternalParamsState(this).entries;
              var key = $toString(name);
              var result = [];
              var index = 0;
              for (; index < entries.length; index++) {
                if (entries[index].key === key) result.push(entries[index].value);
              }
              return result;
            },
            // `URLSearchParams.prototype.has` method
            // https://url.spec.whatwg.org/#dom-urlsearchparams-has
            has: function has (name) {
              validateArgumentsLength(arguments.length, 1);
              var entries = getInternalParamsState(this).entries;
              var key = $toString(name);
              var index = 0;
              while (index < entries.length) {
                if (entries[index++].key === key) return true;
              }
              return false;
            },
            // `URLSearchParams.prototype.set` method
            // https://url.spec.whatwg.org/#dom-urlsearchparams-set
            set: function set (name, value) {
              validateArgumentsLength(arguments.length, 1);
              var state = getInternalParamsState(this);
              var entries = state.entries;
              var found = false;
              var key = $toString(name);
              var val = $toString(value);
              var index = 0;
              var entry;
              for (; index < entries.length; index++) {
                entry = entries[index];
                if (entry.key === key) {
                  if (found) entries.splice(index--, 1);
                  else {
                    found = true;
                    entry.value = val;
                  }
                }
              }
              if (!found) entries.push({ key: key, value: val });
              state.updateURL();
            },
            // `URLSearchParams.prototype.sort` method
            // https://url.spec.whatwg.org/#dom-urlsearchparams-sort
            sort: function sort () {
              var state = getInternalParamsState(this);
              var entries = state.entries;
              // Array#sort is not stable in some engines
              var slice = entries.slice();
              var entry, entriesIndex, sliceIndex;
              entries.length = 0;
              for (sliceIndex = 0; sliceIndex < slice.length; sliceIndex++) {
                entry = slice[sliceIndex];
                for (entriesIndex = 0; entriesIndex < sliceIndex; entriesIndex++) {
                  if (entries[entriesIndex].key > entry.key) {
                    entries.splice(entriesIndex, 0, entry);
                    break;
                  }
                }
                if (entriesIndex === sliceIndex) entries.push(entry);
              }
              state.updateURL();
            },
            // `URLSearchParams.prototype.forEach` method
            forEach: function forEach (callback /* , thisArg */) {
              var entries = getInternalParamsState(this).entries;
              var boundFunction = bind(callback, arguments.length > 1 ? arguments[1] : undefined, 3);
              var index = 0;
              var entry;
              while (index < entries.length) {
                entry = entries[index++];
                boundFunction(entry.value, entry.key, this);
              }
            },
            // `URLSearchParams.prototype.keys` method
            keys: function keys () {
              return new URLSearchParamsIterator(this, 'keys');
            },
            // `URLSearchParams.prototype.values` method
            values: function values () {
              return new URLSearchParamsIterator(this, 'values');
            },
            // `URLSearchParams.prototype.entries` method
            entries: function entries () {
              return new URLSearchParamsIterator(this, 'entries');
            }
          }, { enumerable: true });

          // `URLSearchParams.prototype[@@iterator]` method
          redefine(URLSearchParamsPrototype, ITERATOR, URLSearchParamsPrototype.entries);

          // `URLSearchParams.prototype.toString` method
          // https://url.spec.whatwg.org/#urlsearchparams-stringification-behavior
          redefine(URLSearchParamsPrototype, 'toString', function toString () {
            var entries = getInternalParamsState(this).entries;
            var result = [];
            var index = 0;
            var entry;
            while (index < entries.length) {
              entry = entries[index++];
              result.push(serialize(entry.key) + '=' + serialize(entry.value));
            } return result.join('&');
          }, { enumerable: true });

          setToStringTag(URLSearchParamsConstructor, URL_SEARCH_PARAMS);

          $({ global: true, forced: !USE_NATIVE_URL }, {
            URLSearchParams: URLSearchParamsConstructor
          });

          // Wrap `fetch` and `Request` for correct work with polyfilled `URLSearchParams`
          if (!USE_NATIVE_URL && typeof Headers == 'function') {
            var wrapRequestOptions = function (init) {
              if (isObject(init)) {
                var body = init.body;
                var headers;
                if (classof(body) === URL_SEARCH_PARAMS) {
                  headers = init.headers ? new Headers(init.headers) : new Headers();
                  if (!headers.has('content-type')) {
                    headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
                  }
                  return create(init, {
                    body: createPropertyDescriptor(0, String(body)),
                    headers: createPropertyDescriptor(0, headers)
                  });
                }
              } return init;
            };

            if (typeof nativeFetch == 'function') {
              $({ global: true, enumerable: true, forced: true }, {
                fetch: function fetch (input /* , init */) {
                  return nativeFetch(input, arguments.length > 1 ? wrapRequestOptions(arguments[1]) : {});
                }
              });
            }

            if (typeof NativeRequest == 'function') {
              var RequestConstructor = function Request (input /* , init */) {
                anInstance(this, RequestConstructor, 'Request');
                return new NativeRequest(input, arguments.length > 1 ? wrapRequestOptions(arguments[1]) : {});
              };

              RequestPrototype.constructor = RequestConstructor;
              RequestConstructor.prototype = RequestPrototype;

              $({ global: true, forced: true }, {
                Request: RequestConstructor
              });
            }
          }

          module.exports = {
            URLSearchParams: URLSearchParamsConstructor,
            getState: getInternalParamsState
          };


          /***/
        }),

/***/ 2743:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

          "use strict";

          // TODO: in core-js@4, move /modules/ dependencies to public entries for better optimization by tools like `preset-env`
          __webpack_require__(6949);
          var $ = __webpack_require__(1082);
          var DESCRIPTORS = __webpack_require__(5542);
          var USE_NATIVE_URL = __webpack_require__(1781);
          var global = __webpack_require__(6874);
          var defineProperties = __webpack_require__(7852);
          var redefine = __webpack_require__(1249);
          var anInstance = __webpack_require__(2482);
          var has = __webpack_require__(5884);
          var assign = __webpack_require__(5277);
          var arrayFrom = __webpack_require__(1774);
          var codeAt = __webpack_require__(6174).codeAt;
          var toASCII = __webpack_require__(8);
          var $toString = __webpack_require__(401);
          var setToStringTag = __webpack_require__(9400);
          var URLSearchParamsModule = __webpack_require__(2303);
          var InternalStateModule = __webpack_require__(6619);

          var NativeURL = global.URL;
          var URLSearchParams = URLSearchParamsModule.URLSearchParams;
          var getInternalSearchParamsState = URLSearchParamsModule.getState;
          var setInternalState = InternalStateModule.set;
          var getInternalURLState = InternalStateModule.getterFor('URL');
          var floor = Math.floor;
          var pow = Math.pow;

          var INVALID_AUTHORITY = 'Invalid authority';
          var INVALID_SCHEME = 'Invalid scheme';
          var INVALID_HOST = 'Invalid host';
          var INVALID_PORT = 'Invalid port';

          var ALPHA = /[A-Za-z]/;
          // eslint-disable-next-line regexp/no-obscure-range -- safe
          var ALPHANUMERIC = /[\d+-.A-Za-z]/;
          var DIGIT = /\d/;
          var HEX_START = /^0x/i;
          var OCT = /^[0-7]+$/;
          var DEC = /^\d+$/;
          var HEX = /^[\dA-Fa-f]+$/;
          /* eslint-disable no-control-regex -- safe */
          var FORBIDDEN_HOST_CODE_POINT = /[\0\t\n\r #%/:<>?@[\\\]^|]/;
          var FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT = /[\0\t\n\r #/:<>?@[\\\]^|]/;
          var LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE = /^[\u0000-\u0020]+|[\u0000-\u0020]+$/g;
          var TAB_AND_NEW_LINE = /[\t\n\r]/g;
          /* eslint-enable no-control-regex -- safe */
          var EOF;

          var parseHost = function (url, input) {
            var result, codePoints, index;
            if (input.charAt(0) == '[') {
              if (input.charAt(input.length - 1) != ']') return INVALID_HOST;
              result = parseIPv6(input.slice(1, -1));
              if (!result) return INVALID_HOST;
              url.host = result;
              // opaque host
            } else if (!isSpecial(url)) {
              if (FORBIDDEN_HOST_CODE_POINT_EXCLUDING_PERCENT.test(input)) return INVALID_HOST;
              result = '';
              codePoints = arrayFrom(input);
              for (index = 0; index < codePoints.length; index++) {
                result += percentEncode(codePoints[index], C0ControlPercentEncodeSet);
              }
              url.host = result;
            } else {
              input = toASCII(input);
              if (FORBIDDEN_HOST_CODE_POINT.test(input)) return INVALID_HOST;
              result = parseIPv4(input);
              if (result === null) return INVALID_HOST;
              url.host = result;
            }
          };

          var parseIPv4 = function (input) {
            var parts = input.split('.');
            var partsLength, numbers, index, part, radix, number, ipv4;
            if (parts.length && parts[parts.length - 1] == '') {
              parts.pop();
            }
            partsLength = parts.length;
            if (partsLength > 4) return input;
            numbers = [];
            for (index = 0; index < partsLength; index++) {
              part = parts[index];
              if (part == '') return input;
              radix = 10;
              if (part.length > 1 && part.charAt(0) == '0') {
                radix = HEX_START.test(part) ? 16 : 8;
                part = part.slice(radix == 8 ? 1 : 2);
              }
              if (part === '') {
                number = 0;
              } else {
                if (!(radix == 10 ? DEC : radix == 8 ? OCT : HEX).test(part)) return input;
                number = parseInt(part, radix);
              }
              numbers.push(number);
            }
            for (index = 0; index < partsLength; index++) {
              number = numbers[index];
              if (index == partsLength - 1) {
                if (number >= pow(256, 5 - partsLength)) return null;
              } else if (number > 255) return null;
            }
            ipv4 = numbers.pop();
            for (index = 0; index < numbers.length; index++) {
              ipv4 += numbers[index] * pow(256, 3 - index);
            }
            return ipv4;
          };

          // eslint-disable-next-line max-statements -- TODO
          var parseIPv6 = function (input) {
            var address = [0, 0, 0, 0, 0, 0, 0, 0];
            var pieceIndex = 0;
            var compress = null;
            var pointer = 0;
            var value, length, numbersSeen, ipv4Piece, number, swaps, swap;

            var char = function () {
              return input.charAt(pointer);
            };

            if (char() == ':') {
              if (input.charAt(1) != ':') return;
              pointer += 2;
              pieceIndex++;
              compress = pieceIndex;
            }
            while (char()) {
              if (pieceIndex == 8) return;
              if (char() == ':') {
                if (compress !== null) return;
                pointer++;
                pieceIndex++;
                compress = pieceIndex;
                continue;
              }
              value = length = 0;
              while (length < 4 && HEX.test(char())) {
                value = value * 16 + parseInt(char(), 16);
                pointer++;
                length++;
              }
              if (char() == '.') {
                if (length == 0) return;
                pointer -= length;
                if (pieceIndex > 6) return;
                numbersSeen = 0;
                while (char()) {
                  ipv4Piece = null;
                  if (numbersSeen > 0) {
                    if (char() == '.' && numbersSeen < 4) pointer++;
                    else return;
                  }
                  if (!DIGIT.test(char())) return;
                  while (DIGIT.test(char())) {
                    number = parseInt(char(), 10);
                    if (ipv4Piece === null) ipv4Piece = number;
                    else if (ipv4Piece == 0) return;
                    else ipv4Piece = ipv4Piece * 10 + number;
                    if (ipv4Piece > 255) return;
                    pointer++;
                  }
                  address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
                  numbersSeen++;
                  if (numbersSeen == 2 || numbersSeen == 4) pieceIndex++;
                }
                if (numbersSeen != 4) return;
                break;
              } else if (char() == ':') {
                pointer++;
                if (!char()) return;
              } else if (char()) return;
              address[pieceIndex++] = value;
            }
            if (compress !== null) {
              swaps = pieceIndex - compress;
              pieceIndex = 7;
              while (pieceIndex != 0 && swaps > 0) {
                swap = address[pieceIndex];
                address[pieceIndex--] = address[compress + swaps - 1];
                address[compress + --swaps] = swap;
              }
            } else if (pieceIndex != 8) return;
            return address;
          };

          var findLongestZeroSequence = function (ipv6) {
            var maxIndex = null;
            var maxLength = 1;
            var currStart = null;
            var currLength = 0;
            var index = 0;
            for (; index < 8; index++) {
              if (ipv6[index] !== 0) {
                if (currLength > maxLength) {
                  maxIndex = currStart;
                  maxLength = currLength;
                }
                currStart = null;
                currLength = 0;
              } else {
                if (currStart === null) currStart = index;
                ++currLength;
              }
            }
            if (currLength > maxLength) {
              maxIndex = currStart;
              maxLength = currLength;
            }
            return maxIndex;
          };

          var serializeHost = function (host) {
            var result, index, compress, ignore0;
            // ipv4
            if (typeof host == 'number') {
              result = [];
              for (index = 0; index < 4; index++) {
                result.unshift(host % 256);
                host = floor(host / 256);
              } return result.join('.');
              // ipv6
            } else if (typeof host == 'object') {
              result = '';
              compress = findLongestZeroSequence(host);
              for (index = 0; index < 8; index++) {
                if (ignore0 && host[index] === 0) continue;
                if (ignore0) ignore0 = false;
                if (compress === index) {
                  result += index ? ':' : '::';
                  ignore0 = true;
                } else {
                  result += host[index].toString(16);
                  if (index < 7) result += ':';
                }
              }
              return '[' + result + ']';
            } return host;
          };

          var C0ControlPercentEncodeSet = {};
          var fragmentPercentEncodeSet = assign({}, C0ControlPercentEncodeSet, {
            ' ': 1, '"': 1, '<': 1, '>': 1, '`': 1
          });
          var pathPercentEncodeSet = assign({}, fragmentPercentEncodeSet, {
            '#': 1, '?': 1, '{': 1, '}': 1
          });
          var userinfoPercentEncodeSet = assign({}, pathPercentEncodeSet, {
            '/': 1, ':': 1, ';': 1, '=': 1, '@': 1, '[': 1, '\\': 1, ']': 1, '^': 1, '|': 1
          });

          var percentEncode = function (char, set) {
            var code = codeAt(char, 0);
            return code > 0x20 && code < 0x7F && !has(set, char) ? char : encodeURIComponent(char);
          };

          var specialSchemes = {
            ftp: 21,
            file: null,
            http: 80,
            https: 443,
            ws: 80,
            wss: 443
          };

          var isSpecial = function (url) {
            return has(specialSchemes, url.scheme);
          };

          var includesCredentials = function (url) {
            return url.username != '' || url.password != '';
          };

          var cannotHaveUsernamePasswordPort = function (url) {
            return !url.host || url.cannotBeABaseURL || url.scheme == 'file';
          };

          var isWindowsDriveLetter = function (string, normalized) {
            var second;
            return string.length == 2 && ALPHA.test(string.charAt(0))
              && ((second = string.charAt(1)) == ':' || (!normalized && second == '|'));
          };

          var startsWithWindowsDriveLetter = function (string) {
            var third;
            return string.length > 1 && isWindowsDriveLetter(string.slice(0, 2)) && (
              string.length == 2 ||
              ((third = string.charAt(2)) === '/' || third === '\\' || third === '?' || third === '#')
            );
          };

          var shortenURLsPath = function (url) {
            var path = url.path;
            var pathSize = path.length;
            if (pathSize && (url.scheme != 'file' || pathSize != 1 || !isWindowsDriveLetter(path[0], true))) {
              path.pop();
            }
          };

          var isSingleDot = function (segment) {
            return segment === '.' || segment.toLowerCase() === '%2e';
          };

          var isDoubleDot = function (segment) {
            segment = segment.toLowerCase();
            return segment === '..' || segment === '%2e.' || segment === '.%2e' || segment === '%2e%2e';
          };

          // States:
          var SCHEME_START = {};
          var SCHEME = {};
          var NO_SCHEME = {};
          var SPECIAL_RELATIVE_OR_AUTHORITY = {};
          var PATH_OR_AUTHORITY = {};
          var RELATIVE = {};
          var RELATIVE_SLASH = {};
          var SPECIAL_AUTHORITY_SLASHES = {};
          var SPECIAL_AUTHORITY_IGNORE_SLASHES = {};
          var AUTHORITY = {};
          var HOST = {};
          var HOSTNAME = {};
          var PORT = {};
          var FILE = {};
          var FILE_SLASH = {};
          var FILE_HOST = {};
          var PATH_START = {};
          var PATH = {};
          var CANNOT_BE_A_BASE_URL_PATH = {};
          var QUERY = {};
          var FRAGMENT = {};

          // eslint-disable-next-line max-statements -- TODO
          var parseURL = function (url, input, stateOverride, base) {
            var state = stateOverride || SCHEME_START;
            var pointer = 0;
            var buffer = '';
            var seenAt = false;
            var seenBracket = false;
            var seenPasswordToken = false;
            var codePoints, char, bufferCodePoints, failure;

            if (!stateOverride) {
              url.scheme = '';
              url.username = '';
              url.password = '';
              url.host = null;
              url.port = null;
              url.path = [];
              url.query = null;
              url.fragment = null;
              url.cannotBeABaseURL = false;
              input = input.replace(LEADING_AND_TRAILING_C0_CONTROL_OR_SPACE, '');
            }

            input = input.replace(TAB_AND_NEW_LINE, '');

            codePoints = arrayFrom(input);

            while (pointer <= codePoints.length) {
              char = codePoints[pointer];
              switch (state) {
                case SCHEME_START:
                  if (char && ALPHA.test(char)) {
                    buffer += char.toLowerCase();
                    state = SCHEME;
                  } else if (!stateOverride) {
                    state = NO_SCHEME;
                    continue;
                  } else return INVALID_SCHEME;
                  break;

                case SCHEME:
                  if (char && (ALPHANUMERIC.test(char) || char == '+' || char == '-' || char == '.')) {
                    buffer += char.toLowerCase();
                  } else if (char == ':') {
                    if (stateOverride && (
                      (isSpecial(url) != has(specialSchemes, buffer)) ||
                      (buffer == 'file' && (includesCredentials(url) || url.port !== null)) ||
                      (url.scheme == 'file' && !url.host)
                    )) return;
                    url.scheme = buffer;
                    if (stateOverride) {
                      if (isSpecial(url) && specialSchemes[url.scheme] == url.port) url.port = null;
                      return;
                    }
                    buffer = '';
                    if (url.scheme == 'file') {
                      state = FILE;
                    } else if (isSpecial(url) && base && base.scheme == url.scheme) {
                      state = SPECIAL_RELATIVE_OR_AUTHORITY;
                    } else if (isSpecial(url)) {
                      state = SPECIAL_AUTHORITY_SLASHES;
                    } else if (codePoints[pointer + 1] == '/') {
                      state = PATH_OR_AUTHORITY;
                      pointer++;
                    } else {
                      url.cannotBeABaseURL = true;
                      url.path.push('');
                      state = CANNOT_BE_A_BASE_URL_PATH;
                    }
                  } else if (!stateOverride) {
                    buffer = '';
                    state = NO_SCHEME;
                    pointer = 0;
                    continue;
                  } else return INVALID_SCHEME;
                  break;

                case NO_SCHEME:
                  if (!base || (base.cannotBeABaseURL && char != '#')) return INVALID_SCHEME;
                  if (base.cannotBeABaseURL && char == '#') {
                    url.scheme = base.scheme;
                    url.path = base.path.slice();
                    url.query = base.query;
                    url.fragment = '';
                    url.cannotBeABaseURL = true;
                    state = FRAGMENT;
                    break;
                  }
                  state = base.scheme == 'file' ? FILE : RELATIVE;
                  continue;

                case SPECIAL_RELATIVE_OR_AUTHORITY:
                  if (char == '/' && codePoints[pointer + 1] == '/') {
                    state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                    pointer++;
                  } else {
                    state = RELATIVE;
                    continue;
                  } break;

                case PATH_OR_AUTHORITY:
                  if (char == '/') {
                    state = AUTHORITY;
                    break;
                  } else {
                    state = PATH;
                    continue;
                  }

                case RELATIVE:
                  url.scheme = base.scheme;
                  if (char == EOF) {
                    url.username = base.username;
                    url.password = base.password;
                    url.host = base.host;
                    url.port = base.port;
                    url.path = base.path.slice();
                    url.query = base.query;
                  } else if (char == '/' || (char == '\\' && isSpecial(url))) {
                    state = RELATIVE_SLASH;
                  } else if (char == '?') {
                    url.username = base.username;
                    url.password = base.password;
                    url.host = base.host;
                    url.port = base.port;
                    url.path = base.path.slice();
                    url.query = '';
                    state = QUERY;
                  } else if (char == '#') {
                    url.username = base.username;
                    url.password = base.password;
                    url.host = base.host;
                    url.port = base.port;
                    url.path = base.path.slice();
                    url.query = base.query;
                    url.fragment = '';
                    state = FRAGMENT;
                  } else {
                    url.username = base.username;
                    url.password = base.password;
                    url.host = base.host;
                    url.port = base.port;
                    url.path = base.path.slice();
                    url.path.pop();
                    state = PATH;
                    continue;
                  } break;

                case RELATIVE_SLASH:
                  if (isSpecial(url) && (char == '/' || char == '\\')) {
                    state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                  } else if (char == '/') {
                    state = AUTHORITY;
                  } else {
                    url.username = base.username;
                    url.password = base.password;
                    url.host = base.host;
                    url.port = base.port;
                    state = PATH;
                    continue;
                  } break;

                case SPECIAL_AUTHORITY_SLASHES:
                  state = SPECIAL_AUTHORITY_IGNORE_SLASHES;
                  if (char != '/' || buffer.charAt(pointer + 1) != '/') continue;
                  pointer++;
                  break;

                case SPECIAL_AUTHORITY_IGNORE_SLASHES:
                  if (char != '/' && char != '\\') {
                    state = AUTHORITY;
                    continue;
                  } break;

                case AUTHORITY:
                  if (char == '@') {
                    if (seenAt) buffer = '%40' + buffer;
                    seenAt = true;
                    bufferCodePoints = arrayFrom(buffer);
                    for (var i = 0; i < bufferCodePoints.length; i++) {
                      var codePoint = bufferCodePoints[i];
                      if (codePoint == ':' && !seenPasswordToken) {
                        seenPasswordToken = true;
                        continue;
                      }
                      var encodedCodePoints = percentEncode(codePoint, userinfoPercentEncodeSet);
                      if (seenPasswordToken) url.password += encodedCodePoints;
                      else url.username += encodedCodePoints;
                    }
                    buffer = '';
                  } else if (
                    char == EOF || char == '/' || char == '?' || char == '#' ||
                    (char == '\\' && isSpecial(url))
                  ) {
                    if (seenAt && buffer == '') return INVALID_AUTHORITY;
                    pointer -= arrayFrom(buffer).length + 1;
                    buffer = '';
                    state = HOST;
                  } else buffer += char;
                  break;

                case HOST:
                case HOSTNAME:
                  if (stateOverride && url.scheme == 'file') {
                    state = FILE_HOST;
                    continue;
                  } else if (char == ':' && !seenBracket) {
                    if (buffer == '') return INVALID_HOST;
                    failure = parseHost(url, buffer);
                    if (failure) return failure;
                    buffer = '';
                    state = PORT;
                    if (stateOverride == HOSTNAME) return;
                  } else if (
                    char == EOF || char == '/' || char == '?' || char == '#' ||
                    (char == '\\' && isSpecial(url))
                  ) {
                    if (isSpecial(url) && buffer == '') return INVALID_HOST;
                    if (stateOverride && buffer == '' && (includesCredentials(url) || url.port !== null)) return;
                    failure = parseHost(url, buffer);
                    if (failure) return failure;
                    buffer = '';
                    state = PATH_START;
                    if (stateOverride) return;
                    continue;
                  } else {
                    if (char == '[') seenBracket = true;
                    else if (char == ']') seenBracket = false;
                    buffer += char;
                  } break;

                case PORT:
                  if (DIGIT.test(char)) {
                    buffer += char;
                  } else if (
                    char == EOF || char == '/' || char == '?' || char == '#' ||
                    (char == '\\' && isSpecial(url)) ||
                    stateOverride
                  ) {
                    if (buffer != '') {
                      var port = parseInt(buffer, 10);
                      if (port > 0xFFFF) return INVALID_PORT;
                      url.port = (isSpecial(url) && port === specialSchemes[url.scheme]) ? null : port;
                      buffer = '';
                    }
                    if (stateOverride) return;
                    state = PATH_START;
                    continue;
                  } else return INVALID_PORT;
                  break;

                case FILE:
                  url.scheme = 'file';
                  if (char == '/' || char == '\\') state = FILE_SLASH;
                  else if (base && base.scheme == 'file') {
                    if (char == EOF) {
                      url.host = base.host;
                      url.path = base.path.slice();
                      url.query = base.query;
                    } else if (char == '?') {
                      url.host = base.host;
                      url.path = base.path.slice();
                      url.query = '';
                      state = QUERY;
                    } else if (char == '#') {
                      url.host = base.host;
                      url.path = base.path.slice();
                      url.query = base.query;
                      url.fragment = '';
                      state = FRAGMENT;
                    } else {
                      if (!startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {
                        url.host = base.host;
                        url.path = base.path.slice();
                        shortenURLsPath(url);
                      }
                      state = PATH;
                      continue;
                    }
                  } else {
                    state = PATH;
                    continue;
                  } break;

                case FILE_SLASH:
                  if (char == '/' || char == '\\') {
                    state = FILE_HOST;
                    break;
                  }
                  if (base && base.scheme == 'file' && !startsWithWindowsDriveLetter(codePoints.slice(pointer).join(''))) {
                    if (isWindowsDriveLetter(base.path[0], true)) url.path.push(base.path[0]);
                    else url.host = base.host;
                  }
                  state = PATH;
                  continue;

                case FILE_HOST:
                  if (char == EOF || char == '/' || char == '\\' || char == '?' || char == '#') {
                    if (!stateOverride && isWindowsDriveLetter(buffer)) {
                      state = PATH;
                    } else if (buffer == '') {
                      url.host = '';
                      if (stateOverride) return;
                      state = PATH_START;
                    } else {
                      failure = parseHost(url, buffer);
                      if (failure) return failure;
                      if (url.host == 'localhost') url.host = '';
                      if (stateOverride) return;
                      buffer = '';
                      state = PATH_START;
                    } continue;
                  } else buffer += char;
                  break;

                case PATH_START:
                  if (isSpecial(url)) {
                    state = PATH;
                    if (char != '/' && char != '\\') continue;
                  } else if (!stateOverride && char == '?') {
                    url.query = '';
                    state = QUERY;
                  } else if (!stateOverride && char == '#') {
                    url.fragment = '';
                    state = FRAGMENT;
                  } else if (char != EOF) {
                    state = PATH;
                    if (char != '/') continue;
                  } break;

                case PATH:
                  if (
                    char == EOF || char == '/' ||
                    (char == '\\' && isSpecial(url)) ||
                    (!stateOverride && (char == '?' || char == '#'))
                  ) {
                    if (isDoubleDot(buffer)) {
                      shortenURLsPath(url);
                      if (char != '/' && !(char == '\\' && isSpecial(url))) {
                        url.path.push('');
                      }
                    } else if (isSingleDot(buffer)) {
                      if (char != '/' && !(char == '\\' && isSpecial(url))) {
                        url.path.push('');
                      }
                    } else {
                      if (url.scheme == 'file' && !url.path.length && isWindowsDriveLetter(buffer)) {
                        if (url.host) url.host = '';
                        buffer = buffer.charAt(0) + ':'; // normalize windows drive letter
                      }
                      url.path.push(buffer);
                    }
                    buffer = '';
                    if (url.scheme == 'file' && (char == EOF || char == '?' || char == '#')) {
                      while (url.path.length > 1 && url.path[0] === '') {
                        url.path.shift();
                      }
                    }
                    if (char == '?') {
                      url.query = '';
                      state = QUERY;
                    } else if (char == '#') {
                      url.fragment = '';
                      state = FRAGMENT;
                    }
                  } else {
                    buffer += percentEncode(char, pathPercentEncodeSet);
                  } break;

                case CANNOT_BE_A_BASE_URL_PATH:
                  if (char == '?') {
                    url.query = '';
                    state = QUERY;
                  } else if (char == '#') {
                    url.fragment = '';
                    state = FRAGMENT;
                  } else if (char != EOF) {
                    url.path[0] += percentEncode(char, C0ControlPercentEncodeSet);
                  } break;

                case QUERY:
                  if (!stateOverride && char == '#') {
                    url.fragment = '';
                    state = FRAGMENT;
                  } else if (char != EOF) {
                    if (char == "'" && isSpecial(url)) url.query += '%27';
                    else if (char == '#') url.query += '%23';
                    else url.query += percentEncode(char, C0ControlPercentEncodeSet);
                  } break;

                case FRAGMENT:
                  if (char != EOF) url.fragment += percentEncode(char, fragmentPercentEncodeSet);
                  break;
              }

              pointer++;
            }
          };

          // `URL` constructor
          // https://url.spec.whatwg.org/#url-class
          var URLConstructor = function URL (url /* , base */) {
            var that = anInstance(this, URLConstructor, 'URL');
            var base = arguments.length > 1 ? arguments[1] : undefined;
            var urlString = $toString(url);
            var state = setInternalState(that, { type: 'URL' });
            var baseState, failure;
            if (base !== undefined) {
              if (base instanceof URLConstructor) baseState = getInternalURLState(base);
              else {
                failure = parseURL(baseState = {}, $toString(base));
                if (failure) throw TypeError(failure);
              }
            }
            failure = parseURL(state, urlString, null, baseState);
            if (failure) throw TypeError(failure);
            var searchParams = state.searchParams = new URLSearchParams();
            var searchParamsState = getInternalSearchParamsState(searchParams);
            searchParamsState.updateSearchParams(state.query);
            searchParamsState.updateURL = function () {
              state.query = String(searchParams) || null;
            };
            if (!DESCRIPTORS) {
              that.href = serializeURL.call(that);
              that.origin = getOrigin.call(that);
              that.protocol = getProtocol.call(that);
              that.username = getUsername.call(that);
              that.password = getPassword.call(that);
              that.host = getHost.call(that);
              that.hostname = getHostname.call(that);
              that.port = getPort.call(that);
              that.pathname = getPathname.call(that);
              that.search = getSearch.call(that);
              that.searchParams = getSearchParams.call(that);
              that.hash = getHash.call(that);
            }
          };

          var URLPrototype = URLConstructor.prototype;

          var serializeURL = function () {
            var url = getInternalURLState(this);
            var scheme = url.scheme;
            var username = url.username;
            var password = url.password;
            var host = url.host;
            var port = url.port;
            var path = url.path;
            var query = url.query;
            var fragment = url.fragment;
            var output = scheme + ':';
            if (host !== null) {
              output += '//';
              if (includesCredentials(url)) {
                output += username + (password ? ':' + password : '') + '@';
              }
              output += serializeHost(host);
              if (port !== null) output += ':' + port;
            } else if (scheme == 'file') output += '//';
            output += url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';
            if (query !== null) output += '?' + query;
            if (fragment !== null) output += '#' + fragment;
            return output;
          };

          var getOrigin = function () {
            var url = getInternalURLState(this);
            var scheme = url.scheme;
            var port = url.port;
            if (scheme == 'blob') try {
              return new URLConstructor(scheme.path[0]).origin;
            } catch (error) {
              return 'null';
            }
            if (scheme == 'file' || !isSpecial(url)) return 'null';
            return scheme + '://' + serializeHost(url.host) + (port !== null ? ':' + port : '');
          };

          var getProtocol = function () {
            return getInternalURLState(this).scheme + ':';
          };

          var getUsername = function () {
            return getInternalURLState(this).username;
          };

          var getPassword = function () {
            return getInternalURLState(this).password;
          };

          var getHost = function () {
            var url = getInternalURLState(this);
            var host = url.host;
            var port = url.port;
            return host === null ? ''
              : port === null ? serializeHost(host)
                : serializeHost(host) + ':' + port;
          };

          var getHostname = function () {
            var host = getInternalURLState(this).host;
            return host === null ? '' : serializeHost(host);
          };

          var getPort = function () {
            var port = getInternalURLState(this).port;
            return port === null ? '' : String(port);
          };

          var getPathname = function () {
            var url = getInternalURLState(this);
            var path = url.path;
            return url.cannotBeABaseURL ? path[0] : path.length ? '/' + path.join('/') : '';
          };

          var getSearch = function () {
            var query = getInternalURLState(this).query;
            return query ? '?' + query : '';
          };

          var getSearchParams = function () {
            return getInternalURLState(this).searchParams;
          };

          var getHash = function () {
            var fragment = getInternalURLState(this).fragment;
            return fragment ? '#' + fragment : '';
          };

          var accessorDescriptor = function (getter, setter) {
            return { get: getter, set: setter, configurable: true, enumerable: true };
          };

          if (DESCRIPTORS) {
            defineProperties(URLPrototype, {
              // `URL.prototype.href` accessors pair
              // https://url.spec.whatwg.org/#dom-url-href
              href: accessorDescriptor(serializeURL, function (href) {
                var url = getInternalURLState(this);
                var urlString = $toString(href);
                var failure = parseURL(url, urlString);
                if (failure) throw TypeError(failure);
                getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
              }),
              // `URL.prototype.origin` getter
              // https://url.spec.whatwg.org/#dom-url-origin
              origin: accessorDescriptor(getOrigin),
              // `URL.prototype.protocol` accessors pair
              // https://url.spec.whatwg.org/#dom-url-protocol
              protocol: accessorDescriptor(getProtocol, function (protocol) {
                var url = getInternalURLState(this);
                parseURL(url, $toString(protocol) + ':', SCHEME_START);
              }),
              // `URL.prototype.username` accessors pair
              // https://url.spec.whatwg.org/#dom-url-username
              username: accessorDescriptor(getUsername, function (username) {
                var url = getInternalURLState(this);
                var codePoints = arrayFrom($toString(username));
                if (cannotHaveUsernamePasswordPort(url)) return;
                url.username = '';
                for (var i = 0; i < codePoints.length; i++) {
                  url.username += percentEncode(codePoints[i], userinfoPercentEncodeSet);
                }
              }),
              // `URL.prototype.password` accessors pair
              // https://url.spec.whatwg.org/#dom-url-password
              password: accessorDescriptor(getPassword, function (password) {
                var url = getInternalURLState(this);
                var codePoints = arrayFrom($toString(password));
                if (cannotHaveUsernamePasswordPort(url)) return;
                url.password = '';
                for (var i = 0; i < codePoints.length; i++) {
                  url.password += percentEncode(codePoints[i], userinfoPercentEncodeSet);
                }
              }),
              // `URL.prototype.host` accessors pair
              // https://url.spec.whatwg.org/#dom-url-host
              host: accessorDescriptor(getHost, function (host) {
                var url = getInternalURLState(this);
                if (url.cannotBeABaseURL) return;
                parseURL(url, $toString(host), HOST);
              }),
              // `URL.prototype.hostname` accessors pair
              // https://url.spec.whatwg.org/#dom-url-hostname
              hostname: accessorDescriptor(getHostname, function (hostname) {
                var url = getInternalURLState(this);
                if (url.cannotBeABaseURL) return;
                parseURL(url, $toString(hostname), HOSTNAME);
              }),
              // `URL.prototype.port` accessors pair
              // https://url.spec.whatwg.org/#dom-url-port
              port: accessorDescriptor(getPort, function (port) {
                var url = getInternalURLState(this);
                if (cannotHaveUsernamePasswordPort(url)) return;
                port = $toString(port);
                if (port == '') url.port = null;
                else parseURL(url, port, PORT);
              }),
              // `URL.prototype.pathname` accessors pair
              // https://url.spec.whatwg.org/#dom-url-pathname
              pathname: accessorDescriptor(getPathname, function (pathname) {
                var url = getInternalURLState(this);
                if (url.cannotBeABaseURL) return;
                url.path = [];
                parseURL(url, $toString(pathname), PATH_START);
              }),
              // `URL.prototype.search` accessors pair
              // https://url.spec.whatwg.org/#dom-url-search
              search: accessorDescriptor(getSearch, function (search) {
                var url = getInternalURLState(this);
                search = $toString(search);
                if (search == '') {
                  url.query = null;
                } else {
                  if ('?' == search.charAt(0)) search = search.slice(1);
                  url.query = '';
                  parseURL(url, search, QUERY);
                }
                getInternalSearchParamsState(url.searchParams).updateSearchParams(url.query);
              }),
              // `URL.prototype.searchParams` getter
              // https://url.spec.whatwg.org/#dom-url-searchparams
              searchParams: accessorDescriptor(getSearchParams),
              // `URL.prototype.hash` accessors pair
              // https://url.spec.whatwg.org/#dom-url-hash
              hash: accessorDescriptor(getHash, function (hash) {
                var url = getInternalURLState(this);
                hash = $toString(hash);
                if (hash == '') {
                  url.fragment = null;
                  return;
                }
                if ('#' == hash.charAt(0)) hash = hash.slice(1);
                url.fragment = '';
                parseURL(url, hash, FRAGMENT);
              })
            });
          }

          // `URL.prototype.toJSON` method
          // https://url.spec.whatwg.org/#dom-url-tojson
          redefine(URLPrototype, 'toJSON', function toJSON () {
            return serializeURL.call(this);
          }, { enumerable: true });

          // `URL.prototype.toString` method
          // https://url.spec.whatwg.org/#URL-stringification-behavior
          redefine(URLPrototype, 'toString', function toString () {
            return serializeURL.call(this);
          }, { enumerable: true });

          if (NativeURL) {
            var nativeCreateObjectURL = NativeURL.createObjectURL;
            var nativeRevokeObjectURL = NativeURL.revokeObjectURL;
            // `URL.createObjectURL` method
            // https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL
            // eslint-disable-next-line no-unused-vars -- required for `.length`
            if (nativeCreateObjectURL) redefine(URLConstructor, 'createObjectURL', function createObjectURL (blob) {
              return nativeCreateObjectURL.apply(NativeURL, arguments);
            });
            // `URL.revokeObjectURL` method
            // https://developer.mozilla.org/en-US/docs/Web/API/URL/revokeObjectURL
            // eslint-disable-next-line no-unused-vars -- required for `.length`
            if (nativeRevokeObjectURL) redefine(URLConstructor, 'revokeObjectURL', function revokeObjectURL (url) {
              return nativeRevokeObjectURL.apply(NativeURL, arguments);
            });
          }

          setToStringTag(URLConstructor, 'URL');

          $({ global: true, forced: !USE_NATIVE_URL, sham: !DESCRIPTORS }, {
            URL: URLConstructor
          });


          /***/
        }),

/***/ 462:
/***/ (() => {

          /* (ignored) */

          /***/
        }),

/***/ 6029:
/***/ (() => {

          /* (ignored) */

          /***/
        })

      /******/
    });
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__ (moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
        /******/
      }
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
        /******/
      };
/******/
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
      /******/
    }
/******/
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
        /******/
      };
      /******/
    })();
/******/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for (var key in definition) {
/******/ 				if (__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
            /******/
          }
          /******/
        }
        /******/
      };
      /******/
    })();
/******/
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function () {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
          /******/
        } catch (e) {
/******/ 				if (typeof window === 'object') return window;
          /******/
        }
        /******/
      })();
      /******/
    })();
/******/
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
      /******/
    })();
/******/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
          /******/
        }
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
        /******/
      };
      /******/
    })();
    /******/
    /************************************************************************/
    var __webpack_exports__ = {};
    // This entry need to be wrapped in an IIFE because it need to be in strict mode.
    (() => {
      "use strict";
      // ESM COMPAT FLAG
      __webpack_require__.r(__webpack_exports__);

      // EXPORTS
      __webpack_require__.d(__webpack_exports__, {
        "AACDepay": () => (/* reexport */ AACDepay),
        "BasicDepay": () => (/* reexport */ BasicDepay),
        "CanvasSink": () => (/* reexport */ CanvasSink),
        "H264Depay": () => (/* reexport */ H264Depay),
        "Html5CanvasPipeline": () => (/* reexport */ Html5CanvasPipeline),
        "Html5VideoMetadataPipeline": () => (/* reexport */ Html5VideoMetadataPipeline),
        "Html5VideoPipeline": () => (/* reexport */ Html5VideoPipeline),
        "HttpMsePipeline": () => (/* reexport */ HttpMsePipeline),
        "HttpSource": () => (/* reexport */ HttpSource),
        "Inspector": () => (/* reexport */ Inspector),
        "JPEGDepay": () => (/* reexport */ JPEGDepay),
        "MessageType": () => (/* reexport */ MessageType),
        "MetadataPipeline": () => (/* reexport */ MetadataPipeline),
        "Mp4Capture": () => (/* reexport */ Mp4Capture),
        "Mp4Muxer": () => (/* reexport */ Mp4Muxer),
        "MseSink": () => (/* reexport */ MseSink),
        "ONVIFDepay": () => (/* reexport */ ONVIFDepay),
        "Pipeline": () => (/* reexport */ Pipeline),
        "RTCPPacketType": () => (/* reexport */ RTCPPacketType),
        "RTSPResponseError": () => (/* reexport */ RTSPResponseError),
        "RTSP_METHOD": () => (/* reexport */ RTSP_METHOD),
        "RtspMjpegPipeline": () => (/* reexport */ RtspMjpegPipeline),
        "RtspMp4Pipeline": () => (/* reexport */ RtspMp4Pipeline),
        "RtspParser": () => (/* reexport */ RtspParser),
        "RtspPipeline": () => (/* reexport */ RtspPipeline),
        "RtspSession": () => (/* reexport */ RtspSession),
        "SDESItem": () => (/* reexport */ SDESItem),
        "SR": () => (/* reexport */ SR),
        "Scheduler": () => (/* reexport */ Scheduler),
        "Sink": () => (/* reexport */ Sink),
        "Source": () => (/* reexport */ Source),
        "Tube": () => (/* reexport */ Tube),
        "WSSource": () => (/* reexport */ WSSource),
        "WsSdpPipeline": () => (/* reexport */ WsSdpPipeline),
        "addRTSPRetry": () => (/* reexport */ addRTSPRetry),
        "bodyOffset": () => (/* reexport */ bodyOffset),
        "cSrc": () => (/* reexport */ cSrc),
        "cSrcCount": () => (/* reexport */ cSrcCount),
        "components": () => (/* reexport */ index_browser_namespaceObject),
        "connectionEnded": () => (/* reexport */ connectionEnded),
        "contentBase": () => (/* reexport */ contentBase),
        "contentLocation": () => (/* reexport */ contentLocation),
        "createTransform": () => (/* reexport */ createTransform),
        "extHeader": () => (/* reexport */ extHeader),
        "extHeaderLength": () => (/* reexport */ extHeaderLength),
        "extension": () => (/* reexport */ extension),
        "extractHeaderValue": () => (/* reexport */ extractHeaderValue),
        "extractURIs": () => (/* reexport */ extractURIs),
        "getTime": () => (/* reexport */ getTime),
        "isRtcpApp": () => (/* reexport */ isRtcpApp),
        "isRtcpBye": () => (/* reexport */ isRtcpBye),
        "isRtcpRR": () => (/* reexport */ isRtcpRR),
        "isRtcpSDES": () => (/* reexport */ isRtcpSDES),
        "isRtcpSR": () => (/* reexport */ isRtcpSR),
        "marker": () => (/* reexport */ marker),
        "messageFromBuffer": () => (/* reexport */ messageFromBuffer),
        "padding": () => (/* reexport */ padding),
        "parse": () => (/* reexport */ sdp_parse),
        "parseRtcp": () => (/* reexport */ parseRtcp),
        "payload": () => (/* reexport */ payload),
        "payloadType": () => (/* reexport */ payloadType),
        "pipelines": () => (/* reexport */ pipelines_index_browser_namespaceObject),
        "range": () => (/* reexport */ range),
        "rtcpMessageFromBuffer": () => (/* reexport */ rtcpMessageFromBuffer),
        "sSrc": () => (/* reexport */ sSrc),
        "sequence": () => (/* reexport */ sequence),
        "sequenceNumber": () => (/* reexport */ sequenceNumber),
        "sessionId": () => (/* reexport */ sessionId),
        "sessionTimeout": () => (/* reexport */ sessionTimeout),
        "statusCode": () => (/* reexport */ statusCode),
        "timestamp": () => (/* reexport */ timestamp),
        "utils": () => (/* reexport */ utils_index_browser_namespaceObject),
        "version": () => (/* reexport */ version)
      });

      // NAMESPACE OBJECT: ./lib/components/index.browser.ts
      var index_browser_namespaceObject = {};
      __webpack_require__.r(index_browser_namespaceObject);
      __webpack_require__.d(index_browser_namespaceObject, {
        "AACDepay": () => (AACDepay),
        "BasicDepay": () => (BasicDepay),
        "CanvasSink": () => (CanvasSink),
        "H264Depay": () => (H264Depay),
        "HttpSource": () => (HttpSource),
        "Inspector": () => (Inspector),
        "JPEGDepay": () => (JPEGDepay),
        "MessageType": () => (MessageType),
        "Mp4Capture": () => (Mp4Capture),
        "Mp4Muxer": () => (Mp4Muxer),
        "MseSink": () => (MseSink),
        "ONVIFDepay": () => (ONVIFDepay),
        "RTSPResponseError": () => (RTSPResponseError),
        "RTSP_METHOD": () => (RTSP_METHOD),
        "RtspParser": () => (RtspParser),
        "RtspSession": () => (RtspSession),
        "Sink": () => (Sink),
        "Source": () => (Source),
        "Tube": () => (Tube),
        "WSSource": () => (WSSource),
        "createTransform": () => (createTransform)
      });

      // NAMESPACE OBJECT: ./lib/pipelines/index.browser.ts
      var pipelines_index_browser_namespaceObject = {};
      __webpack_require__.r(pipelines_index_browser_namespaceObject);
      __webpack_require__.d(pipelines_index_browser_namespaceObject, {
        "Html5CanvasPipeline": () => (Html5CanvasPipeline),
        "Html5VideoMetadataPipeline": () => (Html5VideoMetadataPipeline),
        "Html5VideoPipeline": () => (Html5VideoPipeline),
        "HttpMsePipeline": () => (HttpMsePipeline),
        "MetadataPipeline": () => (MetadataPipeline),
        "Pipeline": () => (Pipeline),
        "RtspMjpegPipeline": () => (RtspMjpegPipeline),
        "RtspMp4Pipeline": () => (RtspMp4Pipeline),
        "RtspPipeline": () => (RtspPipeline),
        "WsSdpPipeline": () => (WsSdpPipeline)
      });

      // NAMESPACE OBJECT: ./lib/utils/index.browser.ts
      var utils_index_browser_namespaceObject = {};
      __webpack_require__.r(utils_index_browser_namespaceObject);
      __webpack_require__.d(utils_index_browser_namespaceObject, {
        "RTCPPacketType": () => (RTCPPacketType),
        "SDESItem": () => (SDESItem),
        "SR": () => (SR),
        "Scheduler": () => (Scheduler),
        "addRTSPRetry": () => (addRTSPRetry),
        "bodyOffset": () => (bodyOffset),
        "cSrc": () => (cSrc),
        "cSrcCount": () => (cSrcCount),
        "connectionEnded": () => (connectionEnded),
        "contentBase": () => (contentBase),
        "contentLocation": () => (contentLocation),
        "extHeader": () => (extHeader),
        "extHeaderLength": () => (extHeaderLength),
        "extension": () => (extension),
        "extractHeaderValue": () => (extractHeaderValue),
        "extractURIs": () => (extractURIs),
        "getTime": () => (getTime),
        "isRtcpApp": () => (isRtcpApp),
        "isRtcpBye": () => (isRtcpBye),
        "isRtcpRR": () => (isRtcpRR),
        "isRtcpSDES": () => (isRtcpSDES),
        "isRtcpSR": () => (isRtcpSR),
        "marker": () => (marker),
        "messageFromBuffer": () => (messageFromBuffer),
        "padding": () => (padding),
        "parse": () => (sdp_parse),
        "parseRtcp": () => (parseRtcp),
        "payload": () => (payload),
        "payloadType": () => (payloadType),
        "range": () => (range),
        "rtcpMessageFromBuffer": () => (rtcpMessageFromBuffer),
        "sSrc": () => (sSrc),
        "sequence": () => (sequence),
        "sequenceNumber": () => (sequenceNumber),
        "sessionId": () => (sessionId),
        "sessionTimeout": () => (sessionTimeout),
        "statusCode": () => (statusCode),
        "timestamp": () => (timestamp),
        "version": () => (version)
      });

      // EXTERNAL MODULE: ./.yarn/cache/stream-browserify-npm-3.0.0-4c0bd97245-4c47ef64d6.zip/node_modules/stream-browserify/index.js
      var stream_browserify = __webpack_require__(8981);
      ;// CONCATENATED MODULE: ./lib/components/helpers/stream-factory.ts
/* provided dependency */ var Buffer = __webpack_require__(7866)["Buffer"];

      class StreamFactory {
        /**
         * Creates a writable stream that sends all messages written to the stream
         * to a callback function and then considers it written.
         * @param fn  The callback to be invoked on the message
         */
        static consumer (fn = () => {
          /* */
        }) {
          return new stream_browserify.Writable({
            objectMode: true,

            write (msg, _encoding, callback) {
              fn(msg);
              callback();
            }

          });
        }

        static peeker (fn) {
          if (typeof fn !== 'function') {
            throw new Error('you must supply a function');
          }

          return new stream_browserify.Transform({
            objectMode: true,

            transform (msg, _encoding, callback) {
              fn(msg);
              callback(undefined, msg);
            }

          });
        }
        /**
         * Creates a readable stream that sends a message for each element of an array.
         * @param arr  The array with elements to be turned into a stream.
         */


        static producer (messages) {
          let counter = 0;
          return new stream_browserify.Readable({
            objectMode: true,

            read () {
              if (messages !== undefined) {
                if (counter < messages.length) {
                  this.push(messages[counter++]);
                } else {
                  // End the stream
                  this.push(null);
                }
              }
            }

          });
        }

        static recorder (type, fileStream) {
          return new stream_browserify.Transform({
            objectMode: true,

            transform (msg, encoding, callback) {
              const timestamp = Date.now(); // Replace binary data with base64 string

              const message = Object.assign({}, msg, {
                data: msg.data.toString('base64')
              });
              fileStream.write(JSON.stringify({
                type,
                timestamp,
                message
              }, null, 2));
              fileStream.write(',\n');
              callback(undefined, msg);
            }

          });
        }
        /**
         * Yield binary messages from JSON packet array until depleted.
         * @return {Generator} Returns a JSON packet iterator.
         */


        static replayer (packets) {
          let packetCounter = 0;
          let lastTimestamp = packets[0].timestamp;
          return new stream_browserify.Readable({
            objectMode: true,

            read () {
              const packet = packets[packetCounter++];

              if (packet) {
                const {
                  type,
                  timestamp,
                  message
                } = packet;
                const delay = timestamp - lastTimestamp;
                lastTimestamp = timestamp;

                if (message) {
                  const data = message.data ? Buffer.from(message.data, 'base64') : Buffer.alloc(0);
                  const msg = Object.assign({}, message, {
                    data
                  });
                  this.push({
                    type,
                    delay,
                    msg
                  });
                } else {
                  this.push({
                    type,
                    delay,
                    msg: null
                  });
                }
              } else {
                this.push(null);
              }
            }

          });
        }

      }
      ;// CONCATENATED MODULE: ./lib/components/component.ts
      function _defineProperty (obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }




      /**
       * Component
       *
       * A component is a set of bi-directional streams consisting of an 'incoming'
       * and 'outgoing' stream.
       *
       * They contain references to other components so they can form a linked list of
       * components, i.e. a pipeline. When linking components, the incoming and
       * outgoing streams are piped, so that data flowing through the incoming stream
       * is transfered to the next component, and data in the outgoing stream flows
       * to the previous component.
       *
       * Components at the end of such a pipeline typically connect the incoming and
       * outgoing streams to a data source or data sink.
       *
       * Typically, for a component that is connected to two other components, both
       * incoming and outgoing will be Transform streams. For a source, 'incoming'
       * will be a Readable stream and 'outgoing' a Writable stream, while for a sink
       * it is reversed. Both source and sink could also use a single Duplex stream,
       * with incoming === outgoing.
       *
       * server end-point                          client end-point
       *  /-------------      -----------------      -------------\
       *  |  Writable  |  <-  |   Transform   |  <-  |  Readable  |
       *  |   source   |      |      tube     |      |    sink    |
       *  |  Readable  |  ->  |   Transform   |  ->  |  Writable  |
       *  \-------------      -----------------      -------------/
       */
      class AbstractComponent {
        constructor() {
          _defineProperty(this, "incoming", void 0);

          _defineProperty(this, "outgoing", void 0);

          _defineProperty(this, "next", void 0);

          _defineProperty(this, "prev", void 0);

          _defineProperty(this, "_incomingErrorHandler", void 0);

          _defineProperty(this, "_outgoingErrorHandler", void 0);
        }

      }
      /**
       * Source component
       *
       * A component that can only have a next component connected (no previous) and
       * where the incoming and outgoing streams are connected to an external data
       * source.
       */


      class Source extends AbstractComponent {
        /**
         * Set up a source component that has a message list as data source.
         *
         * @param messages - List of objects (with data property) to emit on the
         * incoming stream
         */
        static fromMessages (messages) {
          const component = new Source(StreamFactory.producer(messages), StreamFactory.consumer());
          return component;
        }

        constructor(incoming = new stream_browserify.Readable({
          objectMode: true
        }), outgoing = new stream_browserify.Writable({
          objectMode: true
        })) {
          super();

          _defineProperty(this, "incoming", void 0);

          _defineProperty(this, "outgoing", void 0);

          _defineProperty(this, "next", void 0);

          _defineProperty(this, "prev", void 0);

          this.incoming = incoming;
          this.outgoing = outgoing;
          this.next = null;
          this.prev = null;
        }
        /**
         * Attach another component so the the 'down' stream flows into the
         * next component 'down' stream and the 'up' stream of the other component
         * flows into the 'up' stream of this component. This is what establishes the
         * meaning of 'up' and 'down'.
         * @param  next - The component to connect.
         * @return A reference to the connected component.
         *
         *      -------------- pipe --------------
         *  <-  |  outgoing  |  <-  |  outgoing  | <-
         *      |    this    |      |    next    |
         *  ->  |  incoming  |  ->  |  incoming  | ->
         *      -------------- pipe --------------
         */


        connect (next) {
          // If the next component is not there, we want to return this component
          // so that it is possible to continue to chain. If there is a next component,
          // but this component already has a next one, or the next one already has a
          // previous component, throw an error.
          if (next === null) {
            return this;
          } else if (this.next !== null || next.prev !== null) {
            throw new Error('connection failed: component(s) already connected');
          }

          if (!this.incoming.readable || !this.outgoing.writable) {
            throw new Error('connection failed: this component not compatible');
          }

          if (!next.incoming.writable || !next.outgoing.readable) {
            throw new Error('connection failed: next component not compatible');
          }

          try {
            this.incoming.pipe(next.incoming);
            next.outgoing.pipe(this.outgoing);
          } catch (e) {
            throw new Error(`connection failed: ${e.message}`);
          }
          /**
           * Propagate errors back upstream, this assures an error will be propagated
           * to all previous streams (but not further than any endpoints). What happens
           * when an error is emitted on a stream is up to the stream's implementation.
           */


          const incomingErrorHandler = err => {
            this.incoming.emit('error', err);
          };

          next.incoming.on('error', incomingErrorHandler);

          const outgoingErrorHandler = err => {
            next.outgoing.emit('error', err);
          };

          this.outgoing.on('error', outgoingErrorHandler); // Keep a bidirectional linked list of components by storing
          // a reference to the next component and the listeners that we set up.

          this.next = next;
          next.prev = this;
          this._incomingErrorHandler = incomingErrorHandler;
          this._outgoingErrorHandler = outgoingErrorHandler;
          return next;
        }
        /**
         * Disconnect the next connected component. When there is no next component
         * the function will just do nothing.
         * @return {Component} - A reference to this component.
         */


        disconnect () {
          const next = this.next;

          if (next !== null) {
            this.incoming.unpipe(next.incoming);
            next.outgoing.unpipe(this.outgoing);

            if (typeof this._incomingErrorHandler !== 'undefined') {
              next.incoming.removeListener('error', this._incomingErrorHandler);
            }

            if (typeof this._outgoingErrorHandler !== 'undefined') {
              this.outgoing.removeListener('error', this._outgoingErrorHandler);
            }

            this.next = null;
            next.prev = null;
            delete this._incomingErrorHandler;
            delete this._outgoingErrorHandler;
          }

          return this;
        }

      }
      /**
       * Tube component
       *
       * A component where both incoming and outgoing streams are Duplex streams, and
       * can be connected to a previous and next component, typically in the middle of
       * a pipeline.
       */

      class Tube extends Source {
        /**
         * Create a component that calls a handler function for each message passing
         * through, but otherwise just passes data through.
         *
         * Can be used to log messages passing through a pipeline.
         */
        static fromHandlers (fnIncoming, fnOutgoing) {
          const incomingStream = fnIncoming ? StreamFactory.peeker(fnIncoming) : undefined;
          const outgoingStream = fnOutgoing ? StreamFactory.peeker(fnOutgoing) : undefined;
          return new Tube(incomingStream, outgoingStream);
        }

        constructor(incoming = new stream_browserify.PassThrough({
          objectMode: true
        }), outgoing = new stream_browserify.PassThrough({
          objectMode: true
        })) {
          super(incoming, outgoing);

          _defineProperty(this, "incoming", void 0);

          _defineProperty(this, "outgoing", void 0);

          this.incoming = incoming;
          this.outgoing = outgoing;
        }

      }
      /**
       * Sink component
       *
       * A component that can only have a previous component connected (no next) and
       * where the incoming and outgoing streams are connected to an external data
       * source.
       */

      class Sink extends AbstractComponent {
        /**
         * Create a component that swallows incoming data (calling fn on it).  To
         * print data, you would use fn = console.log.
         *
         * @param fn - The callback to use for the incoming data.
         */
        static fromHandler (fn) {
          const component = new Sink(StreamFactory.consumer(fn), StreamFactory.producer(undefined)); // A sink should propagate when stream is ending.

          component.incoming.on('finish', () => {
            component.outgoing.push(null);
          });
          return component;
        }

        constructor(incoming = new stream_browserify.Writable({
          objectMode: true
        }), outgoing = new stream_browserify.Readable({
          objectMode: true
        })) {
          super();

          _defineProperty(this, "incoming", void 0);

          _defineProperty(this, "outgoing", void 0);

          _defineProperty(this, "next", void 0);

          _defineProperty(this, "prev", void 0);

          this.incoming = incoming;
          this.outgoing = outgoing;
          this.next = null;
          this.prev = null;
        }

        connect () {
          throw new Error('connection failed: attempting to connect after a sink');
        }

        disconnect () {
          return this;
        }

      }
      ;// CONCATENATED MODULE: ./lib/utils/bits.ts
      const POS = [0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01];
      ;// CONCATENATED MODULE: ./lib/utils/protocols/rtp.ts
/* provided dependency */ var rtp_Buffer = __webpack_require__(7866)["Buffer"];
      // Real Time Protocol (RTP)
      // https://tools.ietf.org/html/rfc3550#section-5.1

      /*
      RTP Fixed Header Fields
      
        0               1               2               3
        0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        |V=2|P|X|  CC   |M|     PT      |       sequence number         |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        |                           timestamp                           |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        |           synchronization source (SSRC) identifier            |
        +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
        |            contributing source (CSRC) identifiers             |
        |                             ....                              |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        |   profile-specific ext. id    | profile-specific ext. length  |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        |                 profile-specific extension                    |
        |                             ....                              |
        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      */

      const version = buffer => {
        return buffer[0] >>> 6;
      };
      const padding = buffer => {
        return !!(buffer[0] & POS[2]);
      };
      const extension = buffer => {
        return !!(buffer[0] & POS[3]);
      };
      const cSrcCount = buffer => {
        return buffer[0] & 0x0f;
      };
      const marker = buffer => {
        return !!(buffer[1] & POS[0]);
      };
      const payloadType = buffer => {
        return buffer[1] & 0x7f;
      };
      const sequenceNumber = buffer => {
        return buffer.readUInt16BE(2);
      };
      const timestamp = buffer => {
        return buffer.readUInt32BE(4);
      };
      const sSrc = buffer => {
        return buffer.readUInt32BE(8);
      };
      const cSrc = (buffer, rank = 0) => {
        return cSrcCount(buffer) > rank ? buffer.readUInt32BE(12 + rank * 4) : 0;
      };
      const extHeaderLength = buffer => {
        return !extension(buffer) ? 0 : buffer.readUInt16BE(12 + cSrcCount(buffer) * 4 + 2);
      };
      const extHeader = buffer => {
        return extHeaderLength(buffer) === 0 ? rtp_Buffer.from([]) : buffer.slice(12 + cSrcCount(buffer) * 4, 12 + cSrcCount(buffer) * 4 + 4 + extHeaderLength(buffer) * 4);
      };
      const payload = buffer => {
        return !extension(buffer) ? buffer.slice(12 + cSrcCount(buffer) * 4) : buffer.slice(12 + cSrcCount(buffer) * 4 + 4 + extHeaderLength(buffer) * 4);
      };
      ;// CONCATENATED MODULE: ./lib/components/message.ts
      let MessageType;

      (function (MessageType) {
        MessageType[MessageType["UNKNOWN"] = 0] = "UNKNOWN";
        MessageType[MessageType["RAW"] = 1] = "RAW";
        MessageType[MessageType["RTP"] = 2] = "RTP";
        MessageType[MessageType["RTCP"] = 3] = "RTCP";
        MessageType[MessageType["RTSP"] = 4] = "RTSP";
        MessageType[MessageType["SDP"] = 5] = "SDP";
        MessageType[MessageType["ELEMENTARY"] = 6] = "ELEMENTARY";
        MessageType[MessageType["H264"] = 7] = "H264";
        MessageType[MessageType["ISOM"] = 8] = "ISOM";
        MessageType[MessageType["XML"] = 9] = "XML";
        MessageType[MessageType["JPEG"] = 10] = "JPEG";
      })(MessageType || (MessageType = {}));
      ;// CONCATENATED MODULE: ./lib/components/aacdepay/parser.ts


      /*
      From RFC 3640 https://tools.ietf.org/html/rfc3640
        2.11.  Global Structure of Payload Format
      
           The RTP payload following the RTP header, contains three octet-
           aligned data sections, of which the first two MAY be empty, see
           Figure 1.
      
                 +---------+-----------+-----------+---------------+
                 | RTP     | AU Header | Auxiliary | Access Unit   |
                 | Header  | Section   | Section   | Data Section  |
                 +---------+-----------+-----------+---------------+
      
                           <----------RTP Packet Payload----------->
      
                    Figure 1: Data sections within an RTP packet
      Note that auxilary section is empty for AAC-hbr
      
        3.2.1.  The AU Header Section
      
         When present, the AU Header Section consists of the AU-headers-length
         field, followed by a number of AU-headers, see Figure 2.
      
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- .. -+-+-+-+-+-+-+-+-+-+
            |AU-headers-length|AU-header|AU-header|      |AU-header|padding|
            |                 |   (1)   |   (2)   |      |   (n)   | bits  |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- .. -+-+-+-+-+-+-+-+-+-+
      
                         Figure 2: The AU Header Section
      */

      function parse (rtp, hasHeader, callback) {
        const buffer = payload(rtp.data);
        let headerLength = 0;

        if (hasHeader) {
          const auHeaderLengthInBits = buffer.readUInt16BE(0);
          headerLength = 2 + (auHeaderLengthInBits + auHeaderLengthInBits % 8) / 8; // Add padding
        }

        const packet = {
          type: MessageType.ELEMENTARY,
          data: buffer.slice(headerLength),
          payloadType: payloadType(rtp.data),
          timestamp: timestamp(rtp.data),
          ntpTimestamp: rtp.ntpTimestamp
        };
        callback(packet);
      }
      ;// CONCATENATED MODULE: ./lib/components/messageStreams.ts

      const createTransform = transform => {
        return new stream_browserify.Transform({
          objectMode: true,
          transform
        });
      };
      ;// CONCATENATED MODULE: ./lib/components/aacdepay/index.ts





      /*
      media: [{ type: 'video',
         port: '0',
         proto: 'RTP/AVP',
         fmt: '96',
         rtpmap: '96 H264/90000',
         fmtp: {
            format: '96',
            parameters: {
              'packetization-mode': '1',
              'profile-level-id': '4d0029',
              'sprop-parameter-sets': 'Z00AKeKQDwBE/LgLcBAQGkHiRFQ=,aO48gA==',
            },
          },
         control: 'rtsp://hostname/axis-media/media.amp/stream=0?audio=1&video=1',
         framerate: '25.000000',
         transform: [[1, 0, 0], [0, 0.75, 0], [0, 0, 1]] },
         { type: 'audio',
           port: '0',
           proto: 'RTP/AVP',
           fmt: '97',
           fmtp: {
             parameters: {
               bitrate: '32000',
               config: '1408',
               indexdeltalength: '3',
               indexlength: '3',
               mode: 'AAC-hbr',
               'profile-level-id': '2',
               sizelength: '13',
               streamtype: '5'
             },
             format: '97'
           },
           rtpmap: '97 MPEG4-GENERIC/16000/1',
           control: 'rtsp://hostname/axis-media/media.amp/stream=1?audio=1&video=1' }]
      */

      class AACDepay extends Tube {
        constructor() {
          let AACPayloadType;
          let hasHeader;
          const incoming = createTransform(function (msg, encoding, callback) {
            if (msg.type === MessageType.SDP) {
              // Check if there is an AAC track in the SDP
              let validMedia;

              for (const media of msg.sdp.media) {
                if (media.type === 'audio' && media.fmtp && media.fmtp.parameters && media.fmtp.parameters.mode === 'AAC-hbr') {
                  validMedia = media;
                }
              }

              if (validMedia && validMedia.rtpmap !== undefined) {
                AACPayloadType = Number(validMedia.rtpmap.payloadType);
                const parameters = validMedia.fmtp.parameters; // Required

                const sizeLength = Number(parameters.sizelength) || 0;
                const indexLength = Number(parameters.indexlength) || 0;
                const indexDeltaLength = Number(parameters.indexdeltalength) || 0; // Optionals

                const CTSDeltaLength = Number(parameters.ctsdeltalength) || 0;
                const DTSDeltaLength = Number(parameters.dtsdeltalength) || 0;
                const RandomAccessIndication = Number(parameters.randomaccessindication) || 0;
                const StreamStateIndication = Number(parameters.streamstateindication) || 0;
                const AuxiliaryDataSizeLength = Number(parameters.auxiliarydatasizelength) || 0;
                hasHeader = sizeLength + Math.max(indexLength, indexDeltaLength) + CTSDeltaLength + DTSDeltaLength + RandomAccessIndication + StreamStateIndication + AuxiliaryDataSizeLength > 0;
              }

              callback(undefined, msg);
            } else if (msg.type === MessageType.RTP && payloadType(msg.data) === AACPayloadType) {
              parse(msg, hasHeader, this.push.bind(this));
              callback();
            } else {
              // Not a message we should handle
              callback(undefined, msg);
            }
          }); // outgoing will be defaulted to a PassThrough stream

          super(incoming);
        }

      }
      ;// CONCATENATED MODULE: ./lib/components/basicdepay/index.ts
/* provided dependency */ var basicdepay_Buffer = __webpack_require__(7866)["Buffer"];




      class BasicDepay extends Tube {
        constructor(rtpPayloadType) {
          if (rtpPayloadType === undefined) {
            throw new Error('you must supply a payload type to BasicDepayComponent');
          }

          let buffer = basicdepay_Buffer.alloc(0);
          const incoming = createTransform(function (msg, encoding, callback) {
            if (msg.type === MessageType.RTP && payloadType(msg.data) === rtpPayloadType) {
              const rtpPayload = payload(msg.data);
              buffer = basicdepay_Buffer.concat([buffer, rtpPayload]);

              if (marker(msg.data)) {
                if (buffer.length > 0) {
                  this.push({
                    data: buffer,
                    timestamp: timestamp(msg.data),
                    ntpTimestamp: msg.ntpTimestamp,
                    payloadType: payloadType(msg.data),
                    type: MessageType.ELEMENTARY
                  });
                }

                buffer = basicdepay_Buffer.alloc(0);
              }

              callback();
            } else {
              // Not a message we should handle
              callback(undefined, msg);
            }
          }); // outgoing will be defaulted to a PassThrough stream

          super(incoming);
        }

      }
      // EXTERNAL MODULE: ./.yarn/unplugged/core-js-npm-3.16.2-c7ce9e8d48/node_modules/core-js/modules/web.url.js
      var web_url = __webpack_require__(2743);
      ;// CONCATENATED MODULE: ./lib/utils/clock.ts
      function clock_defineProperty (obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

      /**
       * Clock
       *
       * A simple timer to keep track of elapsed time,
       * which can be retrieved with the `now` method.
       * The clock is initially in a stopped state, during
       * which the elapsed time does not increase. When
       * started, the clock will return the total elapsed
       * time since the first start / last reset.
       *
       * As a convenience, start/stop are aliased as
       * play/pause, to mimic a media element (for use
       * as a playback clock). The `currentTime` getter
       * returns the elapsed time in seconds (floating
       * point), also as a convenienve to closely match
       * the behaviour of a video element.
       */
      class Clock {
        constructor() {
          clock_defineProperty(this, "started", void 0);

          clock_defineProperty(this, "stopped", void 0);

          clock_defineProperty(this, "elapsed", void 0);

          this.elapsed = 0;
          this.started = 0;
          this.stopped = true;
        }

        start () {
          if (this.stopped) {
            this.started = window.performance.now();
            this.stopped = false;
          }
        }

        stop () {
          if (!this.stopped) {
            this.elapsed = this.now();
            this.stopped = true;
          }
        }

        reset () {
          this.elapsed = 0;
          this.started = 0;
          this.stopped = true;
        } // Gives the elapsed time in milliseconds since the
        // clock was first started (after last reset).


        now () {
          if (this.stopped) {
            return this.elapsed;
          } else {
            return this.elapsed + (window.performance.now() - this.started);
          }
        }

        play () {
          this.start();
        }

        pause () {
          this.stop();
        } // Gives the elapsed time in seconds since last reset.


        get currentTime () {
          return this.now() / 1000;
        }

      }
      ;// CONCATENATED MODULE: ./lib/utils/scheduler.ts
      function scheduler_defineProperty (obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

      // The default tolerance for matching the handler
      // invocation to clock presentation time.
      const DEFAULT_TOLERANCE = 10;
      /**
       * A scheduler that can decide when to execute a certain
       * timestamped callback so that it happens in sync with a video
       * element.
       *
       * To use it:
       *
       * (1) Initialize a new Scheduler with a clock (to synchronize
       * against) and a callback (to be called when a message is in
       * sync with the video). The clock can be a HTMLVideoElement,
       * or anything that has a `currentTime` property which gives
       * the current presentation time in seconds, and a `pause` and
       * `play` method to control playback.
       *
       * (2) Call the `run` method every time a new message arrives
       * that you want to schedule (it needs to have an ntpTimestamp).
       * As soon at the presentation time is known, call the `init`
       * method and pass in that time, so that the scheduler can
       * start to schedule the callbacks. From then on, whenever
       * a message in the queue has a timestamp that matches the
       * current presentation time of the video, your callback will
       * fire.
       */

      class Scheduler {
        /**
         * Creates an instance of Scheduler.
         * @param clock - The clock to use (so we can control playback)
         * @param handler - The callback to invoke when a message is in sync
         * @param tolerance - The milliseconds defining "in sync" (default = 10)
         */
        constructor(clock, handler, tolerance = DEFAULT_TOLERANCE) {
          scheduler_defineProperty(this, "_clock", void 0);

          scheduler_defineProperty(this, "_handler", void 0);

          scheduler_defineProperty(this, "_tolerance", void 0);

          scheduler_defineProperty(this, "_nextRun", void 0);

          scheduler_defineProperty(this, "_nextPlay", void 0);

          scheduler_defineProperty(this, "_fifo", void 0);

          scheduler_defineProperty(this, "_ntpPresentationTime", void 0);

          scheduler_defineProperty(this, "_suspended", void 0);

          this._clock = clock;
          this._handler = handler;
          this._tolerance = tolerance;
          this._nextRun = 0;
          this._nextPlay = 0;
          this._fifo = [];
          this._ntpPresentationTime = 0;
          this._suspended = false;
        }
        /**
         * Bring the scheduler back to it's initial state.
         */


        reset () {
          clearTimeout(this._nextRun);
          clearTimeout(this._nextPlay);
          this._fifo = [];
          this._ntpPresentationTime = 0;
          this._suspended = false;
        }
        /**
         * Initialize the scheduler.
         *
         * @param ntpPresentationTime - The offset representing the start of the presentation
         */


        init (ntpPresentationTime) {
          this._ntpPresentationTime = ntpPresentationTime;
        }
        /**
         * Suspend the scheduler.
         *
         * This releases control of the clock and stops any scheduling activity.
         * Note that this doesn't mean the clock will be in a particular state
         * (could be started or stopped), just that the scheduler will no longer
         * control it.
         */


        suspend () {
          clearTimeout(this._nextPlay);
          this._suspended = true;
        }
        /**
         * Resume the scheduler.
         *
         * This gives back control of the clock and the ability
         * to schedule messages. The scheduler will immediately
         * try to do that on resume.
         */


        resume () {
          this._suspended = false;
          this.run(undefined);
        }
        /**
         * Run the scheduler.
         *
         * @param newMessage - New message to schedule.
         */


        run (newMessage) {
          clearTimeout(this._nextRun); // If there is no way to schedule anything, just return.
          // The first schedule will happen for the first .run that
          // is called after the presentation time has been initialized.

          if (typeof this._ntpPresentationTime === 'undefined') {
            return;
          } // If there is a new message, add it to the FIFO queue


          if (typeof newMessage !== 'undefined') {
            this._fifo.push(newMessage);
          } // If the scheduler is suspended, we can only keep the
          // messages and not do anything with them.


          if (this._suspended) {
            return;
          } // If there are no messages, we don't need to bother or
          // even re-schedule, because the new call to .run() will
          // have to come from outside with a new message.


          if (this._fifo.length === 0) {
            return;
          } // There is at least one message in the FIFO queue, either
          // display it, or re-schedule the method for later execution


          let timeToPresent = 0;
          let currentMessage;

          do {
            const msg = this._fifo.shift();

            if (msg === undefined) {
              throw new Error('internal error: message should never be undefined');
            }

            currentMessage = msg;
            const ntpTimestamp = currentMessage.ntpTimestamp;

            if (ntpTimestamp === undefined) {
              continue;
            }

            const presentationTime = ntpTimestamp - this._ntpPresentationTime;
            timeToPresent = presentationTime - this._clock.currentTime * 1000; // If the message is within a tolerance of the presentation time
            // then call the handler.

            if (Math.abs(timeToPresent) < this._tolerance) {
              this._handler && this._handler(currentMessage);
            }
          } while (timeToPresent < this._tolerance && this._fifo.length > 0);

          if (timeToPresent < -this._tolerance) {
            // We ran out of messages, delay the video with the same amount
            // of delay as the last message had on the FIFO queue.
            // Since we don't have any messages in the queue right now,
            // the only way for anything to happen is if scheduler.run
            // is called.
            clearTimeout(this._nextPlay);

            this._clock.pause();

            this._nextPlay = window.setTimeout(() => this._clock.play(), -timeToPresent);
          } else if (timeToPresent > this._tolerance) {
            // message is later than video, add it back to the queue and
            // re-run the scheduling at a later point in time
            this._fifo.unshift(currentMessage);

            this._nextRun = window.setTimeout(() => this.run(undefined), timeToPresent);
          }
        }

      }
      ;// CONCATENATED MODULE: ./lib/components/canvas/index.ts


      function canvas_defineProperty (obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }







      const resetInfo = info => {
        info.bitrate = 0;
        info.framerate = 0;
        info.renderedFrames = 0;
      };

      const generateUpdateInfo = clockrate => {
        let cumulativeByteLength = 0;
        let cumulativeDuration = 0;
        let cumulativeFrames = 0;
        return (info, {
          byteLength,
          duration
        }) => {
          cumulativeByteLength += byteLength;
          cumulativeDuration += duration;
          cumulativeFrames++; // Update the cumulative number size (bytes) and duration (ticks), and if
          // the duration exceeds the clockrate (meaning longer than 1 second of info),
          // then compute a new bitrate and reset cumulative size and duration.

          if (cumulativeDuration >= clockrate) {
            const bits = 8 * cumulativeByteLength;
            const frames = cumulativeFrames;
            const seconds = cumulativeDuration / clockrate;
            info.bitrate = bits / seconds;
            info.framerate = frames / seconds;
            cumulativeByteLength = 0;
            cumulativeDuration = 0;
            cumulativeFrames = 0;
          }
        };
      };
      /**
       * Canvas component
       *
       * Draws an incoming stream of JPEG images onto a <canvas> element.
       * The RTP timestamps are used to schedule the drawing of the images.
       * An instance can be used as a 'clock' itself, e.g. with a scheduler.
       *
       * The following handlers can be set on a component instance:
       *  - onCanplay: will be called when the first frame is ready and
       *               the correct frame size has been set on the canvas.
       *               At this point, the clock can be started by calling
       *               `.play()` method on the component.
       *  - onSync: will be called when the presentation time offset is
       *            known, with the latter as argument (in UNIX milliseconds)
       *
       */


      class CanvasSink extends Sink {
        /**
         * @param  el - The <canvas> element to draw incoming JPEG messages on.
         */
        constructor(el) {
          if (el === undefined) {
            throw new Error('canvas element argument missing');
          }

          let firstTimestamp = 0;
          let lastTimestamp = 0;
          let clockrate = 0;
          const info = {
            bitrate: 0,
            framerate: 0,
            renderedFrames: 0
          };
          let updateInfo; // The createImageBitmap function is supported in Chrome and Firefox
          // (https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/createImageBitmap)
          // Note: drawImage can also be used instead of transferFromImageBitmap, but it caused
          // very large memory use in Chrome (goes up to ~2-3GB, then drops again).
          // Do do not call el.getContext twice, safari returns null for second call

          let ctx = null;

          if (window.createImageBitmap !== undefined) {
            ctx = el.getContext('bitmaprenderer');
          }

          if (ctx === null) {
            ctx = el.getContext('2d');
          } // Set up the drawing callback to be used by the scheduler,
          // it receives a blob of a JPEG image.


          let drawImageBlob;

          if (ctx === null) {
            drawImageBlob = () => {
              /** NOOP */
            };
          } else if ('transferFromImageBitmap' in ctx) {
            const ctxBitmaprenderer = ctx;

            drawImageBlob = ({
              blob
            }) => {
              info.renderedFrames++;
              window.createImageBitmap(blob).then(imageBitmap => {
                ctxBitmaprenderer.transferFromImageBitmap(imageBitmap);
              }).catch(() => {
                /** ignore */
              });
            };
          } else {
            const ctx2d = ctx;
            const img = new Image();

            img.onload = () => {
              ctx2d.drawImage(img, 0, 0);
            };

            drawImageBlob = ({
              blob
            }) => {
              info.renderedFrames++;
              const url = window.URL.createObjectURL(blob);
              img.src = url;
            };
          } // Because we don't have an element that plays video for us,
          // we have to use our own clock. The clock can be started/stopped
          // with the `play` and `pause` methods, and has a `currentTime`
          // property that keeps track of the presentation time.
          // The scheduler will use the clock (instead of e.g. a video element)
          // to determine when to display the JPEG images.


          const clock = new Clock();
          const scheduler = new Scheduler(clock, drawImageBlob);
          let ntpPresentationTime = 0;

          const onCanplay = () => {
            this.onCanplay && this.onCanplay();
          };

          const onSync = ntpPresentationTime => {
            this.onSync && this.onSync(ntpPresentationTime);
          }; // Set up an incoming stream and attach it to the image drawing function.


          const incoming = new stream_browserify.Writable({
            objectMode: true,
            write: (msg, encoding, callback) => {
              if (msg.type === MessageType.SDP) {
                // start of a new movie, reset timers
                clock.reset();
                scheduler.reset(); // Initialize first timestamp and clockrate

                firstTimestamp = 0;
                const jpegMedia = msg.sdp.media.find(media => {
                  return media.type === 'video' && media.rtpmap !== undefined && media.rtpmap.encodingName === 'JPEG';
                });

                if (jpegMedia !== undefined && jpegMedia.rtpmap !== undefined) {
                  clockrate = jpegMedia.rtpmap.clockrate; // Initialize the framerate/bitrate data

                  resetInfo(info);
                  updateInfo = generateUpdateInfo(clockrate);
                }

                callback();
              } else if (msg.type === MessageType.JPEG) {
                const {
                  timestamp,
                  ntpTimestamp
                } = msg; // If first frame, store its timestamp, initialize
                // the scheduler with 0 and start the clock.
                // Also set the proper size on the canvas.

                if (!firstTimestamp) {
                  // Initialize timing
                  firstTimestamp = timestamp;
                  lastTimestamp = timestamp; // Initialize frame size

                  const {
                    width,
                    height
                  } = msg.framesize;
                  el.width = width;
                  el.height = height; // Notify that we can play at this point

                  scheduler.init(0);
                } // Compute millisecond presentation time (with offset 0
                // as we initialized the scheduler with 0).


                const presentationTime = 1000 * (timestamp - firstTimestamp) / clockrate;
                const blob = new window.Blob([msg.data], {
                  type: 'image/jpeg'
                }); // If the actual UTC time of the start of presentation isn't known yet,
                // and we do have an ntpTimestamp, then compute it here and notify.

                if (!ntpPresentationTime && ntpTimestamp) {
                  ntpPresentationTime = ntpTimestamp - presentationTime;
                  onSync(ntpPresentationTime);
                }

                scheduler.run({
                  ntpTimestamp: presentationTime,
                  blob
                }); // Notify that we can now start the clock.

                if (timestamp === firstTimestamp) {
                  onCanplay();
                } // Update bitrate/framerate


                updateInfo(info, {
                  byteLength: msg.data.length,
                  duration: timestamp - lastTimestamp
                });
                lastTimestamp = timestamp;
                callback();
              } else {
                callback();
              }
            }
          }); // Set up an outgoing stream.

          const outgoing = new stream_browserify.Readable({
            objectMode: true,
            read: function () {//
            }
          }); // When an error is sent on the outgoing stream, whine about it.

          outgoing.on('error', () => {
            console.warn('outgoing stream broke somewhere');
          });
          super(incoming, outgoing);

          canvas_defineProperty(this, "onCanplay", void 0);

          canvas_defineProperty(this, "onSync", void 0);

          canvas_defineProperty(this, "_clock", void 0);

          canvas_defineProperty(this, "_scheduler", void 0);

          canvas_defineProperty(this, "_info", void 0);

          this._clock = clock;
          this._scheduler = scheduler;
          this._info = info;
          this.onCanplay = undefined;
          this.onSync = undefined;
        }
        /**
         * Retrieve the current presentation time (seconds)
         */


        get currentTime () {
          return this._clock.currentTime;
        }
        /**
         * Pause the presentation.
         */


        pause () {
          this._scheduler.suspend();

          this._clock.pause();
        }
        /**
         * Start the presentation.
         */


        play () {
          this._clock.play();

          this._scheduler.resume();
        }

        get bitrate () {
          return this._info.bitrate;
        }

        get framerate () {
          return this._info.framerate;
        }

      }
      // EXTERNAL MODULE: ./.yarn/__virtual__/debug-virtual-c8b34b81df/0/cache/debug-npm-4.3.2-f0148b6afe-820ea160e2.zip/node_modules/debug/src/browser.js
      var browser = __webpack_require__(7997);
      var browser_default = /*#__PURE__*/__webpack_require__.n(browser);
      ;// CONCATENATED MODULE: ./lib/components/h264depay/parser.ts
/* provided dependency */ var parser_Buffer = __webpack_require__(7866)["Buffer"];
      function parser_defineProperty (obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }




      let NAL_TYPES;
      /*
      First byte in payload (rtp payload header):
            +---------------+
            |0|1|2|3|4|5|6|7|
            +-+-+-+-+-+-+-+-+
            |F|NRI|  Type   |
            +---------------+
      
      2nd byte in payload: FU header (if type in first byte is 28)
            +---------------+
            |0|1|2|3|4|5|6|7|
            +-+-+-+-+-+-+-+-+
            |S|E|R|  Type   | S = start, E = end
            +---------------+
      */

      (function (NAL_TYPES) {
        NAL_TYPES[NAL_TYPES["UNSPECIFIED"] = 0] = "UNSPECIFIED";
        NAL_TYPES[NAL_TYPES["NON_IDR_PICTURE"] = 1] = "NON_IDR_PICTURE";
        NAL_TYPES[NAL_TYPES["IDR_PICTURE"] = 5] = "IDR_PICTURE";
        NAL_TYPES[NAL_TYPES["SPS"] = 7] = "SPS";
        NAL_TYPES[NAL_TYPES["PPS"] = 8] = "PPS";
      })(NAL_TYPES || (NAL_TYPES = {}));

      const h264Debug = browser_default()('msl:h264depay');
      class H264DepayParser {
        constructor() {
          parser_defineProperty(this, "_buffer", void 0);

          this._buffer = parser_Buffer.alloc(0);
        }

        parse (rtp) {
          const rtpPayload = payload(rtp.data);
          const type = rtpPayload[0] & 0x1f;

          if (type === 28) {
            /* FU-A NALU */
            const fuIndicator = rtpPayload[0];
            const fuHeader = rtpPayload[1];
            const startBit = !!(fuHeader >> 7);
            const nalType = fuHeader & 0x1f;
            const nal = fuIndicator & 0xe0 | nalType;
            const stopBit = fuHeader & 64;

            if (startBit) {
              this._buffer = parser_Buffer.concat([parser_Buffer.from([0, 0, 0, 0, nal]), rtpPayload.slice(2)]);
              return null;
            } else if (stopBit) {
              /* receieved end bit */
              const h264frame = parser_Buffer.concat([this._buffer, rtpPayload.slice(2)]);
              h264frame.writeUInt32BE(h264frame.length - 4, 0);
              const msg = {
                data: h264frame,
                type: MessageType.H264,
                timestamp: timestamp(rtp.data),
                ntpTimestamp: rtp.ntpTimestamp,
                payloadType: payloadType(rtp.data),
                nalType: nalType
              };
              this._buffer = parser_Buffer.alloc(0);
              return msg;
            } else {
              // Put the received data on the buffer and cut the header bytes
              this._buffer = parser_Buffer.concat([this._buffer, rtpPayload.slice(2)]);
              return null;
            }
          } else if ((type === NAL_TYPES.NON_IDR_PICTURE || type === NAL_TYPES.IDR_PICTURE) && this._buffer.length === 0) {
            /* Single NALU */
            const h264frame = parser_Buffer.concat([parser_Buffer.from([0, 0, 0, 0]), rtpPayload]);
            h264frame.writeUInt32BE(h264frame.length - 4, 0);
            const msg = {
              data: h264frame,
              type: MessageType.H264,
              timestamp: timestamp(rtp.data),
              ntpTimestamp: rtp.ntpTimestamp,
              payloadType: payloadType(rtp.data),
              nalType: type
            };
            this._buffer = parser_Buffer.alloc(0);
            return msg;
          } else {
            h264Debug(`H264depayComponent can only extract types 1,5 and 28, got ${type}`);
            this._buffer = parser_Buffer.alloc(0);
            return null;
          }
        }

      }
      ;// CONCATENATED MODULE: ./lib/components/h264depay/index.ts
/* provided dependency */ var h264depay_Buffer = __webpack_require__(7866)["Buffer"];
      function ownKeys (object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

      function _objectSpread (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { h264depay_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

      function h264depay_defineProperty (obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }






      class H264Depay extends Tube {
        constructor() {
          let h264PayloadType;
          let idrFound = false;
          let packets = [];
          const h264DepayParser = new H264DepayParser(); // Incoming

          const incoming = new stream_browserify.Transform({
            objectMode: true,
            transform: function (msg, _encoding, callback) {
              // Get correct payload types from sdp to identify video and audio
              if (msg.type === MessageType.SDP) {
                const h264Media = msg.sdp.media.find(media => {
                  return media.type === 'video' && media.rtpmap !== undefined && media.rtpmap.encodingName === 'H264';
                });

                if (h264Media !== undefined && h264Media.rtpmap !== undefined) {
                  h264PayloadType = h264Media.rtpmap.payloadType;
                }

                callback(undefined, msg); // Pass on the original SDP message
              } else if (msg.type === MessageType.RTP && payloadType(msg.data) === h264PayloadType) {
                const endOfFrame = marker(msg.data);
                const h264Message = h264DepayParser.parse(msg); // Skip if not a full H264 frame, or when there hasn't been an I-frame yet

                if (h264Message === null || !idrFound && h264Message.nalType !== NAL_TYPES.IDR_PICTURE) {
                  callback();
                  return;
                }

                idrFound = true; // H.264 over RTP uses the RTP marker bit to indicate a complete
                // frame.  At this point, the packets can be used to construct a
                // complete message.

                packets.push(h264Message.data);

                if (endOfFrame) {
                  this.push(_objectSpread(_objectSpread({}, h264Message), {}, {
                    data: packets.length === 1 ? packets[0] : h264depay_Buffer.concat(packets)
                  }));
                  packets = [];
                }

                callback();
              } else {
                // Not a message we should handle
                callback(undefined, msg);
              }
            }
          }); // outgoing will be defaulted to a PassThrough stream

          super(incoming);
        }

      }
      ;// CONCATENATED MODULE: ./lib/components/http-source/index.ts
/* provided dependency */ var http_source_Buffer = __webpack_require__(7866)["Buffer"];
      function http_source_ownKeys (object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

      function http_source_objectSpread (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { http_source_ownKeys(Object(source), true).forEach(function (key) { http_source_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { http_source_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

      function http_source_defineProperty (obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





      const debug = browser_default()('msl:http-source');
      class HttpSource extends Source {
        /**
         * Create an HTTP component.
         *
         * The constructor sets a single readable stream from a fetch.
         */
        constructor(config) {
          const {
            uri,
            options
          } = config;
          /**
           * Set up an incoming stream and attach it to the socket.
           */

          const incoming = new stream_browserify.Readable({
            objectMode: true,
            read: function () {//
            }
          }); // When an error is sent on the incoming stream, close the socket.

          incoming.on('error', e => {
            console.warn('closing socket due to incoming error', e);
            this._reader && this._reader.cancel();
          });
          /**
           * initialize the component.
           */

          super(incoming); // When a read is requested, continue to pull data

          http_source_defineProperty(this, "uri", void 0);

          http_source_defineProperty(this, "options", void 0);

          http_source_defineProperty(this, "length", void 0);

          http_source_defineProperty(this, "onHeaders", void 0);

          http_source_defineProperty(this, "onServerClose", void 0);

          http_source_defineProperty(this, "_reader", void 0);

          http_source_defineProperty(this, "_abortController", void 0);

          http_source_defineProperty(this, "_allDone", void 0);

          incoming._read = () => {
            this._pull();
          };

          this.uri = uri;
          this.options = options;
          this._allDone = false;
        }

        play () {
          if (this.uri === undefined) {
            throw new Error('cannot start playing when there is no URI');
          }

          this._abortController = new AbortController();
          this.length = 0;
          fetch(this.uri, http_source_objectSpread({
            credentials: 'include',
            signal: this._abortController.signal
          }, this.options)).then(rsp => {
            if (rsp.body === null) {
              throw new Error('empty response body');
            }

            this.onHeaders && this.onHeaders(rsp.headers);
            this._reader = rsp.body.getReader();

            this._pull();
          }).catch(err => {
            console.error('http-source: fetch failed: ', err);
          });
        }

        abort () {
          this._reader && this._reader.cancel().catch(err => {
            console.log('http-source: cancel reader failed: ', err);
          });
          this._abortController && this._abortController.abort();
        }

        _isClosed () {
          return this._allDone;
        }

        _close () {
          var _this$onServerClose;

          this._reader = undefined;
          this._allDone = true;
          this.incoming.push(null);
          (_this$onServerClose = this.onServerClose) === null || _this$onServerClose === void 0 ? void 0 : _this$onServerClose.call(this);
        }

        _pull () {
          if (this._reader === undefined) {
            return;
          }

          this._reader.read().then(({
            done,
            value
          }) => {
            if (done) {
              if (!this._isClosed()) {
                debug('fetch completed, total downloaded: ', this.length, ' bytes');

                this._close();
              }

              return;
            }

            if (value === undefined) {
              throw new Error('expected value to be defined');
            }

            if (this.length === undefined) {
              throw new Error('expected length to be defined');
            }

            this.length += value.length;
            const buffer = http_source_Buffer.from(value);

            if (!this.incoming.push({
              data: buffer,
              type: MessageType.RAW
            })) {
              // Something happened down stream that it is no longer processing the
              // incoming data, and the stream buffer got full.
              // This could be because we are downloading too much data at once,
              // or because the downstream is frozen. The latter is most likely
              // when dealing with a live stream (as in that case we would expect
              // downstream to be able to handle the data).
              debug('downstream back pressure: pausing read');
            } else {
              // It's ok to read more data
              this._pull();
            }
          }).catch(err => {
            debug('http-source: read failed: ', err);

            if (!this._isClosed()) {
              this._close();
            }
          });
        }

      }
      ;// CONCATENATED MODULE: ./lib/components/inspector/index.ts



      const generateLogger = (prefix, type) => {
        let lastTimestamp = Date.now();

        const log = msg => {
          const timestamp = Date.now();
          console.log(`${prefix}: +${timestamp - lastTimestamp}ms`, msg);
          lastTimestamp = timestamp;
        };

        if (type === undefined) {
          return log;
        } else {
          return msg => msg.type === type && log(msg);
        }
      };
      /**
       * Component that logs whatever is passing through.
       */


      class Inspector extends Tube {
        /**
         * Create a new inspector component.
         * @argument {String} type  The type of message to log (default is to log all).
         * @return {undefined}
         */
        constructor(type) {
          const incomingLogger = generateLogger('incoming', type);
          const incoming = new stream_browserify.Transform({
            objectMode: true,
            transform: function (msg, encoding, callback) {
              incomingLogger(msg);
              callback(undefined, msg);
            }
          });
          const outgoingLogger = generateLogger('outgoing', type);
          const outgoing = new stream_browserify.Transform({
            objectMode: true,
            transform: function (msg, encoding, callback) {
              outgoingLogger(msg);
              callback(undefined, msg);
            }
          });
          super(incoming, outgoing);
        }

      }
      ;// CONCATENATED MODULE: ./lib/components/jpegdepay/headers.ts
/* provided dependency */ var headers_Buffer = __webpack_require__(7866)["Buffer"];
      /**
       * Generate frame and scan headers that can be prepended to the
       * RTP/JPEG data payload to produce a JPEG compressed image in
       * interchange format.
       *
       * For detailed information, check Appendix A of:
       * https://tools.ietf.org/html/rfc2435
       */
      function makeImageHeader () {
        return headers_Buffer.from([0xff, 0xd8]);
      }
      function makeQuantHeader (precision, qTable) {
        const lumSize = precision & 1 ? 128 : 64;
        const chmSize = precision & 2 ? 128 : 64;

        if (qTable.length !== lumSize + chmSize) {
          throw new Error('invalid quantization table');
        }

        const lumaPrefix = headers_Buffer.from([0xff, 0xdb, 0, lumSize + 3, 0]);
        const chromaPrefix = headers_Buffer.from([0xff, 0xdb, 0, chmSize + 3, 1]);
        return headers_Buffer.concat([lumaPrefix, qTable.slice(0, lumSize), chromaPrefix, qTable.slice(lumSize)]);
      }
      function makeFrameHeader (width, height, type) {
        return headers_Buffer.from([0xff, 0xc0, // SOF_0 (Start Of Frame)
          0, 17, 8, height >> 8, height, width >> 8, width, 3, 0, type === 0 ? 0x21 : 0x22, 0, 1, 0x11, 1, 2, 0x11, 1]);
      } // prettier-ignore

      const LUM_DC_CODELENS = [0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]; // prettier-ignore

      const LUM_DC_SYMBOLS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]; // prettier-ignore

      const LUM_AC_CODELENS = [0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 0x7d]; // prettier-ignore

      const LUM_AC_SYMBOLS = [0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07, 0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08, 0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0, 0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa]; // prettier-ignore

      const CHM_DC_CODELENS = [0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0]; // prettier-ignore

      const CHM_DC_SYMBOLS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]; // prettier-ignore

      const CHM_AC_CODELENS = [0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 0x77]; // prettier-ignore

      const CHM_AC_SYMBOLS = [0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71, 0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91, 0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33, 0x52, 0xf0, 0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34, 0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19, 0x1a, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa];
      function makeHuffmanHeader () {
        const LUM_DC_BUFFER = [[0xff, 0xc4, 0, 3 + LUM_DC_CODELENS.length + LUM_DC_SYMBOLS.length, 0 << 4 | 0], LUM_DC_CODELENS, LUM_DC_SYMBOLS];
        const LUM_AC_BUFFER = [[0xff, 0xc4, 0, 3 + LUM_AC_CODELENS.length + LUM_AC_SYMBOLS.length, 1 << 4 | 0], LUM_AC_CODELENS, LUM_AC_SYMBOLS];
        const CHM_DC_BUFFER = [[0xff, 0xc4, 0, 3 + CHM_DC_CODELENS.length + CHM_DC_SYMBOLS.length, 0 << 4 | 1], CHM_DC_CODELENS, CHM_DC_SYMBOLS];
        const CHM_AC_BUFFER = [[0xff, 0xc4, 0, 3 + CHM_AC_CODELENS.length + CHM_AC_SYMBOLS.length, 1 << 4 | 1], CHM_AC_CODELENS, CHM_AC_SYMBOLS];
        return headers_Buffer.concat([...LUM_DC_BUFFER.map(headers_Buffer.from), ...LUM_AC_BUFFER.map(headers_Buffer.from), ...CHM_DC_BUFFER.map(headers_Buffer.from), ...CHM_AC_BUFFER.map(headers_Buffer.from)]);
      }
      function makeScanHeader () {
        return headers_Buffer.from([0xff, 0xda, // SOS (Start Of Scan)
          0, 12, 3, 0, 0, 1, 0x11, 2, 0x11, 0, 63, 0]);
      }
      function makeDRIHeader (dri) {
        return headers_Buffer.from([0xff, 0xdd, 0x00, 4, dri >> 8, dri & 0xff]);
      }
      ;// CONCATENATED MODULE: ./lib/utils/clamp.ts
      function clamp (val, min, max) {
        return val > max ? max : val < min ? min : val;
      }
      ;// CONCATENATED MODULE: ./lib/components/jpegdepay/make-qtable.ts
/* provided dependency */ var make_qtable_Buffer = __webpack_require__(7866)["Buffer"];

      /**
       * @function makeQtable
       * Creating a quantization table from a Q factor
       * Example Code from RFC 2435 Appendix A ported to TypeScript
       *
       * Default luminance/chrominance quantization tables in RFC example are not in zig-zag order.
       * The RFC does not mention that default tables should be in zig-zag ordering,
       * but they say that about the included tables. RFC sample code appears to have a mistake.
       * All the tested cameras and LGPL projects use zig-zag default tables.
       * So we use zig-zaged tables from ISO/IEC 10918-1 Annex K Section K.1
       * @see https://tools.ietf.org/html/rfc2435
       * @see https://www.iso.org/standard/18902.html
       */
      // prettier-ignore

      const jpegLumaQuantizer = [16, 11, 12, 14, 12, 10, 16, 14, 13, 14, 18, 17, 16, 19, 24, 40, 26, 24, 22, 22, 24, 49, 35, 37, 29, 40, 58, 51, 61, 60, 57, 51, 56, 55, 64, 72, 92, 78, 64, 68, 87, 69, 55, 56, 80, 109, 81, 87, 95, 98, 103, 104, 103, 62, 77, 113, 121, 112, 100, 120, 92, 101, 103, 99]; // prettier-ignore

      const jpeChromaQuantizer = [17, 18, 18, 24, 21, 24, 47, 26, 26, 47, 99, 66, 56, 66, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99];
      function makeQtable (Q) {
        const factor = clamp(Q, 1, 99);
        const buffer = make_qtable_Buffer.alloc(128);
        const S = Q < 50 ? Math.floor(5000 / factor) : 200 - factor * 2;

        for (let i = 0; i < 64; i++) {
          const lq = Math.floor((jpegLumaQuantizer[i] * S + 50) / 100);
          const cq = Math.floor((jpeChromaQuantizer[i] * S + 50) / 100);
          buffer.writeUInt8(clamp(lq, 1, 255), i);
          buffer.writeUInt8(clamp(cq, 1, 255), i + 64);
        }

        return buffer;
      }
      ;// CONCATENATED MODULE: ./lib/components/jpegdepay/parser.ts
/* provided dependency */ var jpegdepay_parser_Buffer = __webpack_require__(7866)["Buffer"];



      /**
       * Each packet contains a special JPEG header which immediately follows
       * the RTP header.  The first 8 bytes of this header, called the "main
       * JPEG header", are as follows:*
       *  0                   1                   2                   3
       *  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
       * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       * | Type-specific |              Fragment Offset                  |
       * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       * |      Type     |       Q       |     Width     |     Height    |
       * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       */

      /**
       * Restart Marker header: when using types 64-127
       *  0                   1                   2                   3
       *  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
       * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       * |       Restart Interval        |F|L|       Restart Count       |
       * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       */

      /**
       * Quantization Table header: when using Q values 128-255
       *  0                   1                   2                   3
       *  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
       * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       * |      MBZ      |   Precision   |             Length            |
       * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       * |                    Quantization Table Data                    |
       * |                              ...                              |
       * +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
       */

      function jpegDepayFactory (defaultWidth = 0, defaultHeight = 0) {
        const IMAGE_HEADER = makeImageHeader();
        const HUFFMAN_HEADER = makeHuffmanHeader();
        const SCAN_HEADER = makeScanHeader();
        return function jpegDepay (packets) {
          let metadata;
          const fragments = [];

          for (const packet of packets) {
            let fragment = payload(packet); // Parse and extract JPEG header.

            const typeSpecific = fragment.readUInt8(0);
            const fragmentOffset = fragment.readUInt8(1) << 16 | fragment.readUInt8(2) << 8 | fragment.readUInt8(3);
            const type = fragment.readUInt8(4);
            const Q = fragment.readUInt8(5);
            const width = fragment.readUInt8(6) * 8 || defaultWidth;
            const height = fragment.readUInt8(7) * 8 || defaultHeight;
            fragment = fragment.slice(8); // Parse and extract Restart Marker header if present.

            let DRI = 0;

            if (type >= 64 && type <= 127) {
              DRI = fragment.readUInt16BE(0);
              fragment = fragment.slice(4);
            } // Parse and extract Quantization Table header if present.


            if (Q >= 128 && fragmentOffset === 0) {
              // const MBZ = fragment.readUInt8()
              const precision = fragment.readUInt8(1);
              const length = fragment.readUInt16BE(2);
              const qTable = fragment.slice(4, 4 + length);
              metadata = {
                typeSpecific,
                type,
                width,
                height,
                DRI,
                precision,
                qTable
              };
              fragment = fragment.slice(4 + length);
            } // Compute Quantization Table
            else if (Q < 128 && fragmentOffset === 0) {
              const precision = 0;
              const qTable = makeQtable(Q);
              metadata = {
                typeSpecific,
                type,
                width,
                height,
                DRI,
                precision,
                qTable
              };
            }

            fragments.push(fragment);
          }

          if (metadata === undefined) {
            throw new Error('no quantization header present');
          }

          const {
            precision,
            qTable,
            type,
            width,
            height
          } = metadata;
          const quantHeader = makeQuantHeader(precision, qTable);
          const driHeader = metadata.DRI === 0 ? jpegdepay_parser_Buffer.alloc(0) : makeDRIHeader(metadata.DRI);
          const frameHeader = makeFrameHeader(width, height, type);
          return {
            size: {
              width,
              height
            },
            data: jpegdepay_parser_Buffer.concat([IMAGE_HEADER, quantHeader, driHeader, frameHeader, HUFFMAN_HEADER, SCAN_HEADER, ...fragments])
          };
        };
      }
      ;// CONCATENATED MODULE: ./lib/components/jpegdepay/index.ts





      class JPEGDepay extends Tube {
        constructor() {
          let jpegPayloadType;
          let packets = [];
          let jpegDepay;
          const incoming = new stream_browserify.Transform({
            objectMode: true,
            transform: function (msg, encoding, callback) {
              if (msg.type === MessageType.SDP) {
                const jpegMedia = msg.sdp.media.find(media => {
                  return media.type === 'video' && media.rtpmap !== undefined && media.rtpmap.encodingName === 'JPEG';
                });

                if (jpegMedia !== undefined && jpegMedia.rtpmap !== undefined) {
                  jpegPayloadType = Number(jpegMedia.rtpmap.payloadType);
                  const framesize = jpegMedia.framesize; // `framesize` is an SDP field that is present in e.g. Axis camera's
                  // and is used because the width and height that can be sent inside
                  // the JPEG header are both limited to 2040.
                  // If present, we use this width and height as the default values
                  // to be used by the jpeg depay function, otherwise we ignore this
                  // and let the JPEG header inside the RTP packets determine this.

                  if (framesize !== undefined) {
                    const [width, height] = framesize; // msg.framesize = { width, height }

                    jpegDepay = jpegDepayFactory(width, height);
                  } else {
                    jpegDepay = jpegDepayFactory();
                  }
                }

                callback(undefined, msg);
              } else if (msg.type === MessageType.RTP && payloadType(msg.data) === jpegPayloadType) {
                packets.push(msg.data); // JPEG over RTP uses the RTP marker bit to indicate end
                // of fragmentation. At this point, the packets can be used
                // to reconstruct a JPEG frame.

                if (marker(msg.data) && packets.length > 0) {
                  const jpegFrame = jpegDepay(packets);
                  this.push({
                    timestamp: timestamp(msg.data),
                    ntpTimestamp: msg.ntpTimestamp,
                    payloadType: payloadType(msg.data),
                    data: jpegFrame.data,
                    framesize: jpegFrame.size,
                    type: MessageType.JPEG
                  });
                  packets = [];
                }

                callback();
              } else {
                // Not a message we should handle
                callback(undefined, msg);
              }
            }
          }); // outgoing will be defaulted to a PassThrough stream

          super(incoming);
        }

      }
      ;// CONCATENATED MODULE: ./lib/components/mp4capture/index.ts
/* provided dependency */ var mp4capture_Buffer = __webpack_require__(7866)["Buffer"];
      function mp4capture_defineProperty (obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





      const MAX_CAPTURE_BYTES = 225000000; // 5 min at a rate of 6 Mbit/s

      /**
       * Component that records MP4 data.
       */

      class Mp4Capture extends Tube {
        constructor(maxSize = MAX_CAPTURE_BYTES) {
          const incoming = new stream_browserify.Transform({
            objectMode: true,
            transform: (msg, _encoding, callback) => {
              // Arrival of ISOM with tracks indicates new movie, start recording if active.
              if (this._active && msg.type === MessageType.ISOM && msg.tracks !== undefined) {
                this._capture = true;
              } // If capture enabled, record all ISOM (MP4) boxes


              if (this._capture && msg.type === MessageType.ISOM) {
                if (this._bufferOffset < this._buffer.byteLength - msg.data.byteLength) {
                  msg.data.copy(this._buffer, this._bufferOffset);
                  this._bufferOffset += msg.data.byteLength;
                } else {
                  this.stop();
                }
              } // Always pass on all messages


              callback(undefined, msg);
            }
          }); // Stop any recording when the stream is closed.

          incoming.on('finish', () => {
            this.stop();
          });
          super(incoming);

          mp4capture_defineProperty(this, "_active", void 0);

          mp4capture_defineProperty(this, "_capture", void 0);

          mp4capture_defineProperty(this, "_captureCallback", void 0);

          mp4capture_defineProperty(this, "_bufferOffset", void 0);

          mp4capture_defineProperty(this, "_bufferSize", void 0);

          mp4capture_defineProperty(this, "_buffer", void 0);

          this._buffer = mp4capture_Buffer.allocUnsafe(0);
          this._bufferSize = maxSize;
          this._bufferOffset = 0;
          this._active = false;
          this._capture = false;

          this._captureCallback = () => {
            /** noop */
          };
        }
        /**
         * Activate video capture. The capture will begin when a new movie starts,
         * and will terminate when the movie ends or when the buffer is full. On
         * termination, the callback you passed will be called with the captured
         * data as argument.
         * @param callback  Will be called when data is captured.
         */


        start (callback) {
          if (!this._active) {
            browser_default()('msl:capture:start')(callback);
            this._captureCallback = callback;
            this._buffer = mp4capture_Buffer.allocUnsafe(this._bufferSize);
            this._bufferOffset = 0;
            this._active = true;
          }
        }
        /**
         * Deactivate video capture. This ends an ongoing capture and prevents
         * any further capturing.
         */


        stop () {
          if (this._active) {
            browser_default()('msl:capture:stop')(`captured bytes: ${this._bufferOffset}`);

            try {
              this._captureCallback(this._buffer.slice(0, this._bufferOffset));
            } catch (e) {
              console.error(e);
            }

            this._buffer = mp4capture_Buffer.allocUnsafe(0);
            this._bufferOffset = 0;
            this._active = false;
            this._capture = false;
          }
        }

      }
      ;// CONCATENATED MODULE: ./lib/components/mp4muxer/helpers/isom.ts
/* provided dependency */ var isom_Buffer = __webpack_require__(7866)["Buffer"];
      function isom_defineProperty (obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

      // Elements: parts of a box that hold values.
      // They should have a:
      // - byteLength
      // - value (can be accessed from outside to set/retrieve)
      // - store(buffer, offset) -> write the value to a buffer
      // - load(buffer, offset) -> read data and store in value
      // Constants
      const UINT32_RANGE = Math.pow(2, 32);

      class BoxElement {
        constructor(size) {
          isom_defineProperty(this, "byteLength", void 0);

          isom_defineProperty(this, "value", void 0);

          this.byteLength = size;
        }

      }

      class Empty extends BoxElement {
        constructor(size = 0) {
          super(size);

          isom_defineProperty(this, "copy", (buffer, offset) => {
            buffer.fill(0, offset, offset + this.byteLength);
          });
        }

        load () {
          /** noop */
        }

      }

      class CharArray extends BoxElement {
        constructor(s) {
          super(s.length);

          isom_defineProperty(this, "value", void 0);

          isom_defineProperty(this, "copy", (buffer, offset) => {
            for (let i = 0; i < this.byteLength; i += 1) {
              buffer[offset + i] = this.value.charCodeAt(i);
            }
          });

          isom_defineProperty(this, "load", (buffer, offset) => {
            this.value = buffer.slice(offset, offset + this.byteLength).toString('ascii');
          });

          this.value = s;
        }

      }

      class UInt8 extends BoxElement {
        constructor(scalar = 0) {
          super(1);

          isom_defineProperty(this, "value", void 0);

          isom_defineProperty(this, "copy", (buffer, offset) => {
            buffer.writeUInt8(this.value, offset);
          });

          isom_defineProperty(this, "load", (buffer, offset) => {
            this.value = buffer.readUInt8(offset);
          });

          this.value = scalar;
        }

      }

      class UInt8Array extends BoxElement {
        constructor(array) {
          super(array.length);

          isom_defineProperty(this, "value", void 0);

          isom_defineProperty(this, "copy", (buffer, offset) => {
            for (let i = 0; i < this.value.length; ++i) {
              buffer.writeUInt8(this.value[i], offset + i);
            }
          });

          isom_defineProperty(this, "load", (buffer, offset) => {
            for (let i = 0; i < this.value.length; ++i) {
              this.value[i] = buffer.readUInt8(offset + i);
            }
          });

          this.value = array;
        }

      }

      class UInt16BE extends BoxElement {
        constructor(scalar = 0) {
          super(2);

          isom_defineProperty(this, "value", void 0);

          isom_defineProperty(this, "copy", (buffer, offset) => {
            buffer.writeUInt16BE(this.value, offset);
          });

          isom_defineProperty(this, "load", (buffer, offset) => {
            this.value = buffer.readUInt16BE(offset);
          });

          this.value = scalar;
        }

      }

      class UInt24BE extends BoxElement {
        constructor(scalar = 0) {
          super(3);

          isom_defineProperty(this, "value", void 0);

          isom_defineProperty(this, "copy", (buffer, offset) => {
            buffer.writeUInt8(this.value >> 16 & 0xff, offset);
            buffer.writeUInt8(this.value >> 8 & 0xff, offset + 1);
            buffer.writeUInt8(this.value & 0xff, offset + 2);
          });

          isom_defineProperty(this, "load", (buffer, offset) => {
            this.value = buffer.readUInt8(offset) << 16 + buffer.readUInt8(offset + 1) << 8 + buffer.readUInt8(offset + 2);
          });

          this.value = scalar;
        }

      }

      class UInt16BEArray extends BoxElement {
        constructor(array) {
          super(array.length * 2);

          isom_defineProperty(this, "value", void 0);

          isom_defineProperty(this, "copy", (buffer, offset) => {
            for (let i = 0; i < this.value.length; ++i) {
              buffer.writeUInt16BE(this.value[i], offset + 2 * i);
            }
          });

          isom_defineProperty(this, "load", (buffer, offset) => {
            for (let i = 0; i < this.value.length; ++i) {
              this.value[i] = buffer.readUInt16BE(offset + 2 * i);
            }
          });

          this.value = array;
        }

      }

      class UInt32BE extends BoxElement {
        constructor(scalar = 0) {
          super(4);

          isom_defineProperty(this, "value", void 0);

          isom_defineProperty(this, "copy", (buffer, offset) => {
            buffer.writeUInt32BE(this.value, offset);
          });

          isom_defineProperty(this, "load", (buffer, offset) => {
            this.value = buffer.readUInt32BE(offset);
          });

          this.value = scalar;
        }

      }

      class UInt32BEArray extends BoxElement {
        constructor(array) {
          super(array.length * 4);

          isom_defineProperty(this, "value", void 0);

          isom_defineProperty(this, "copy", (buffer, offset) => {
            for (let i = 0; i < this.value.length; ++i) {
              buffer.writeUInt32BE(this.value[i], offset + 4 * i);
            }
          });

          isom_defineProperty(this, "load", (buffer, offset) => {
            for (let i = 0; i < this.value.length; ++i) {
              this.value[i] = buffer.readUInt32BE(offset + 4 * i);
            }
          });

          this.value = array;
        }

      }

      class UInt64BE extends BoxElement {
        constructor(scalar = 0) {
          super(8);

          isom_defineProperty(this, "value", void 0);

          isom_defineProperty(this, "copy", (buffer, offset) => {
            const high = this.value / UINT32_RANGE | 0;
            const low = this.value - high * UINT32_RANGE;
            buffer.writeUInt32BE(high, offset);
            buffer.writeUInt32BE(low, offset + 4);
          });

          isom_defineProperty(this, "load", (buffer, offset) => {
            const high = buffer.readUInt32BE(offset);
            const low = buffer.readUInt32BE(offset + 4);
            this.value = high * UINT32_RANGE + low;
          });

          this.value = scalar;
        }

      }
      /**
       * Class factory for a parameter set element. A parameter set groups a size,
       * and an array of parameter sets consisting each of a size and a byte array.
       * These elements are used by the avcC box.
       * @param  [sizeMask=0x00]  A bit mask to use for the size.
       * @return An element type that groups parameter sets.
       */


      const createParameterSetArrayClass = function (sizeMask = 0x00) {
        return class ParameterSetArray extends BoxElement {
          /**
           * Takes an array of byte-arrays
           * @param  array The array of byte arrays
           */
          constructor(array) {
            super(0); // this.setLengths = array.map((byteArray) => byteArray.length);

            isom_defineProperty(this, "value", void 0);

            isom_defineProperty(this, "copy", (buffer, offset) => {
              let i = 0;

              for (const element of this.value) {
                element.copy(buffer, offset + i);
                i += element.byteLength;
              }
            });

            isom_defineProperty(this, "load", () => {
              /** noop */
            });

            this.value = array.reduce((flatArray, byteArray) => {
              return flatArray.concat(new UInt16BE(byteArray.length), new UInt8Array(byteArray));
            }, [new UInt8(sizeMask | array.length)]);
            this.byteLength = this.value.reduce((total, element) => total + element.byteLength, 0);
          }

        };
      };

      /**
       * Specifications for a selection of ISO BMFF box types.
       *
       * Most of these are defined in ISO/IEC 14496-12,
       * For specific boxes like avc1/avcC/mp4a/esds the exact document is specified
       * with the appropriate box/descriptor.
       *
       * To add a new box, follow the same pattern: you need an object with at least
       * the property 'box' (which is 'Box' or 'FullBox') and for non-container boxes
       * you need also a 'body' property specifying the elements that the box contains.
       * The values assigned to each element in the spec are used as default.
       */
      const BOXSPEC = {
        // File Type Box
        ftyp: {
          container: 'file',
          mandatory: true,
          quantity: 'one',
          box: 'Box',
          is_container: true,
          body: [['major_brand', CharArray, 'isom'], ['minor_version', UInt32BE, 0], ['compatible_brands', CharArray, 'mp41'] // ['compatible_brands1', CharArray, 'iso2'],
            // ['compatible_brands2', CharArray, 'dash'],
          ]
        },
        // Movie Container
        moov: {
          container: 'file',
          mandatory: true,
          quantity: 'one',
          box: 'Box',
          is_container: true
        },
        // Movie Data Box
        mdat: {
          container: 'file',
          mandatory: false,
          quantity: 'any',
          box: 'Box',
          is_container: false,
          body: []
        },
        // Movie Header Box
        mvhd: {
          container: 'moov',
          mandatory: true,
          quantity: 'one',
          box: 'FullBox',
          is_container: false,
          body: [['creation_time', UInt32BE, 0], ['modification_time', UInt32BE, 0], ['timescale', UInt32BE, 1000], // time-scale for entire presentation, default = milliseconds
          ['duration', UInt32BE, 0xffffffff], // length of entire presentation, default = undetermined
          ['rate', UInt32BE, 0x00010000], // fixed point 16.16, preferred playback rate, default = 1.0
          ['volume', UInt16BE, 0x0100], // fixed point 8.8, preferred playback volume, default = 1.0
          ['reserved', Empty, 10], // transformation matrix, default = unity
          ['matrix', UInt32BEArray, [0x00010000, 0, 0, 0, 0x00010000, 0, 0, 0, 0x40000000]], ['pre_defined', Empty, 24], ['next_track_ID', UInt32BE, 0xffffffff] // next unused track ID, default = unknown
          ]
        },
        // Track Container
        trak: {
          container: 'moov',
          mandatory: true,
          quantity: 'one+',
          box: 'Box',
          is_container: true
        },
        // Track Header Box
        tkhd: {
          container: 'trak',
          mandatory: true,
          quantity: 'one',
          box: 'FullBox',
          is_container: false,
          // Flag values for the track header:
          // 0x000001 Track_enabled: track enabled (otherwise ignored)
          // 0x000002 Track_in_movie: track used in presentation
          // 0x000004 Track_in_preview: used when previewing presentation
          config: {
            flags: 0x000003 // track enabled and used in presentation

          },
          body: [['creation_time', UInt32BE, 0], ['modification_time', UInt32BE, 0], ['track_ID', UInt32BE, 1], // Track identifier, cannot be 0
          ['reserved', Empty, 4], ['duration', UInt32BE, 0], // Duration of track using timescale of mvhd box
          ['reserved2', Empty, 8], ['layer', UInt16BE, 0], // Front-to-back ordering, lower is closer to viewer
          ['alternate_group', UInt16BE, 0], // Possible grouping of tracks
          ['volume', UInt16BE, 0x0100], // Track's relative audio volume 8.8 fixed point
          ['reserved3', Empty, 2], ['matrix', UInt32BEArray, [0x00010000, 0, 0, 0, 0x00010000, 0, 0, 0, 0x40000000]], ['width', UInt32BE, 0], // Visual presentation width, 16.16 fixed point
          ['height', UInt32BE, 0] // Visual presentation height, 16.16 fixed point
          ]
        },
        // Track Reference Box
        tref: {
          container: 'trak',
          mandatory: false,
          quantity: 'one-',
          box: 'Box',
          is_container: false
        },
        // Media Container
        mdia: {
          container: 'trak',
          mandatory: false,
          quantity: 'one',
          box: 'Box',
          is_container: true
        },
        // Media Header Box
        mdhd: {
          container: 'mdia',
          mandatory: false,
          quantity: 'one',
          box: 'FullBox',
          is_container: false,
          body: [['creation_time', UInt32BE, 0], ['modification_time', UInt32BE, 0], ['timescale', UInt32BE, 1000], // time-scale for entire presentation, default = milliseconds
          ['duration', UInt32BE, 0xffffffff], // length of entire presentation, default = undetermined
          ['language', UInt16BE, 0], // ISO 639-2 lanugage code, three lower-case letters, stored as
          ['pre_defined', UInt16BE, 0]]
        },
        // Handler Reference Box
        hdlr: {
          container: 'mdia',
          mandatory: true,
          quantity: 'one',
          box: 'FullBox',
          is_container: false,
          body: [['predefined', UInt32BE, 0], ['handler_type', CharArray, 'vide'], // 'vide', 'soun', or 'hint'
          ['reserved', Empty, 12], ['name', CharArray, 'VideoHandler\0']]
        },
        // Media Information Container
        minf: {
          container: 'mdia',
          mandatory: true,
          quantity: 'one',
          box: 'Box',
          is_container: true
        },
        // Video Media Header Box
        vmhd: {
          container: 'minf',
          mandatory: true,
          quantity: 'one',
          box: 'FullBox',
          is_container: false,
          config: {
            flags: 0x000001
          },
          body: [['graphicsmode', UInt16BE, 0], // Composition mode of the video track, 0 = overwrite
          ['opcolor', UInt16BEArray, [0, 0, 0]] // Red green blue, for use by graphics modes
          ]
        },
        // Sound Media Header Box
        smhd: {
          container: 'minf',
          mandatory: true,
          quantity: 'one',
          box: 'FullBox',
          is_container: false,
          body: [// Place mono track in stereo space:
            //  8.8 fixed point, 0 = center, -1.0 = left, 1.0 = right
            ['balance', UInt16BE, 0x0000], ['reserved', UInt16BE]]
        },
        // Data Information Container
        dinf: {
          container: 'minf',
          mandatory: true,
          quantity: 'one',
          box: 'Box',
          is_container: true
        },
        // Data Reference Box
        dref: {
          // When adding elements to this box, update the entry_count value!
          container: 'dinf',
          mandatory: true,
          quantity: 'one',
          box: 'FullBox',
          is_container: true,
          body: [['entry_count', UInt32BE, 0] // Number of entries.
          ]
        },
        'url ': {
          container: 'dref',
          mandatory: true,
          quantity: 'one+',
          box: 'FullBox',
          is_container: false,
          // Flag values:
          // 0x000001 Local reference, which means empty URL
          config: {
            flags: 0x000001
          },
          body: [// ['location', CharArray, ''],
          ]
        },
        // Sample Table Container
        stbl: {
          container: 'minf',
          mandatory: true,
          quantity: 'one',
          box: 'Box',
          is_container: true
        },
        // Decoding Time to Sample Box
        stts: {
          container: 'stbl',
          mandatory: true,
          quantity: 'one',
          box: 'FullBox',
          is_container: false,
          body: [['entry_count', UInt32BE, 0] // For each entry these two elements:
            // ['sample_count', UInt32BE, 0], // Number of consecutive samples with same delta
            // ['sample_delta', UInt32BE, 0], // Delta of each sample
          ]
        },
        stsd: {
          container: 'stbl',
          mandatory: true,
          quantity: 'one',
          box: 'FullBox',
          is_container: true,
          body: [['entry_count', UInt32BE, 1] // For each entry, one of these three boxes depending on the handler:
            // VisualSampleEntry, AudioSampleEntry, HintSampleEntry
          ]
        },

        /*
        ISO/IEC 14496-12:2005(E) 8.16.2 (pp. 28)
        aligned(8) abstract class SampleEntry (unsigned int(32) format)
          extends Box(format){
          const unsigned int(8)[6] reserved = 0;
          unsigned int(16) data_reference_index;
        }
        class VisualSampleEntry(codingname) extends SampleEntry (codingname){
          unsigned int(16) pre_defined = 0;
          const unsigned int(16) reserved = 0;
          unsigned int(32)[3] pre_defined = 0;
          unsigned int(16) width;
          unsigned int(16) height;
          template unsigned int(32) horizresolution = 0x00480000; // 72 dpi
          template unsigned int(32) vertresolution = 0x00480000; // 72 dpi
          const unsigned int(32) reserved = 0;
          template unsigned int(16) frame_count = 1;
          string[32] compressorname;
          template unsigned int(16) depth = 0x0018;
          int(16) pre_defined = -1;
        }
        ISO/IEC 14496-15:2004(E) 5.3.4.1 (pp. 14)
        class AVCSampleEntry() extends VisualSampleEntry (‘avc1’){
          AVCConfigurationBox config;
          MPEG4BitRateBox (); // optional
          MPEG4ExtensionDescriptorsBox (); // optional
        }
        */
        avc1: {
          container: 'stsd',
          mandatory: false,
          quantity: 'one',
          box: 'Box',
          is_container: true,
          body: [['reserved', Empty, 6], ['data_reference_index', UInt16BE, 1], ['pre_defined', UInt16BE, 0], ['reserved2', Empty, 2], ['pre_defined2', UInt32BEArray, [0, 0, 0]], ['width', UInt16BE, 1920], ['height', UInt16BE, 1080], ['horizresolution', UInt32BE, 0x00480000], ['vertresolution', UInt32BE, 0x00480000], ['reserved3', UInt32BE, 0], ['frame_count', UInt16BE, 1], ['compressorname', UInt8Array, isom_Buffer.alloc(32)], ['depth', UInt16BE, 0x0018], ['pre_defined3', UInt16BE, 0xffff]]
        },

        /*
        class AVCConfigurationBox extends Box(‘avcC’) {
          AVCDecoderConfigurationRecord() AVCConfig;
        }
        ISO/IEC 14496-15:2004(E) 5.2.4.1.1 (pp. 12)
        aligned(8) class AVCDecoderConfigurationRecord {
          unsigned int(8) configurationVersion = 1;
          unsigned int(8) AVCProfileIndication;
          unsigned int(8) profile_compatibility;
          unsigned int(8) AVCLevelIndication;
          bit(6) reserved = ‘111111’b;
          unsigned int(2) lengthSizeMinusOne;
          bit(3) reserved = ‘111’b;
          unsigned int(5) numOfSequenceParameterSets;
          for (i=0; i< numOfSequenceParameterSets; i++) {
            unsigned int(16) sequenceParameterSetLength ;
            bit(8*sequenceParameterSetLength) sequenceParameterSetNALUnit;
          }
          unsigned int(8) numOfPictureParameterSets;
          for (i=0; i< numOfPictureParameterSets; i++) {
            unsigned int(16) pictureParameterSetLength;
            bit(8*pictureParameterSetLength) pictureParameterSetNALUnit;
          }
        }
        */
        avcC: {
          container: 'avc1',
          mandatory: false,
          quantity: 'one',
          box: 'Box',
          is_container: false,
          body: [['configurationVersion', UInt8, 1], ['AVCProfileIndication', UInt8, 0x4d], ['profile_compatibility', UInt8, 0x00], ['AVCLevelIndication', UInt8, 0x29], // size = reserved 0b111111 + 0b11 NALUnitLength (0b11 = 4-byte)
          ['lengthSizeMinusOne', UInt8, 0b11111111], // Example SPS (length 20):
          //   [0x67, 0x4d, 0x00, 0x29, 0xe2, 0x90, 0x0f, 0x00,
          //    0x44, 0xfc, 0xb8, 0x0b, 0x70, 0x10, 0x10, 0x1a,
          //    0x41, 0xe2, 0x44, 0x54]
          // number of sets = reserved 0b111 + number of SPS (0b00001 = 1)
          // ['numOfSequenceParameterSets', UInt8, 0b11100001],
          // ['sequenceParameterSetLength', UInt16BE, 0], // Lenght in bytes of the SPS that follows
          // ['sequenceParameterSetNALUnit', UInt8Array, []],
          // These are packed in a single custom element:
          ['sequenceParameterSets', createParameterSetArrayClass(0xe0), []], // Example PPS (length 4):
          //   [0x68, 0xee, 0x3c, 0x80]
          // ['numOfPictureParameterSets', UInt8, 1], // number of PPS
          // ['pictureParameterSetLength', UInt16BE, 0], // Length in bytes of the PPS that follows
          // ['pictureParameterSetNALUnit', UInt8Array, []]
          // These are packed in a single custom element:
          ['pictureParameterSets', createParameterSetArrayClass(), []]]
        },

        /*
        ISO/IEC 14496-12:2005(E) 8.16.2 (pp. 28)
        aligned(8) abstract class SampleEntry (unsigned int(32) format)
          extends Box(format){
          const unsigned int(8)[6] reserved = 0;
          unsigned int(16) data_reference_index;
        }
        class AudioSampleEntry(codingname) extends SampleEntry (codingname){
          const unsigned int(32)[2] reserved = 0;
          template unsigned int(16) channelcount = 2;
          template unsigned int(16) samplesize = 16;
          unsigned int(16) pre_defined = 0;
          const unsigned int(16) reserved = 0 ;
          template unsigned int(32) samplerate = {timescale of media}<<16;
        }
        */
        mp4a: {
          container: 'stsd',
          mandatory: false,
          quantity: 'one',
          box: 'Box',
          is_container: true,
          body: [['reserved', Empty, 6], ['data_reference_index', UInt16BE, 1], ['reserved2', UInt32BEArray, [0, 0]], ['channelcount', UInt16BE, 2], ['samplesize', UInt16BE, 16], ['pre_defined', UInt16BE, 0], ['reserved3', UInt16BE, 0], ['samplerate', UInt32BE, 0] // 16.16 bit floating point
          ]
        },

        /* Elementary stream descriptor
        basic box that holds only an ESDescriptor
        reference: 'https://developer.apple.com/library/content/documentation/QuickTime/
        QTFF/QTFFChap3/qtff3.html#//apple_ref/doc/uid/TP40000939-CH205-124774'
        Descriptors have a tag that identifies them, specified in ISO/IEC 14496-1 8.3.12
        ISO/IEC 14496-1 8.3.3 (pp. 24) ES_Descriptor
        aligned(8) class ES_Descriptor : bit(8) tag=ES_DescrTag {
          bit(8) length;
          bit(16) ES_ID;
          bit(1) streamDependenceFlag;
          bit(1) URL_Flag;
          const bit(1) reserved=1;
          bit(5) streamPriority;
          if (streamDependenceFlag)
            bit(16) dependsOn_ES_ID;
          if (URL_Flag)
            bit(8) URLstring[length-3-(streamDependencFlag*2)];
          ExtensionDescriptor extDescr[0 .. 255];
          LanguageDescriptor langDescr[0 .. 1];
          DecoderConfigDescriptor decConfigDescr;
          SLConfigDescriptor slConfigDescr;
          IPI_DescPointer ipiPtr[0 .. 1];
          IP_IdentificationDataSet ipIDS[0 .. 1];
          QoS_Descriptor qosDescr[0 .. 1];
        }
        aligned(8) class DecoderConfigDescriptor
          : bit(8) tag=DecoderConfigDescrTag {
          bit(8) length;
          bit(8) objectProfileIndication;
          bit(6) streamType;
          bit(1) upStream;
          const bit(1) reserved=1;
          bit(24) bufferSizeDB;
          bit(32) maxBitrate;
          bit(32) avgBitrate;
          DecoderSpecificInfo decSpecificInfo[];
        }
        aligned(8) class DecoderSpecificInfoShort extends DecoderSpecificInfo
        : bit(8) tag=DecSpecificInfoShortTag
        {
          bit(8) length;
          bit(8) specificInfo[length];
        }
        aligned(8) class SLConfigDescriptor : bit(8) tag=SLConfigDescrTag {
          bit(8) length;
          bit(8) predefined;
          if (predefined==0) {
            bit(1) useAccessUnitStartFlag;
            bit(1) useAccessUnitEndFlag;
            bit(1) useRandomAccessPointFlag;
            bit(1) usePaddingFlag;
            bit(1) useTimeStampsFlag;
            bit(1) useWallClockTimeStampFlag;
            bit(1) useIdleFlag;
            bit(1) durationFlag;
            bit(32) timeStampResolution;
            bit(32) OCRResolution;
            bit(8) timeStampLength; // must be less than 64
            bit(8) OCRLength;
            // must be less than 64
            bit(8) AU_Length;
            // must be less than 32
            bit(8) instantBitrateLength;
            bit(4) degradationPriorityLength;
            bit(4) seqNumLength;
            if (durationFlag) {
              bit(32) timeScale;
              bit(16) accessUnitDuration;
              bit(16) compositionUnitDuration;
            }
            if (!useTimeStampsFlag) {
              if (useWallClockTimeStampFlag)
                double(64) wallClockTimeStamp;
              bit(timeStampLength) startDecodingTimeStamp;
              bit(timeStampLength) startCompositionTimeStamp;
            }
          }
          aligned(8) bit(1) OCRstreamFlag;
          const bit(7) reserved=0b1111.111;
          if (OCRstreamFlag)
            bit(16) OCR_ES_Id;
        }
        */
        esds: {
          container: 'mp4a',
          mandatory: false,
          quantity: 'one',
          box: 'FullBox',
          is_container: false,
          body: [['ES_DescrTag', UInt8, 3], // length of the remainder of this descriptor in byte,
          // excluding trailing embedded descriptors.
          ['ES_DescrLength', UInt8, 25], ['ES_ID', UInt16BE, 1], ['flagsAndStreamPriority', UInt8, 0], ['DecoderConfigDescrTag', UInt8, 4], // length of the remainder of this descriptor in bytes,
          // excluding trailing embedded descriptors.
          ['DecoderConfigDescrLength', UInt8, 17], ['objectProfileIndication', UInt8, 0x40], ['streamTypeUpstreamReserved', UInt8, 0x15], ['bufferSizeDB', UInt8Array, [0, 0, 0]], ['maxBitRate', UInt32BE, 0], ['avgBitRate', UInt32BE, 0], ['DecSpecificInfoShortTag', UInt8, 5], ['DecSpecificInfoShortLength', UInt8, 2], ['audioConfigBytes', UInt16BE, 0], ['SLConfigDescrTag', UInt8, 6], ['SLConfigDescrLength', UInt8, 1], ['SLConfigDescrPredefined', UInt8, 0x02] // ISO use
          ]
        },
        // Sample Size Box
        stsz: {
          container: 'stbl',
          mandatory: true,
          quantity: 'one',
          box: 'FullBox',
          is_container: false,
          body: [['sample_size', UInt32BE, 0], ['sample_count', UInt32BE, 0] // For each sample up to sample_count, append an entry_size:
            // ['entry_size', UInt32BE, ],
          ]
        },
        // Sample To Chunk Box
        stsc: {
          container: 'stbl',
          mandatory: true,
          quantity: 'one',
          box: 'FullBox',
          is_container: false,
          body: [['entry_count', UInt32BE, 0] // For each entry up to entry_count, append these elements:
            // ['first_chunk', UInt32BE, ],
            // ['samples_per_chunk', UInt32BE, ],
            // ['samples_description_index', UInt32BE, ],
          ]
        },
        // Chunk Offset Box
        stco: {
          container: 'stbl',
          mandatory: true,
          quantity: 'one',
          box: 'FullBox',
          is_container: false,
          body: [['entry_count', UInt32BE, 0] // For each entry up to entry_count, append an element:
            // ['chunk_offset', UInt32BE, ],
          ]
        },
        // Sync Sample Box
        stss: {
          container: 'stbl',
          mandatory: false,
          quantity: 'one-',
          box: 'FullBox',
          is_container: false,
          body: [['entry_count', UInt32BE, 0] // For each entry up to entry_count, append an element:
            // ['sample_number', UInt32BE, ],
          ]
        },
        // Edit Box
        edts: {
          container: 'trak',
          mandatory: false,
          quantity: 'one-',
          box: 'Box',
          is_container: true
        },
        // Edit List Box
        elst: {
          container: 'edts',
          mandatory: false,
          quantity: 'one-',
          box: 'FullBox',
          is_container: false,
          body: [['entry_count', UInt32BE, 1], ['segment_duration', UInt32BE, 0], ['media_time', UInt32BE, 0xffffffff], ['media_rate_integer', UInt16BE, 1], ['media_rate_fraction', UInt16BE, 0]]
        },
        mvex: {
          container: 'moov',
          mandatory: false,
          quantity: 'one-',
          box: 'Box',
          is_container: true
        },
        mehd: {
          container: 'mvex',
          mandatory: false,
          quantity: 'one-',
          box: 'FullBox',
          is_container: false,
          body: [['fragment_duration', UInt32BE, 0] // Total duration of movie
          ]
        },
        trex: {
          container: 'mvex',
          mandatory: true,
          quantity: 'one+',
          box: 'FullBox',
          is_container: false,
          body: [['track_ID', UInt32BE, 1], // The track to which this data is applicable
          ['default_sample_description_index', UInt32BE, 1], ['default_sample_duration', UInt32BE, 0], ['default_sample_size', UInt32BE, 0], ['default_sample_flags', UInt32BE, 0]]
        },
        moof: {
          container: 'file',
          mandatory: false,
          quantity: 'zero+',
          box: 'Box',
          is_container: false
        },
        mfhd: {
          container: 'moof',
          mandatory: true,
          quantity: 'one',
          box: 'FullBox',
          is_container: false,
          body: [['sequence_number', UInt32BE, 0] // A number associated with this fragment
          ]
        },
        traf: {
          container: 'moof',
          mandatory: false,
          quantity: 'zero+',
          box: 'Box',
          is_container: true
        },
        tfhd: {
          container: 'traf',
          mandatory: true,
          quantity: 'one',
          box: 'FullBox',
          is_container: false,
          // Flag values for the track fragment header:
          // 0x000001 base-data-offset-present
          // 0x000002 sample-description-index-present
          // 0x000008 default-sample-duration-present
          // 0x000010 default-sample-size-present
          // 0x000020 default-sample-flags-present
          // 0x010000 duration-is-empty
          // 0x020000 default-base-is-moof
          config: {
            flags: 0x000020 // default sample flags present

          },
          body: [['track_ID', UInt32BE, 1], // The track to which this data is applicable
          // ['base_data_offset', UInt64BE, 0],
          // ['default_sample_description_index', UInt32BE, 0],
          // ['default_sample_duration', UInt32BE, 0],
          // ['default_sample_size', UInt32BE, 0],
          ['default_sample_flags', UInt32BE, 0]]
        },
        tfdt: {
          container: 'traf',
          mandatory: false,
          quantity: 'one-',
          box: 'FullBox',
          is_container: false,
          config: {
            version: 1 // Version 1 uses 64-bit value for baseMediaDecodeTime

          },
          body: [['baseMediaDecodeTime', UInt64BE, 0]]
        },
        trun: {
          container: 'traf',
          mandatory: false,
          quantity: 'zero+',
          box: 'FullBox',
          is_container: false,
          // Flag values for the track fragment header:
          // 0x000001 data-offset-present
          // 0x000004 first-sample-flags-present
          // 0x000100 sample-duration-present
          // 0x000200 sample-size-present
          // 0x000400 sample-flags-present
          // 0x000800 sample-composition-time-offsets-present
          config: {
            flags: 0x000305 // default sample flags present

          },
          body: [['sample_count', UInt32BE, 1], // How many samples there are
          ['data_offset', UInt32BE, 0], ['first_sample_flags', UInt32BE, 0], ['sample_duration', UInt32BE, 0], ['sample_size', UInt32BE, 0] // ['sample_flags', UInt32BE, 0],
            // ['sample_composition_time_offset', UInt32BE, 0],
          ]
        },
        // Unknown Box, used for parsing
        '....': {
          box: 'Box',
          is_container: false,
          body: []
        },
        // File Box, special box without any headers
        file: {
          box: 'None',
          is_container: true,
          mandatory: true,
          quantity: 'one'
        }
      };
      /**
       * Helper functions to generate some standard elements that are needed by
       * all types of boxes.
       * All boxes have a length and type, where so-called full boxes have an
       * additional 4-bytes (1-byte version and 3-byte flags fields).
       */

      class Header {
        static None () {
          return [];
        }

        static Box (type) {
          return [['size', UInt32BE, 0], ['type', CharArray, type]];
        }

        static FullBox (type) {
          return [].concat(this.Box(type), [['version', UInt8, 0x00], ['flags', UInt24BE, 0x000000]]);
        }

      }
      /**
       * Box class.
       *
       * Defines a box as an entity similar to a C struct, where the struct is
       * represented by a Map of elements.
       * Each element is an object with at least:
       *  - a 'byteLength' property (size of element in bytes)
       *  - a 'copy' method (BufferMutation signature)
       */


      class Box extends BoxElement {
        /**
         * Create a new Box.
         * @param  type   4-character ASCII string
         * @param  config Configuration holding (key: value) fields
         */
        constructor(type, config) {
          super(0);

          isom_defineProperty(this, "type", void 0);

          isom_defineProperty(this, "config", void 0);

          isom_defineProperty(this, "struct", void 0);

          this.type = type;
          const spec = BOXSPEC[this.type];

          if (spec === undefined) {
            throw new Error(`unknown box type: ${type}`);
          }

          this.config = Object.assign({}, spec.config, config);
          const header = Header[spec.box](this.type);
          const body = spec.body || []; // Uglify changes the name of the original class, so this doesn't work.
          // TODO: find a better way to check for this.
          // if (spec.body === undefined && this.constructor.name !== 'Container') {
          //   throw new Error(`Body missing but '${type}' is not a container box`);
          // }
          // Initialize all elements, an element is something with a byteLength

          this.struct = new Map();
          let offset = 0;

          for (const [key, Type, defaultValue] of [].concat(header, body)) {
            if (this.has(key)) {
              throw new Error('Trying to add existing key');
            }

            let value = defaultValue;

            if (this.config[key]) {
              value = this.config[key];
            }

            const element = new Type(value);
            this.struct.set(key, {
              offset,
              element
            });
            offset += element.byteLength;
          }

          this.byteLength = offset;
        }
        /**
         * Get access to an element based on it's name.
         * @param  key The element's name
         * @return Object with 'byteLength' property and 'copy' method
         */


        element (key) {
          const value = this.struct.get(key);

          if (value === undefined) {
            throw new Error('invalid key');
          }

          return value.element;
        }
        /**
         * Set an element's value.
         * @param  key The element's name
         * @param  value The element's (new) value
         */


        set (key, value) {
          this.element(key).value = value;
        }
        /**
         * Get an element's value.
         * @param  key The element's name
         * @return The element's value
         */


        get (key) {
          return this.element(key).value;
        }
        /**
         * Get an element's offset.
         * @param  key The element's name
         * @return The element's offset
         */


        offset (key) {
          const value = this.struct.get(key);

          if (value === undefined) {
            throw new Error('invalid key');
          }

          return value.offset;
        }
        /**
         * Check if a certain element exists
         * @param  key The element's name
         * @return true if the element is known, false if not
         */


        has (key) {
          return this.struct.has(key);
        }
        /**
         * Add a new element to the box.
         * @param key     A _new_ non-existing element name.
         * @param element Something with a 'byteLength' property and 'copy' method.
         * @return this box, so that 'add' can be used in a chain
         */


        add (key, element) {
          if (this.has(key)) {
            throw new Error('Trying to add existing key');
          }

          this.struct.set(key, {
            offset: this.byteLength,
            element
          });
          this.byteLength += element.byteLength;
          return this;
        }
        /**
         * Create a buffer and copy all element values to it.
         * @return Data representing the box.
         */


        buffer () {
          const buffer = isom_Buffer.allocUnsafe(this.byteLength);
          this.copy(buffer);
          return buffer;
        }
        /**
         * Copy all values of the box into an existing buffer.
         * @param  buffer     The target buffer to accept the box data
         * @param  [offset=0] The number of bytes into the target to start at.
         */


        copy (buffer, offset = 0) {
          // Before writing, make sure the size property is set correctly.
          this.set('size', this.byteLength);

          for (const entry of this.struct.values()) {
            entry.element.copy(buffer, offset + entry.offset);
          }
        }
        /**
         * Read element values from a box's data representation.
         * @param  buffer     The source buffer with box data
         * @param  [offset=0] The number of bytes into the source to start at.
         */


        load (buffer, offset = 0) {
          for (const entry of this.struct.values()) {
            if (entry.element.load !== undefined) {
              entry.element.load(buffer, offset + entry.offset);
            }
          }
        }
        /**
         * Pretty-format an entire box as an element/box hierarchy.
         * @param  [indent=0] How large an indentation to use for the hierarchy
         */


        format (indent = 0) {
          const lines = [' '.repeat(indent) + `[${this.type}] (${this.byteLength})`];

          for (const [key, entry] of this.struct) {
            const element = entry.element;

            if (element.format !== undefined) {
              lines.push(element.format(indent + 2));
            } else {
              lines.push(' '.repeat(indent + 2) + `${key} = ${element.value} (${element.byteLength})`);
            }
          }

          return lines.join('\n');
        }
        /**
         * Pretty-print an entire box as an element/box hierarchy.
         * @param  [indent=0] How large an indentation to use for the hierarchy
         */


        print (indent) {
          console.warn(this.format(indent));
        }

      }
      /**
       * Container class
       *
       * special box with an 'add' method which allows appending of other boxes,
       * and a 'parse' method to extract contained boxes.
       */

      class Container extends Box {
        /**
         * Create a new container box
         * @param  type   4-character ASCII string
         * @param  config Configuration holding (key: value) fields
         * @param  boxes  One or more boxes to append.
         */
        constructor(type, config, ...boxes) {
          super(type, config);

          isom_defineProperty(this, "boxSize", void 0);

          this.boxSize = 0;
          this.append(...boxes);
        }
        /**
         * Add one or more boxes to the container.
         * @param boxes The box(es) to append
         * @return this container, so that add can be used in a chain
         */


        append (...boxes) {
          for (const box of boxes) {
            this.add(`box_${this.boxSize++}`, box);
          }

          return this;
        }
        /**
         * Parse a container box by looking for boxes that it contains, and
         * recursively proceed when it is another container.
         *
         * FIXME: this cannot properly handle different versions of the FullBox,
         * currenlty the loader is hardcoded to the version used in this file.
         * Also, appearance of an esds box is assumed to be AAC audio information,
         * while the avcC box signals H.264 video information.
         *
         * @param  data The data to parse.
         */


        parse (data) {
          const tracks = [];

          while (data.byteLength > 0) {
            const type = new CharArray('....');
            type.load(data, 4);
            const boxType = type.value;
            const spec = BOXSPEC[boxType];
            let box;

            if (spec !== undefined) {
              if (spec.is_container) {
                box = new Container(boxType);
                box.load(data);
                const boxTracks = box.parse(data.slice(box.byteLength, box.get('size')));
                tracks.push(...boxTracks);
              } else {
                box = new Box(boxType);
                box.load(data); // Handle 2 kinds of tracks with streaming MP4: video or audio

                if (boxType === 'avcC') {
                  const profile = box.element('AVCProfileIndication').value.toString(16).padStart(2, 0);
                  const compat = box.element('profile_compatibility').value.toString(16).padStart(2, 0);
                  const level = box.element('AVCLevelIndication').value.toString(16).padStart(2, 0);
                  tracks.push({
                    type: 'video',
                    mime: `avc1.${profile}${compat}${level}`
                  });
                } else if (boxType === 'esds') {
                  const audioConfigBytes = box.element('audioConfigBytes').value;
                  const objectTypeIndication = audioConfigBytes >>> 11 & 0x001f;
                  tracks.push({
                    type: 'audio',
                    mime: `mp4a.40.${objectTypeIndication}`
                  });
                }
              }
            } else {
              box = new Box('....');
              box.load(data);
              box.type = box.get('type');
            }

            this.append(box);
            data = data.slice(box.get('size'));
          }

          return tracks;
        }

      }
      ;// CONCATENATED MODULE: ./lib/components/mp4muxer/helpers/aacSettings.ts
      // All audio object types defined in ISO/IEC 14496-3 pp. 40

      const AUDIO_OBJECT_TYPE_NAMES = {
        1: 'AAC Main',
        2: 'AAC LC'
      }; // All frequencies defined in ISO/IEC 14496-3 pp. 42

      const FREQUENCY_VALUES = {
        0: '96 kHz',
        1: '88.2 kHz',
        2: '64 kHz',
        3: '48 kHz',
        4: '44.1 kHz',
        5: '32 kHz',
        6: '24 kHz',
        7: '22.05 kHz',
        8: '16 kHz',
        9: '12 kHz',
        10: '11.025 kHz',
        11: '8 kHz',
        12: '7.35 kHz'
      }; // All channels defined in ISO/IEC 14496-3 pp. 42

      const CHANNEL_CONFIG_NAMES = {
        1: 'Mono',
        2: 'Stereo'
      };

      const aacEncodingName = audioConfigBytes => {
        const audioObjectType = audioConfigBytes >>> 11 & 0x001f;
        const frequencyIndex = audioConfigBytes >>> 7 & 0x000f;
        const channelConfig = audioConfigBytes >>> 3 & 0x000f;
        const audioType = AUDIO_OBJECT_TYPE_NAMES[audioObjectType] || `AAC (${audioObjectType})`;
        const samplingRate = FREQUENCY_VALUES[frequencyIndex] || 'unknown';
        const channels = CHANNEL_CONFIG_NAMES[channelConfig] || channelConfig.toString();
        return {
          coding: audioType,
          samplingRate,
          channels
        };
      };

      const aacSettings = (media, date, trackId) => {
        /*
         * Example SDP media segment for MPEG4-GENERIC audio:
         *
         {
           "type": "audio",
           "port": "0",
           "proto": "RTP/AVP",
           "fmt": "97",
           "connectionData": {
             "netType": "IN",
             "addrType": "IP4",
             "connectionAddress": "0.0.0.0"
           },
           "bwtype": "AS",
           "bandwidth": "32",
           "rtpmap": {
             "payloadType": "97",
             "encodingName": "MPEG4-GENERIC",
             "clockrate": "16000",
             "encodingParameters": "1"
           },
           "fmtp": {
             "format": "97",
             "parameters": {
               "streamtype": "5",
               "profile-level-id": "2",
               "mode": "AAC-hbr",
               "config": "1408",
               "sizelength": "13",
               "indexlength": "3",
               "indexdeltalength": "3",
               "bitrate": "32000"
             }
           },
           "control": "rtsp://hostname/axis-media/media.amp/stream=1?audio=1"
         }
          */
        const bitrate = Number(media.fmtp.parameters.bitrate) || 320000;
        const audioConfigBytes = parseInt(media.fmtp.parameters.config, 16);
        const audioObjectType = audioConfigBytes >>> 11 & 0x001f;
        return {
          tkhd: {
            track_ID: trackId,
            creation_time: date,
            modification_time: date,
            width: 0,
            height: 0,
            volume: 1
          },
          mdhd: {
            timescale: Number(media.rtpmap.clockrate),
            creation_time: date,
            modification_time: date,
            duration: 0
          },
          hdlr: {
            handler_type: 'soun',
            name: 'SoundHandler\0' // 00 soundhandler, add 00 if things screws up

          },
          mediaHeaderBox: new Box('smhd'),
          sampleEntryBox: new Container('mp4a', {
            samplerate: media.rtpmap.clockrate << 16 >>> 0 // FIXME: Is this  correct?

          }, new Box('esds', {
            audioConfigBytes: audioConfigBytes,
            // Converting from hex string to int
            maxBitRate: bitrate,
            avgBitRate: bitrate
          })),

          /*
          https://wiki.multimedia.cx/index.php/Understanding_AAC
          AAC is a variable bitrate (VBR) block-based codec where each block decodes
          to 1024 time-domain samples, which means that a single block (or frame?) is
          1024 ticks long, which we take as default here.
          */
          defaultFrameDuration: 1024,
          // MIME type
          mime: `mp4a.40.${audioObjectType}`,
          codec: aacEncodingName(audioConfigBytes)
        };
      };
      ;// CONCATENATED MODULE: ./lib/components/mp4muxer/helpers/utils.ts
      function b64ToUint6 (nChr) {
        return nChr > 64 && nChr < 91 ? nChr - 65 : nChr > 96 && nChr < 123 ? nChr - 71 : nChr > 47 && nChr < 58 ? nChr + 4 : nChr === 43 ? 62 : nChr === 47 ? 63 : 0;
      } // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Base64_encoding_and_decoding

      function base64DecToArr (sBase64, nBlocksSize) {
        const sB64Enc = sBase64.replace(/[^A-Za-z0-9+/]/g, '');
        const nInLen = sB64Enc.length;
        const nOutLen = nBlocksSize ? Math.ceil((nInLen * 3 + 1 >> 2) / nBlocksSize) * nBlocksSize : nInLen * 3 + 1 >> 2;
        const taBytes = new Uint8Array(nOutLen);
        let nMod3;
        let nMod4;
        let nUint24 = 0;
        let nOutIdx = 0;

        for (let nInIdx = 0; nInIdx < nInLen; nInIdx++) {
          nMod4 = nInIdx & 3;
          nUint24 |= b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4;

          if (nMod4 === 3 || nInLen - nInIdx === 1) {
            for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {
              taBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255;
            }

            nUint24 = 0;
          }
        }

        return taBytes;
      }
      ;// CONCATENATED MODULE: ./lib/components/mp4muxer/helpers/bufferreader.ts
      function bufferreader_defineProperty (obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

      /**
       * Defines functions for reading from a binary buffer. Works similair to the
       * DataView object, but uses bitshifts instead for performance.
       * @class BufferReader
       * @constructor
       * @param buffer - An ArrayBuffer to be read from.
       */
      class BufferReader {
        constructor(buffer) {
          bufferreader_defineProperty(this, "_buffer", void 0);

          bufferreader_defineProperty(this, "_dataView", void 0);

          bufferreader_defineProperty(this, "_offset", void 0);

          bufferreader_defineProperty(this, "_bitpos", void 0);

          bufferreader_defineProperty(this, "_byte", void 0);

          this._buffer = buffer;
          this._dataView = new DataView(this._buffer);
          this._offset = 0;
          this._bitpos = 0;
          this._byte = 0;
        }
        /**
         * Reads 8-bit of data from the buffer.
         * @method readUint8
         * @param  offset - Index in the buffer.
         * @return An unsigned 8-bit integer.
         */


        readUint8 (offset) {
          return this._dataView.getUint8(offset);
        }
        /**
         * Reads 16-bit of data from the buffer.
         * @method readUint16
         * @param  offset - Index in the buffer.
         * @return An unsigned 16-bit integer.
         */


        readUint16 (offset) {
          return this._dataView.getUint16(offset);
        }
        /**
         * Reads 32-bit of data from the buffer.
         * @method readUint32
         * @param  offset - Index in the buffer.
         * @return An unsigned 32-bit integer.
         */


        readUint32 (offset) {
          return this._dataView.getUint32(offset);
        }
        /**
         * Reads the next byte of data from the buffer and increaments the offset.
         * @method readNext
         * @return {Number} An unsigned 8-bit integer.
         */


        readNext () {
          const value = this.readUint8(this._offset);
          this._offset += 1;
          return value;
        }

        readBits (length) {
          if (length > 32 || length === 0) {
            throw new Error('length has to be between 0 - 31 bits');
          }

          let result = 0;

          for (let i = 1; i <= length; ++i) {
            if (this._bitpos === 0) {
              /* Previous byte all read out. Get a new one. */
              this._byte = this.readNext();
            }
            /* Shift result one left to make room for another bit,
            then add the next bit on the stream. */


            result = result << 1 | this._byte >> 8 - ++this._bitpos & 0x01;
            this._bitpos %= 8;
          }

          return result;
        }

        readUnsignedExpGolomb () {
          let bitsToRead = 0;

          while (this.readBits(1) !== 1) {
            bitsToRead++;
          }

          if (bitsToRead === 0) {
            return 0;
            /* Easy peasy, just a single 1. This is 0 in exp golomb */
          }

          if (bitsToRead >= 31) {
            throw new Error('read unsigned exponential Golomb: internal error');
          }
          /* Read all bits part of this number */


          let n = this.readBits(bitsToRead);
          /* Move in the 1 read by while-statement above */

          n |= 0x1 << bitsToRead;
          return n - 1;
          /* Because result in exp golomb is one larger */
        }

        readSignedExpGolomb () {
          let r = this.readUnsignedExpGolomb();

          if (r & 0x01) {
            r = r + 1 >> 1;
          } else {
            r = -(r >> 1);
          }

          return r;
        }
        /**
         * Returns the size of the buffer
         * @method readSize
         * @return {Number} The buffer size.
         */


        size () {
          return this._buffer.byteLength;
        }
        /**
         * Returns an instance of the buffer as an unsigned 8-bit integer array.
         * @method getUint8Array
         * @return {Uint8Array} Unsigned 8-bit integer representation of the buffer
         */


        getUint8Array () {
          return new Uint8Array(this._buffer);
        }
        /**
         * Returns the buffer object
         * @method getArrayBuffer
         * @return {ArrayBuffer} The buffer used the BufferReader
         */


        getArrayBuffer () {
          return this._buffer;
        }

      }
      ;// CONCATENATED MODULE: ./lib/components/mp4muxer/helpers/spsparser.ts
      function spsparser_defineProperty (obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }


      class SPSParser {
        constructor(buffer) {
          spsparser_defineProperty(this, "reader", void 0);

          this.reader = new BufferReader(buffer);
        }

        parse () {
          // nalhdr
          this.reader.readNext();
          const profile = this.reader.readNext(); // constraints

          this.reader.readNext();
          const level = this.reader.readNext(); // seqParameterSetId

          this.reader.readUnsignedExpGolomb();

          if ([100, 110, 122, 244, 44, 83, 86, 118].includes(profile)) {
            const chromaFormat = this.reader.readUnsignedExpGolomb();

            if (chromaFormat === 3) {
              // Separate color plane flag
              this.reader.readBits(1);
            } // bitDepthLumaMinus8


            this.reader.readUnsignedExpGolomb(); // bitDepthChromaMinus8

            this.reader.readUnsignedExpGolomb(); // qpPrimeYZeroTransformBypassFlag

            this.reader.readBits(1);
            const seqScalingMatrix = this.reader.readBits(1);

            if (seqScalingMatrix) {
              for (let k = 0; k < (chromaFormat !== 3 ? 8 : 12); k++) {
                // seqScalingListPresentFlag
                this.reader.readBits(1); // TODO: More logic goes here..
              }
            }
          } // log2MaxFrameNumMinus4


          this.reader.readUnsignedExpGolomb();
          const picOrderCntType = this.reader.readUnsignedExpGolomb();

          if (picOrderCntType === 0) {
            // log2MaxPicOrderCntLsbMinus4
            this.reader.readUnsignedExpGolomb();
          } else if (picOrderCntType === 1) {
            let numRefFramesInPic = 0;
            this.reader.readBits(1);
            this.reader.readSignedExpGolomb();
            this.reader.readSignedExpGolomb();
            numRefFramesInPic = this.reader.readUnsignedExpGolomb();

            for (let i = 0; i < numRefFramesInPic; i++) {
              this.reader.readSignedExpGolomb();
            }
          } // maxNumRefFrames


          this.reader.readUnsignedExpGolomb(); // gapsInFrameNumValueAllowedFlag

          this.reader.readBits(1);
          const picWidthInMbsMinus1 = this.reader.readUnsignedExpGolomb();
          const picHeightInMapUnitsMinus1 = this.reader.readUnsignedExpGolomb();
          const picFrameMbsOnlyFlag = this.reader.readBits(1); // direct8x8InferenceFlag

          this.reader.readBits(1);
          const frameCroppingFlag = this.reader.readBits(1);
          const frameCropLeftOffset = frameCroppingFlag ? this.reader.readUnsignedExpGolomb() : 0;
          const frameCropRightOffset = frameCroppingFlag ? this.reader.readUnsignedExpGolomb() : 0;
          const frameCropTopOffset = frameCroppingFlag ? this.reader.readUnsignedExpGolomb() : 0;
          const frameCropBottomOffset = frameCroppingFlag ? this.reader.readUnsignedExpGolomb() : 0;
          const w = (picWidthInMbsMinus1 + 1) * 16 - frameCropLeftOffset * 2 - frameCropRightOffset * 2;
          const h = (2 - picFrameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16 - frameCropTopOffset * 2 - frameCropBottomOffset * 2;
          return {
            profile: profile,
            level: level / 10.0,
            width: w,
            height: h
          };
        }

      }
      ;// CONCATENATED MODULE: ./lib/components/mp4muxer/helpers/h264Settings.ts



      const PROFILE_NAMES = {
        66: 'Baseline',
        77: 'Main',
        100: 'High'
      };

      const h264EncodingName = profileLevelId => {
        const profileCode = parseInt(profileLevelId.substr(0, 2), 16);
        const levelCode = parseInt(profileLevelId.substr(4, 2), 16);
        const profile = PROFILE_NAMES[profileCode] || profileCode.toString();
        const level = (levelCode / 10).toFixed(1);
        return {
          coding: 'H.264',
          profile,
          level
        };
      };

      const h264Settings = (media, date, trackId) => {
        /*
         * Example SDP media segment for H264 audio:
         *
          {
           "type": "video",
           "port": "0",
           "proto": "RTP/AVP",
           "fmt": "96",
           "connectionData": {
             "netType": "IN",
             "addrType": "IP4",
             "connectionAddress": "0.0.0.0"
           },
           "bwtype": "AS",
           "bandwidth": "50000",
           "rtpmap": {
             "payloadType": "96",
             "encodingName": "H264",
             "clockrate": "90000"
           },
           "fmtp": {
             "format": "96",
             "parameters": {
               "packetization-mode": "1",
               "profile-level-id": "4d0029",
               "sprop-parameter-sets": "Z00AKeKQDwBE/LgLcBAQGkHiRFQ=,aO48gA=="
             }
           },
           "control": "rtsp://hostname/axis-media/media.amp/stream=0?audio=1",
           "framerate": "25.000000",
           "transform": [[1,0,0],[0,1,0],[0,0,1]]
         },
          */
        const profileLevelId = media.fmtp.parameters['profile-level-id'];
        const parameterSets = media.fmtp.parameters['sprop-parameter-sets'].split(',').map(base64DecToArr); // We assume the first set is _the_ SPS (no support for multiple).

        const sps = parameterSets.slice(0, 1); // The remaining sets are all PPS to support more than one.

        const pps = parameterSets.slice(1);
        const parsedSps = new SPSParser(sps[0].buffer).parse(); // If media framerate is missing in SDP, it is not possible to calculate
        // the frame duration. Use a fallback value (90000 Hz / 25 fps)

        const FALLBACK_FRAME_DURATION = 3600;
        return {
          mediaHeaderBox: new Box('vmhd'),
          sampleEntryBox: new Container('avc1', {
            width: parsedSps.width,
            height: parsedSps.height
          }, new Box('avcC', {
            AVCProfileIndication: sps[0][1],
            profile_compatibility: sps[0][2],
            AVCLevelIndication: sps[0][3],
            sequenceParameterSets: sps,
            pictureParameterSets: pps
          })),
          tkhd: {
            track_ID: trackId,
            creation_time: date,
            modification_time: date,
            width: parsedSps.width << 16,
            height: parsedSps.height << 16,
            volume: 0
          },
          hdlr: {},
          mdhd: {
            timescale: media.rtpmap.clockrate,
            creation_time: date,
            modification_time: date,
            duration: 0
          },
          // (ticks / s) / (frames / s) = ticks / frame, e.g. frame duration in ticks
          defaultFrameDuration: media.framerate !== undefined && media.framerate > 0 ? Number(media.rtpmap.clockrate) / Number(media.framerate) || FALLBACK_FRAME_DURATION : FALLBACK_FRAME_DURATION,
          // MIME type
          mime: `avc1.${profileLevelId}`,
          codec: h264EncodingName(profileLevelId)
        };
      };
      ;// CONCATENATED MODULE: ./lib/components/mp4muxer/helpers/boxbuilder.ts
      function boxbuilder_defineProperty (obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }




      const formatDefaults = {
        'MPEG4-GENERIC': aacSettings,
        H264: h264Settings
      };

      const createTrackData = () => {
        return {
          lastTimestamp: 0,
          baseMediaDecodeTime: 0,
          defaultFrameDuration: 0,
          clockrate: 0,
          bitrate: 0,
          framerate: 0,
          cumulativeByteLength: 0,
          cumulativeDuration: 0,
          cumulativeFrames: 0
        };
      };

      const updateRateInfo = (trackData, {
        byteLength,
        duration
      }) => {
        trackData.cumulativeByteLength += byteLength;
        trackData.cumulativeDuration += duration;
        trackData.cumulativeFrames++; // Update the cumulative number size (bytes) and duration (ticks), and if
        // the duration exceeds the clockrate (meaning longer than 1 second of data),
        // then compute a new bitrate and reset cumulative size and duration.

        if (trackData.cumulativeDuration >= trackData.clockrate) {
          const bits = 8 * trackData.cumulativeByteLength;
          const frames = trackData.cumulativeFrames;
          const seconds = trackData.cumulativeDuration / trackData.clockrate;
          trackData.bitrate = bits / seconds;
          trackData.framerate = frames / seconds;
          trackData.cumulativeByteLength = 0;
          trackData.cumulativeDuration = 0;
          trackData.cumulativeFrames = 0;
        }
      };
      /**
       * Create boxes for a stream initiated by an sdp object
       *
       * @class BoxBuilder
       */


      class BoxBuilder {
        constructor() {
          boxbuilder_defineProperty(this, "trackIdMap", void 0);

          boxbuilder_defineProperty(this, "sequenceNumber", void 0);

          boxbuilder_defineProperty(this, "ntpPresentationTime", void 0);

          boxbuilder_defineProperty(this, "trackData", void 0);

          boxbuilder_defineProperty(this, "videoTrackId", void 0);

          this.trackIdMap = {};
          this.sequenceNumber = 0;
          this.ntpPresentationTime = 0;
          this.trackData = [];
        }

        trak (settings) {
          const trak = new Container('trak');
          const mdia = new Container('mdia');
          const minf = new Container('minf');
          const dinf = new Container('dinf');
          const dref = new Container('dref');
          const stbl = new Container('stbl');
          dref.set('entry_count', 1);
          trak.append(new Box('tkhd', settings.tkhd), mdia.append(new Box('mdhd', settings.mdhd), new Box('hdlr', settings.hdlr), minf.append(settings.mediaHeaderBox, // vmhd or smhd box (video or sound)
            dinf.append(dref.append(new Box('url '))), stbl.append(new Container('stsd', undefined, settings.sampleEntryBox), new Box('stts'), new Box('stsc'), new Box('stco'), new Box('stsz'), new Box('stss')))));
          return trak;
        }
        /**
         * Creates a Moov box from the provided options.
         * @method moov
         * @param  sdp - The session description protocol
         * @param  date - The creation/modification time of the movie
         * @return Moov object
         */


        moov (sdp, date) {
          const moov = new Container('moov');
          moov.append(new Box('mvhd', {
            creation_time: date,
            modification_time: date,
            duration: 0
          }));
          const mvex = new Container('mvex'); // For each of the media segments in the SDP structure, we will set up
          // a track in the MP4 file. For each track, a 'trak' box is added to the
          // 'moov' box and a 'trex' box is added to the 'mvex' box.

          this.trackIdMap = {};
          this.sequenceNumber = 0;
          this.ntpPresentationTime = 0;
          let trackId = 0;
          this.trackData = [];
          sdp.media.forEach(media => {
            if (media.rtpmap === undefined) {
              return;
            }

            const payloadType = media.rtpmap.payloadType;
            const encoding = media.rtpmap.encodingName;

            if (formatDefaults[encoding] !== undefined) {
              // We know how to handle this encoding, add a new track for it, and
              // register the track for this payloadType.
              this.trackIdMap[payloadType] = ++trackId; // Mark the video track

              if (media.type.toLowerCase() === 'video') {
                this.videoTrackId = trackId;
              } // Extract the settings from the SDP media information based on
              // the encoding name (H264, MPEG4-GENERIC, ...).


              const settings = formatDefaults[encoding](media, date, trackId);
              media.mime = settings.mime; // add MIME type to the SDP media

              media.codec = settings.codec; // add human readable codec string to the SDP media

              const trackData = createTrackData();
              trackData.clockrate = media.rtpmap.clockrate; // Set default frame duration (in ticks) for later use

              trackData.defaultFrameDuration = settings.defaultFrameDuration;
              this.trackData.push(trackData);
              const trak = this.trak(settings);
              moov.append(trak);
              mvex.append(new Box('trex', {
                track_ID: trackId
              }));
            }
          });
          moov.append(mvex);
          return moov;
        }
        /**
         * Boxes that carry actual elementary stream fragment metadata + data.
         */

        /**
         * Creates a moof box from the provided fragment metadata.
         * @method moof
         * @param  metadata - Track ID, timestamp, bytelength
         * @return moof Container
         */


        moof (metadata) {
          const {
            trackId,
            timestamp,
            byteLength
          } = metadata;
          const trackOffset = trackId - 1;
          const trackData = this.trackData[trackOffset]; // The RTP timestamps are unsigned 32 bit and will overflow
          // at some point. We can guard against the overflow by ORing with 0,
          // which will bring any difference back into signed 32-bit domain.

          const duration = trackData.lastTimestamp !== 0 ? timestamp - trackData.lastTimestamp | 0 : trackData.defaultFrameDuration;
          trackData.lastTimestamp = timestamp;
          const moof = new Container('moof');
          const traf = new Container('traf');
          const trun = new Box('trun', {
            sample_duration: duration,
            sample_size: byteLength,
            first_sample_flags: 0x40
          });
          moof.append(new Box('mfhd', {
            sequence_number: this.sequenceNumber++
          }), traf.append(new Box('tfhd', {
            track_ID: trackId
          }), new Box('tfdt', {
            baseMediaDecodeTime: trackData.baseMediaDecodeTime
          }), trun));
          trackData.baseMediaDecodeTime += duration; // Correct the trun data offset

          trun.set('data_offset', moof.byteLength + 8);
          updateRateInfo(trackData, {
            byteLength,
            duration
          });
          return moof;
        }
        /**
         * Creates an mdat box containing the elementary stream data.
         * @param  data - Elementary stream data
         * @return mdat Box
         */


        mdat (data) {
          const box = new Box('mdat');
          box.add('data', data);
          return box;
        }

        setPresentationTime (trackId, ntpTimestamp) {
          // Before updating the baseMediaDecodeTime, we check if
          // there is already a base NTP time to use as a reference
          // for computing presentation times.
          if (!this.ntpPresentationTime && ntpTimestamp && trackId === this.videoTrackId) {
            const trackOffset = trackId - 1;
            const trackData = this.trackData[trackOffset];
            this.ntpPresentationTime = ntpTimestamp - 1000 * (trackData.baseMediaDecodeTime / trackData.clockrate);
          }
        }

      }
      ;// CONCATENATED MODULE: ./lib/components/mp4muxer/index.ts
/* provided dependency */ var mp4muxer_Buffer = __webpack_require__(7866)["Buffer"];
      function mp4muxer_defineProperty (obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }








      /**
       * Component that converts elementary stream data into MP4 boxes honouring
       * the ISO BMFF Byte Stream (Some extra restrictions are involved).
       */

      class Mp4Muxer extends Tube {
        /**
         * Create a new mp4muxer component.
         * @return {undefined}
         */
        constructor() {
          const boxBuilder = new BoxBuilder();

          const onSync = ntpPresentationTime => {
            this.onSync && this.onSync(ntpPresentationTime);
          };

          const incoming = new stream_browserify.Transform({
            objectMode: true,
            transform: function (msg, encoding, callback) {
              if (msg.type === MessageType.SDP) {
                /**
                 * Arrival of SDP signals the beginning of a new movie.
                 * Set up the ftyp and moov boxes.
                 */
                // Why is this here? These should be default inside the mvhd box?
                const now = Math.floor(new Date().getTime() / 1000 + 2082852000);
                const ftyp = new Box('ftyp');
                const moov = boxBuilder.moov(msg.sdp, now);
                const data = mp4muxer_Buffer.allocUnsafe(ftyp.byteLength + moov.byteLength);
                ftyp.copy(data, 0);
                moov.copy(data, ftyp.byteLength);
                browser_default()('msl:mp4:isom')(`ftyp: ${ftyp.format()}`);
                browser_default()('msl:mp4:isom')(`moov: ${moov.format()}`); // Set up a list of tracks that contain info about
                // the type of media, encoding, and codec are present.

                const tracks = msg.sdp.media.map(media => {
                  return {
                    type: media.type,
                    encoding: media.rtpmap && media.rtpmap.encodingName,
                    mime: media.mime,
                    codec: media.codec
                  };
                });
                this.push({
                  type: MessageType.ISOM,
                  data,
                  tracks,
                  ftyp,
                  moov
                });
              } else if (msg.type === MessageType.ELEMENTARY || msg.type === MessageType.H264) {
                /**
                 * Otherwise we are getting some elementary stream data.
                 * Set up the moof and mdat boxes.
                 */
                const {
                  payloadType,
                  timestamp,
                  ntpTimestamp
                } = msg;
                const trackId = boxBuilder.trackIdMap[payloadType];

                if (trackId) {
                  if (!boxBuilder.ntpPresentationTime) {
                    boxBuilder.setPresentationTime(trackId, ntpTimestamp);

                    if (boxBuilder.ntpPresentationTime) {
                      onSync(boxBuilder.ntpPresentationTime);
                    }
                  }

                  let checkpointTime;
                  const idrPicture = msg.type === MessageType.H264 ? msg.nalType === NAL_TYPES.IDR_PICTURE : undefined;

                  if (boxBuilder.ntpPresentationTime && idrPicture && msg.ntpTimestamp !== undefined) {
                    checkpointTime = (msg.ntpTimestamp - boxBuilder.ntpPresentationTime) / 1000;
                  }

                  const byteLength = msg.data.byteLength;
                  const moof = boxBuilder.moof({
                    trackId,
                    timestamp,
                    byteLength
                  });
                  const mdat = boxBuilder.mdat(msg.data);
                  const data = mp4muxer_Buffer.allocUnsafe(moof.byteLength + mdat.byteLength);
                  moof.copy(data, 0);
                  mdat.copy(data, moof.byteLength);
                  this.push({
                    type: MessageType.ISOM,
                    data,
                    moof,
                    mdat,
                    ntpTimestamp,
                    checkpointTime
                  });
                }
              } else {
                // No message type we recognize, pass it on.
                this.push(msg);
              }

              callback();
            }
          });
          super(incoming);

          mp4muxer_defineProperty(this, "boxBuilder", void 0);

          mp4muxer_defineProperty(this, "onSync", void 0);

          this.boxBuilder = boxBuilder;
        }

        get bitrate () {
          return this.boxBuilder.trackData && this.boxBuilder.trackData.map(data => data.bitrate);
        }

        get framerate () {
          return this.boxBuilder.trackData && this.boxBuilder.trackData.map(data => data.framerate);
        }

        get ntpPresentationTime () {
          return this.boxBuilder.ntpPresentationTime;
        }

      }
      ;// CONCATENATED MODULE: ./lib/utils/protocols/rtcp.ts
      function rtcp_ownKeys (object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

      function rtcp_objectSpread (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { rtcp_ownKeys(Object(source), true).forEach(function (key) { rtcp_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { rtcp_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

      function rtcp_defineProperty (obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }


      // Real Time Control Protocol (RTCP)
      // https://tools.ietf.org/html/rfc3550#section-6

      /*
      Common RTCP packed header:
      
              0                   1                   2                   3
              0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      header |V=2|P|    RC   |   PT=SR=200   |             length            |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      */

      let RTCPPacketType;

      (function (RTCPPacketType) {
        RTCPPacketType[RTCPPacketType["SR"] = 200] = "SR";
        RTCPPacketType[RTCPPacketType["RR"] = 201] = "RR";
        RTCPPacketType[RTCPPacketType["SDES"] = 202] = "SDES";
        RTCPPacketType[RTCPPacketType["BYE"] = 203] = "BYE";
        RTCPPacketType[RTCPPacketType["APP"] = 204] = "APP";
      })(RTCPPacketType || (RTCPPacketType = {}));

      const parseBase = buffer => ({
        version: buffer[0] >>> 6,
        padding: !!(buffer[0] & POS[2]),
        count: buffer[0] & 0x1f,
        packetType: buffer.readUInt8(1),
        length: buffer.readUInt16BE(2)
      });

      const parseRtcp = buffer => {
        const base = parseBase(buffer);

        switch (base.packetType) {
          case RTCPPacketType.SR:
            return parseSR(buffer, base);

          case RTCPPacketType.RR:
            return parseRR(buffer, base);

          case RTCPPacketType.SDES:
            return parseSDES(buffer, base);

          case RTCPPacketType.BYE:
            return parseBYE(buffer, base);

          case RTCPPacketType.APP:
            return parseAPP(buffer, base);

          default:
            return base;
        }
      };
      const rtcpMessageFromBuffer = (channel, buffer) => {
        return {
          type: MessageType.RTCP,
          data: buffer,
          channel,
          rtcp: parseRtcp(buffer)
        };
      };
      /*
      SR: Sender Report RTCP Packet
      
              0                   1                   2                   3
              0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      header |V=2|P|    RC   |   PT=SR=200   |             length            |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                         SSRC of sender                        |
             +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
      sender |              NTP timestamp, most significant word             |
      info   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |             NTP timestamp, least significant word             |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                         RTP timestamp                         |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                     sender's packet count                     |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                      sender's octet count                     |
             +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
      report |                 SSRC_1 (SSRC of first source)                 |
      block  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        1    | fraction lost |       cumulative number of packets lost       |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |           extended highest sequence number received           |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                      interarrival jitter                      |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                         last SR (LSR)                         |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                   delay since last SR (DLSR)                  |
             +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
      report |                 SSRC_2 (SSRC of second source)                |
      block  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        2    :                               ...                             :
             +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
             |                  profile-specific extensions                  |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      */

      const SR = {
        packetType: 200
      };

      const parseReportBlocks = (count, buffer, offset) => {
        const reports = [];

        for (let reportNumber = 0; reportNumber < count; reportNumber++) {
          const o = offset + reportNumber * 24;
          reports.push({
            syncSource: buffer.readUInt32BE(o + 0),
            fractionLost: buffer.readUInt8(o + 4),
            cumulativeNumberOfPacketsLost: buffer.readUIntBE(o + 5, 3),
            extendedHighestSequenceNumberReceived: buffer.readUInt32BE(o + 8),
            interarrivalJitter: buffer.readUInt32BE(o + 12),
            lastSRTimestamp: buffer.readUInt32BE(o + 16),
            delaySinceLastSR: buffer.readUInt32BE(o + 20)
          });
        }

        return reports;
      };

      const parseSR = (buffer, base) => rtcp_objectSpread(rtcp_objectSpread({}, base), {}, {
        syncSource: buffer.readUInt32BE(4),
        ntpMost: buffer.readUInt32BE(8),
        ntpLeast: buffer.readUInt32BE(12),
        rtpTimestamp: buffer.readUInt32BE(16),
        sendersPacketCount: buffer.readUInt32BE(20),
        sendersOctetCount: buffer.readUInt32BE(24),
        reports: parseReportBlocks(base.count, buffer, 28)
      });

      const isRtcpSR = rtcp => rtcp.packetType === RTCPPacketType.SR;
      /*
      RR: Receiver Report RTCP Packet
      
              0                   1                   2                   3
              0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      header |V=2|P|    RC   |   PT=RR=201   |             length            |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                     SSRC of packet sender                     |
             +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
      report |                 SSRC_1 (SSRC of first source)                 |
      block  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        1    | fraction lost |       cumulative number of packets lost       |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |           extended highest sequence number received           |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                      interarrival jitter                      |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                         last SR (LSR)                         |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                   delay since last SR (DLSR)                  |
             +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
      report |                 SSRC_2 (SSRC of second source)                |
      block  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
        2    :                               ...                             :
             +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
             |                  profile-specific extensions                  |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      */

      const parseRR = (buffer, base) => rtcp_objectSpread(rtcp_objectSpread({}, base), {}, {
        syncSource: buffer.readUInt32BE(4),
        reports: parseReportBlocks(base.count, buffer, 8)
      });

      const isRtcpRR = rtcp => rtcp.packetType === RTCPPacketType.RR;
      /*
      SDES: Source Description RTCP Packet
      
              0                   1                   2                   3
              0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      header |V=2|P|    SC   |  PT=SDES=202  |             length            |
             +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
      chunk  |                          SSRC/CSRC_1                          |
        1    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                           SDES items                          |
             |                              ...                              |
             +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
      chunk  |                          SSRC/CSRC_2                          |
        2    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                           SDES items                          |
             |                              ...                              |
             +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
      */

      let SDESItem;

      (function (SDESItem) {
        SDESItem[SDESItem["CNAME"] = 1] = "CNAME";
        SDESItem[SDESItem["NAME"] = 2] = "NAME";
        SDESItem[SDESItem["EMAIL"] = 3] = "EMAIL";
        SDESItem[SDESItem["PHONE"] = 4] = "PHONE";
        SDESItem[SDESItem["LOC"] = 5] = "LOC";
        SDESItem[SDESItem["TOOL"] = 6] = "TOOL";
        SDESItem[SDESItem["NOTE"] = 7] = "NOTE";
        SDESItem[SDESItem["PRIV"] = 8] = "PRIV";
      })(SDESItem || (SDESItem = {}));

      const parseSDES = (buffer, base) => {
        const sourceDescriptions = [];
        let offset = 4;

        for (let block = 0; block < base.count; block++) {
          const chunk = {
            source: buffer.readUInt32BE(offset),
            items: []
          };
          offset += 4;

          while (true) {
            const itemType = buffer.readUInt8(offset++);

            if (itemType === 0) {
              // start next block at word boundary
              if (offset % 4 !== 0) {
                offset += 4 - offset % 4;
              }

              break;
            }

            const length = buffer.readUInt8(offset++);

            if (itemType === SDESItem.PRIV) {
              const prefixLength = buffer.readUInt8(offset);
              const prefix = buffer.toString('utf8', offset + 1, offset + 1 + prefixLength);
              const value = buffer.toString('utf8', offset + 1 + prefixLength, offset + length);
              chunk.items.push([SDESItem.PRIV, prefix, value]);
            } else {
              const value = buffer.toString('utf8', offset, offset + length);
              chunk.items.push([itemType, value]);
            }

            offset += length;
          }

          sourceDescriptions.push(chunk);
        }

        return rtcp_objectSpread(rtcp_objectSpread({}, base), {}, {
          syncSource: buffer.readUInt32BE(4),
          sourceDescriptions
        });
      };

      const isRtcpSDES = rtcp => rtcp.packetType === RTCPPacketType.SDES;
      /*
      BYE: Goodbye RTCP Packet
      
             0                   1                   2                   3
             0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |V=2|P|    SC   |   PT=BYE=203  |             length            |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            |                           SSRC/CSRC                           |
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
            :                              ...                              :
            +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
      (opt) |     length    |               reason for leaving            ...
            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      */

      const parseBYE = (buffer, base) => {
        const sources = [];

        for (let block = 0; block < base.count; block++) {
          sources.push(buffer.readUInt32BE(4 + 4 * block));
        }

        let reason;

        if (base.length > base.count) {
          const start = 4 + 4 * base.count;
          const length = buffer.readUInt8(start);
          reason = buffer.toString('utf-8', start + 1, start + 1 + length);
        }

        return rtcp_objectSpread(rtcp_objectSpread({}, base), {}, {
          sources,
          reason
        });
      };

      const isRtcpBye = rtcp => rtcp.packetType === RTCPPacketType.BYE;
      /*
      APP: Application-Defined RTCP Packet
      
          0                   1                   2                   3
          0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
         |V=2|P| subtype |   PT=APP=204  |             length            |
         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
         |                           SSRC/CSRC                           |
         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
         |                          name (ASCII)                         |
         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
         |                   application-dependent data                ...
         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
      
      */

      const parseAPP = (buffer, base) => {
        return rtcp_objectSpread(rtcp_objectSpread({}, base), {}, {
          subtype: base.count,
          source: buffer.readUInt32BE(4),
          name: buffer.toString('ascii', 8, 12),
          data: buffer.slice(12)
        });
      };

      const isRtcpApp = rtcp => rtcp.packetType === RTCPPacketType.APP;
      ;// CONCATENATED MODULE: ./lib/components/mse/index.ts


      function mse_defineProperty (obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }






      const TRIGGER_THRESHOLD = 100;
      const mse_debug = browser_default()('msl:mse');
      class MseSink extends Sink {
        /**
         * Create a Media component.
         *
         * The constructor sets up two streams and connects them to the MediaSource.
         *
         * @param el - A video element to connect the media source to
         */
        constructor(el) {
          if (el === undefined) {
            throw new Error('video element argument missing');
          }

          let mse;
          let sourceBuffer;
          /**
           * Set up an incoming stream and attach it to the sourceBuffer.
           */

          const incoming = new stream_browserify.Writable({
            objectMode: true,
            write: (msg, _, callback) => {
              if (msg.type === MessageType.ISOM) {
                // ISO BMFF Byte Stream data to be added to the source buffer
                this._done = callback;

                if (msg.tracks !== undefined || msg.mime !== undefined) {
                  const tracks = msg.tracks ?? []; // MIME codecs: https://tools.ietf.org/html/rfc6381
                  console.log('XXXX', msg.tracks)

                  const mimeCodecs = tracks.map(track => track.mime).filter(mime => mime);
                  const codecs = mimeCodecs.length !== 0 ? mimeCodecs.join(', ') : 'avc1.640029, mp4a.40.2'; // Take MIME type directly from the message, or constructed
                  // from the tracks (with a default fallback to basic H.264).

                  const mimeType = msg.mime ?? `video/mp4; codecs="${codecs}"`;
                  console.log(`Got mimetype: ${msg.mime} -> ${mimeType}, codecs: ${mimeCodecs}`);

                  if (!MediaSource.isTypeSupported(mimeType)) {
                    incoming.emit('error', `unsupported media type: ${mimeType}`);
                    return;
                  } // Start a new movie (new SDP info available)


                  this._lastCheckpointTime = 0; // Start a new mediaSource and prepare it with a sourceBuffer.
                  // When ready, this component's .onSourceOpen callback will be called
                  // with the mediaSource, and a list of valid/ignored media.

                  mse = new MediaSource();
                  el.src = window.URL.createObjectURL(mse);

                  const handler = () => {
                    if (mse === undefined) {
                      incoming.emit('error', 'no MediaSource instance');
                      return;
                    } // revoke the object URL to avoid a memory leak


                    window.URL.revokeObjectURL(el.src);
                    mse.removeEventListener('sourceopen', handler);
                    this.onSourceOpen && this.onSourceOpen(mse, tracks);
                    sourceBuffer = this.addSourceBuffer(el, mse, mimeType);

                    sourceBuffer.onerror = e => {
                      console.error('error on SourceBuffer: ', e);
                      incoming.emit('error');
                    };

                    try {
                      sourceBuffer.appendBuffer(msg.data);
                    } catch (err) {
                      mse_debug('failed to append to SourceBuffer: ', err, msg);
                    }
                  };

                  mse.addEventListener('sourceopen', handler);
                } else {
                  // Continue current movie
                  this._lastCheckpointTime = msg.checkpointTime !== undefined ? msg.checkpointTime : this._lastCheckpointTime;

                  try {
                    var _sourceBuffer;

                    (_sourceBuffer = sourceBuffer) === null || _sourceBuffer === void 0 ? void 0 : _sourceBuffer.appendBuffer(msg.data);
                  } catch (e) {
                    mse_debug('failed to append to SourceBuffer: ', e, msg);
                  }
                }
              } else if (msg.type === MessageType.RTCP) {
                if (isRtcpBye(msg.rtcp)) {
                  var _mse;

                  ((_mse = mse) === null || _mse === void 0 ? void 0 : _mse.readyState) === 'open' && mse.endOfStream();
                }

                callback();
              } else {
                callback();
              }
            }
          });
          incoming.on('finish', () => {
            console.warn('incoming stream finished: end stream');
            mse && mse.readyState === 'open' && mse.endOfStream();
          }); // When an error is sent on the incoming stream, close it.

          incoming.on('error', msg => {
            console.error('error on incoming stream: ', msg);

            if (sourceBuffer && sourceBuffer.updating) {
              sourceBuffer.addEventListener('updateend', () => {
                var _mse2;

                ((_mse2 = mse) === null || _mse2 === void 0 ? void 0 : _mse2.readyState) === 'open' && mse.endOfStream();
              });
            } else {
              var _mse3;

              ((_mse3 = mse) === null || _mse3 === void 0 ? void 0 : _mse3.readyState) === 'open' && mse.endOfStream();
            }
          });
          /**
           * Set up outgoing stream.
           */

          const outgoing = new stream_browserify.Readable({
            objectMode: true,
            read: function () {//
            }
          }); // When an error is sent on the outgoing stream, whine about it.

          outgoing.on('error', () => {
            console.warn('outgoing stream broke somewhere');
          });
          /**
           * initialize the component.
           */

          super(incoming, outgoing);

          mse_defineProperty(this, "_videoEl", void 0);

          mse_defineProperty(this, "_done", void 0);

          mse_defineProperty(this, "_lastCheckpointTime", void 0);

          mse_defineProperty(this, "onSourceOpen", void 0);

          this._videoEl = el;
          this._lastCheckpointTime = 0;
        }
        /**
         * Add a new sourceBuffer to the mediaSource and remove old ones.
         * @param el - The media element holding the media source.
         * @param mse - The media source the buffer should be attached to.
         * @param mimeType - MIME type and codecs, e.g.: 'video/mp4; codecs="avc1.4D0029, mp4a.40.2"'
         */


        addSourceBuffer (el, mse, mimeType) {
          const sourceBuffer = mse.addSourceBuffer(mimeType);
          let trigger = 0;

          const onUpdateEndHandler = () => {
            ++trigger;

            if (trigger > TRIGGER_THRESHOLD && sourceBuffer.buffered.length) {
              trigger = 0;
              const index = sourceBuffer.buffered.length - 1;
              const start = sourceBuffer.buffered.start(index);
              const end = Math.min(el.currentTime, this._lastCheckpointTime) - 10;

              try {
                // remove all material up to 10 seconds before current time
                if (end > start) {
                  sourceBuffer.remove(start, end);
                  return; // this._done() will be called on the next updateend event!
                }
              } catch (e) {
                console.warn(e);
              }
            }

            this._done && this._done();
          };

          sourceBuffer.addEventListener('updateend', onUpdateEndHandler);
          return sourceBuffer;
        }

        get currentTime () {
          return this._videoEl.currentTime;
        }

        async play () {
          return await this._videoEl.play();
        }

        pause () {
          return this._videoEl.pause();
        }

      }
      ;// CONCATENATED MODULE: ./lib/components/onvifdepay/index.ts
/* provided dependency */ var onvifdepay_Buffer = __webpack_require__(7866)["Buffer"];




      class ONVIFDepay extends Tube {
        constructor() {
          let XMLPayloadType;
          let packets = [];
          const incoming = new stream_browserify.Transform({
            objectMode: true,
            transform: function (msg, encoding, callback) {
              if (msg.type === MessageType.SDP) {
                let validMedia;

                for (const media of msg.sdp.media) {
                  if (media.type === 'application' && media.rtpmap && media.rtpmap.encodingName === 'VND.ONVIF.METADATA') {
                    validMedia = media;
                  }
                }

                if (validMedia && validMedia.rtpmap) {
                  XMLPayloadType = Number(validMedia.rtpmap.payloadType);
                }

                callback(undefined, msg);
              } else if (msg.type === MessageType.RTP && payloadType(msg.data) === XMLPayloadType) {
                // Add payload to packet stack
                packets.push(payload(msg.data)); // XML over RTP uses the RTP marker bit to indicate end
                // of fragmentation. At this point, the packets can be used
                // to reconstruct an XML packet.

                if (marker(msg.data) && packets.length > 0) {
                  const xmlMsg = {
                    timestamp: timestamp(msg.data),
                    ntpTimestamp: msg.ntpTimestamp,
                    payloadType: payloadType(msg.data),
                    data: onvifdepay_Buffer.concat(packets),
                    type: MessageType.XML
                  };
                  callback(undefined, xmlMsg);
                  packets = [];
                  return;
                }

                callback();
              } else {
                // Not a message we should handle
                callback(undefined, msg);
              }
            }
          }); // outgoing will be defaulted to a PassThrough stream

          super(incoming);
        }

      }
      ;// CONCATENATED MODULE: ./lib/components/rtsp-parser/builder.ts
/* provided dependency */ var builder_Buffer = __webpack_require__(7866)["Buffer"];

      const DEFAULT_PROTOCOL = 'RTSP/1.0';
      const builder = msg => {
        if (!msg.method || !msg.uri) {
          throw new Error('message needs to contain a method and a uri');
        }

        const protocol = msg.protocol || DEFAULT_PROTOCOL;
        const headers = msg.headers || {};
        const messageString = [`${msg.method} ${msg.uri} ${protocol}`, Object.entries(headers).map(([key, value]) => key + ': ' + value).join('\r\n'), '\r\n'].join('\r\n');
        browser_default()('msl:rtsp:outgoing')(messageString);
        return builder_Buffer.from(messageString);
      };
      ;// CONCATENATED MODULE: ./lib/utils/protocols/sdp.ts


      const extractLineVals = (buffer, lineStart, start = 0) => {
        const anchor = `\n${lineStart}`;
        start = buffer.indexOf(anchor, start);
        let end = 0;
        const ret = [];

        while (start >= 0) {
          end = buffer.indexOf('\n', start + anchor.length);
          ret.push(buffer.toString('ascii', start + anchor.length, end).trim());
          start = buffer.indexOf(anchor, end);
        }

        return ret;
      }; // SDP parsing

      /**
       * Identify the start of a session-level or media-level section.
       * @param  line - The line to parse
       */


      const newMediaLevel = line => {
        return line.match(/^m=/);
      };

      const splitOnFirst = (c, text) => {
        const p = text.indexOf(c);

        if (p < 0) {
          return [text.slice(0)];
        } else {
          return [text.slice(0, p), text.slice(p + 1)];
        }
      };

      const attributeParsers = {
        fmtp: value => {
          const [format, stringParameters] = splitOnFirst(' ', value);

          switch (format) {
            default:
              const pairs = stringParameters.trim().split(';');
              const parameters = {};
              pairs.forEach(pair => {
                const [key, val] = splitOnFirst('=', pair);
                const normalizedKey = key.trim().toLowerCase();

                if (normalizedKey !== '') {
                  parameters[normalizedKey] = val.trim();
                }
              });
              return {
                format,
                parameters
              };
          }
        },
        framerate: Number,
        rtpmap: value => {
          const [payloadType, encoding] = splitOnFirst(' ', value);
          const [encodingName, clockrate, encodingParameters] = encoding.toUpperCase().split('/');

          if (encodingParameters === undefined) {
            return {
              payloadType: Number(payloadType),
              encodingName,
              clockrate: Number(clockrate)
            };
          } else {
            return {
              payloadType: Number(payloadType),
              encodingName,
              clockrate: Number(clockrate),
              encodingParameters
            };
          }
        },
        transform: value => {
          return value.split(';').map(row => row.split(',').map(Number));
        },
        'x-sensor-transform': value => {
          return value.split(';').map(row => row.split(',').map(Number));
        },
        framesize: value => {
          return value.split(' ')[1].split('-').map(Number);
        }
      };

      const parseAttribute = body => {
        const [attribute, value] = splitOnFirst(':', body);

        if (value === undefined) {
          return {
            [attribute]: true
          };
        } else {
          if (attributeParsers[attribute] !== undefined) {
            return {
              [attribute]: attributeParsers[attribute](value)
            };
          } else {
            return {
              [attribute]: value
            };
          }
        }
      };

      const extractField = line => {
        const prefix = line.slice(0, 1);
        const body = line.slice(2);

        switch (prefix) {
          case 'v':
            return {
              version: body
            };

          case 'o':
            const [username, sessionId, sessionVersion, netType, addrType, unicastAddress] = body.split(' ');
            return {
              origin: {
                addrType,
                netType,
                sessionId,
                sessionVersion,
                unicastAddress,
                username
              }
            };

          case 's':
            return {
              sessionName: body
            };

          case 'i':
            return {
              sessionInformation: body
            };

          case 'u':
            return {
              uri: body
            };

          case 'e':
            return {
              email: body
            };

          case 'p':
            return {
              phone: body
            };
          // c=<nettype> <addrtype> <connection-address>

          case 'c':
            const [connectionNetType, connectionAddrType, connectionAddress] = body.split(' ');
            return {
              connectionData: {
                addrType: connectionAddrType,
                connectionAddress,
                netType: connectionNetType
              }
            };
          // b=<bwtype>:<bandwidth>

          case 'b':
            const [bwtype, bandwidth] = body.split(':');
            return {
              bwtype,
              bandwidth
            };
          // t=<start-time> <stop-time>

          case 't':
            const [startTime, stopTime] = body.split(' ').map(Number);
            return {
              time: {
                startTime,
                stopTime
              }
            };
          // r=<repeat interval> <active duration> <offsets from start-time>

          case 'r':
            const [repeatInterval, activeDuration, ...offsets] = body.split(' ').map(Number);
            return {
              repeatTimes: {
                repeatInterval,
                activeDuration,
                offsets
              }
            };
          // z=<adjustment time> <offset> <adjustment time> <offset> ....

          case 'z':
            return;
          // k=<method>
          // k=<method>:<encryption key>

          case 'k':
            return;
          // a=<attribute>
          // a=<attribute>:<value>

          case 'a':
            return parseAttribute(body);

          case 'm':
            // Only the first fmt field is parsed!
            const [type, port, protocol, fmt] = body.split(' ');
            return {
              type,
              port: Number(port),
              protocol,
              fmt: Number(fmt)
            };

          default: // console.log('unknown SDP prefix ', prefix);

        }
      };

      const extractURIs = buffer => {
        // There is a control URI above the m= line, which should not be used
        const seekFrom = buffer.indexOf('\nm=');
        return extractLineVals(buffer, 'a=control:', seekFrom);
      };
      /**
       * Parse an SDP text into a data structure with session and media objects.
       *
       * @param  buffer - The buffer containing the SDP plain text
       * @return Structured SDP data
       */

      const sdp_parse = buffer => {
        const sdp = buffer.toString('ascii').split('\n').map(s => s.trim());
        const struct = {
          session: {},
          media: []
        };
        let mediaCounter = 0;
        let current = struct.session;

        for (const line of sdp) {
          if (newMediaLevel(line)) {
            struct.media[mediaCounter] = {};
            current = struct.media[mediaCounter];
            ++mediaCounter;
          }

          current = Object.assign(current, extractField(line));
        }

        return struct;
      };
      const messageFromBuffer = buffer => {
        return {
          type: MessageType.SDP,
          data: buffer,
          sdp: sdp_parse(buffer)
        };
      };
      ;// CONCATENATED MODULE: ./lib/utils/protocols/rtsp.ts
      /*
       * The RTSP response format is defined in RFC 7826,
       * using ABNF notation specified in RFC 5234.
       * Strings in ABNF rules ("...") are always case insensitive!
       *
       * Basic rules to help with the headers below:
       * ====
       * CR              =  %x0D ; US-ASCII CR, carriage return (13)
       * LF              =  %x0A  ; US-ASCII LF, linefeed (10)
       * SP              =  %x20  ; US-ASCII SP, space (32)
       * HT              =  %x09  ; US-ASCII HT, horizontal-tab (9)
       * CRLF            =  CR LF
       * LWS             =  [CRLF] 1*( SP / HT ) ; Line-breaking whitespace
       * SWS             =  [LWS] ; Separating whitespace
       * HCOLON          =  *( SP / HT ) ":" SWS
       *
       * RTSP response rules (a `*` means zero or more):
       * ====
       * Status-Line  = RTSP-Version SP Status-Code SP Reason-Phrase CRLF
       * Response     = Status-Line
       *                *((general-header
       *                /  response-header
       *                /  message-body-header) CRLF)
       *                CRLF
       *                [ message-body-data ]
       *
       * Example response:
       * ====
       * RTSP/1.0 200 OK
       * CSeq: 3
       * Content-Type: application/sdp
       * Content-Base: rtsp://192.168.0.3/axis-media/media.amp/
       * Server: GStreamer RTSP server
       * Date: Wed, 03 Jun 2015 14:23:42 GMT
       * Content-Length: 623
       *
       * v=0
       * ....
       */

      /**
       * Extract the value of a header.
       *
       * @param buffer The response bytes
       * @param header The header to search for
       */
      const extractHeaderValue = (buffer, header) => {
        const anchor = `\n${header.toLowerCase()}: `;
        const start = buffer.toString().toLowerCase().indexOf(anchor);

        if (start >= 0) {
          const end = buffer.indexOf('\n', start + anchor.length);
          const headerValue = buffer.toString('ascii', start + anchor.length, end).trim();
          return headerValue;
        }

        return null;
      };
      const sequence = buffer => {
        /**
         * CSeq           =  "CSeq" HCOLON cseq-nr
         * cseq-nr        =  1*9DIGIT
         */
        const val = extractHeaderValue(buffer, 'CSeq');

        if (val !== null) {
          return Number(val);
        }

        return null;
      };
      const sessionId = buffer => {
        /**
         * Session          =  "Session" HCOLON session-id
         *                     [ SEMI "timeout" EQUAL delta-seconds ]
         * session-id        =  1*256( ALPHA / DIGIT / safe )
         * delta-seconds     =  1*19DIGIT
         */
        const val = extractHeaderValue(buffer, 'Session');
        return val ? val.split(';')[0] : null;
      };
      const sessionTimeout = buffer => {
        /**
         * Session          =  "Session" HCOLON session-id
         *                     [ SEMI "timeout" EQUAL delta-seconds ]
         * session-id        =  1*256( ALPHA / DIGIT / safe )
         * delta-seconds     =  1*19DIGIT
         */
        const val = extractHeaderValue(buffer, 'Session');

        if (val === null) {
          return null;
        }

        const defaultTimeout = 60;
        const timeoutToken = 'timeout=';
        const timeoutPosition = val.toLowerCase().indexOf(timeoutToken);

        if (timeoutPosition !== -1) {
          let timeoutVal = val.substring(timeoutPosition + timeoutToken.length);
          timeoutVal = timeoutVal.split(';')[0];
          const parsedTimeout = parseInt(timeoutVal);
          return isNaN(parsedTimeout) ? defaultTimeout : parsedTimeout;
        }

        return defaultTimeout;
      };
      const statusCode = buffer => {
        return Number(buffer.toString('ascii', 9, 12));
      };
      const contentBase = buffer => {
        /**
         * Content-Base       =  "Content-Base" HCOLON RTSP-URI
         */
        return extractHeaderValue(buffer, 'Content-Base');
      };
      const contentLocation = buffer => {
        /**
         * Content-Location   =  "Content-Location" HCOLON RTSP-REQ-Ref
         */
        return extractHeaderValue(buffer, 'Content-Location');
      };
      const connectionEnded = buffer => {
        /**
         * Connection         =  "Connection" HCOLON connection-token
         *                       *(COMMA connection-token)
         * connection-token   =  "close" / token
         */
        const connectionToken = extractHeaderValue(buffer, 'Connection');
        return connectionToken !== null && connectionToken.toLowerCase() === 'close';
      };
      const range = buffer => {
        /**
         * Range              =  "Range" HCOLON ranges-spec
         * ranges-spec        =  npt-range / utc-range / smpte-range
         *                       /  range-ext
         * npt-range        =  "npt" [EQUAL npt-range-spec]
         * npt-range-spec   =  ( npt-time "-" [ npt-time ] ) / ( "-" npt-time )
         * npt-time         =  "now" / npt-sec / npt-hhmmss / npt-hhmmss-comp
         * npt-sec          =  1*19DIGIT [ "." 1*9DIGIT ]
         * npt-hhmmss       =  npt-hh ":" npt-mm ":" npt-ss [ "." 1*9DIGIT ]
         * npt-hh           =  2*19DIGIT   ; any positive number
         * npt-mm           =  2*2DIGIT  ; 0-59
         * npt-ss           =  2*2DIGIT  ; 0-59
         * npt-hhmmss-comp  =  npt-hh-comp ":" npt-mm-comp ":" npt-ss-comp
         *                     [ "." 1*9DIGIT ] ; Compatibility format
         * npt-hh-comp      =  1*19DIGIT   ; any positive number
         * npt-mm-comp      =  1*2DIGIT  ; 0-59
         * npt-ss-comp      =  1*2DIGIT  ; 0-59
         */
        // Example range headers:
        // Range: npt=now-
        // Range: npt=1154.598701-3610.259146
        const npt = extractHeaderValue(buffer, 'Range');

        if (npt !== null) {
          return npt.split('=')[1].split('-');
        }

        return undefined;
      };
      /**
       * Determine the offset of the RTSP body, where the header ends.
       * If there is no header ending, -1 is returned
       * @param  chunk - A piece of data
       * @return The body offset, or -1 if no header end found
       */

      const bodyOffset = chunk => {
        /**
         * Strictly speaking, it seems RTSP MUST have CRLF and doesn't allow CR or LF on its own.
         * That means that the end of the header part should be a pair of CRLF, but we're being
         * flexible here and also allow LF LF or CR CR instead of CRLF CRLF.
         */
        const bodyOffsets = ['\n\n', '\r\r', '\r\n\r\n'].map(s => {
          const offset = chunk.indexOf(s);

          if (offset !== -1) {
            return offset + s.length;
          }

          return offset;
        }).filter(offset => offset !== -1);

        if (bodyOffsets.length > 0) {
          return bodyOffsets.reduce((acc, offset) => {
            return Math.min(acc, offset);
          });
        } else {
          return -1;
        }
      };
      ;// CONCATENATED MODULE: ./lib/components/rtsp-parser/parser.ts
/* provided dependency */ var rtsp_parser_parser_Buffer = __webpack_require__(7866)["Buffer"];
      function rtsp_parser_parser_defineProperty (obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





      /**
       * The different possible internal parser states.
       */

      var STATE;

      (function (STATE) {
        STATE[STATE["IDLE"] = 0] = "IDLE";
        STATE[STATE["INTERLEAVED"] = 1] = "INTERLEAVED";
        STATE[STATE["RTSP"] = 2] = "RTSP";
      })(STATE || (STATE = {}));

      const INTERLEAVED_HEADER_BYTES = 4;
      const ASCII_DOLLAR = 0x24;

      /**
       * Extract packet information from the interleaved header
       * (4-byte section before the RTP packet).
       * @param  chunks - Buffers constituting the data.
       * @return Packet information (channel, begin, end).
       */
      const rtpPacketInfo = chunks => {
        const header = rtsp_parser_parser_Buffer.alloc(INTERLEAVED_HEADER_BYTES);
        let i = 0;
        let bytesRead = 0;

        while (bytesRead < header.length) {
          const chunk = chunks[i++];
          const bytesToRead = Math.min(chunk.length, header.length - bytesRead);
          chunk.copy(header, bytesRead, 0, bytesToRead);
          bytesRead += bytesToRead;
        }

        const channel = header[1];
        const begin = header.length;
        const length = header.readUInt16BE(2);
        const end = begin + length;
        return {
          channel,
          begin,
          end
        };
      };
      /**
       * Parser class with a public method that takes a data chunk and
       * returns an array of RTP/RTSP/RTCP message objects. The parser
       * keeps track of the added chunks internally in an array and only
       * concatenates chunks when data is needed to construct a message.
       * @type {[type]}
       */


      class Parser {
        /**
         * Create a new Parser object.
         * @return {undefined}
         */
        constructor() {
          rtsp_parser_parser_defineProperty(this, "_chunks", []);

          rtsp_parser_parser_defineProperty(this, "_length", 0);

          rtsp_parser_parser_defineProperty(this, "_state", STATE.IDLE);

          rtsp_parser_parser_defineProperty(this, "_packet", void 0);

          this._init();
        }
        /**
         * Initialize the internal properties to their default starting
         * values.
         * @return {undefined}
         */


        _init () {
          this._chunks = [];
          this._length = 0;
          this._state = STATE.IDLE;
        }

        _push (chunk) {
          this._chunks.push(chunk);

          this._length += chunk.length;
        }
        /**
         * Extract RTSP messages.
         * @return {Array} An array of messages, possibly empty.
         */


        _parseRtsp () {
          const messages = [];
          const buffer = rtsp_parser_parser_Buffer.concat(this._chunks);
          const chunkBodyOffset = bodyOffset(buffer); // If last added chunk does not have the end of the header, return.

          if (chunkBodyOffset === -1) {
            return messages;
          }

          const rtspHeaderLength = chunkBodyOffset;
          const contentLength = extractHeaderValue(buffer, 'Content-Length');

          if (contentLength && parseInt(contentLength) > buffer.length - rtspHeaderLength) {
            // we do not have the whole body
            return messages;
          }

          this._init(); // resets this._chunks and this._length


          if (rtspHeaderLength === buffer.length || buffer[rtspHeaderLength] === ASCII_DOLLAR) {
            // No body in this chunk, assume there is no body?
            const packet = buffer.slice(0, rtspHeaderLength);
            messages.push({
              type: MessageType.RTSP,
              data: packet
            }); // Add the remaining data to the chunk stack.

            const trailing = buffer.slice(rtspHeaderLength);

            this._push(trailing);
          } else {
            // Body is assumed to be the remaining data of the last chunk.
            const packet = buffer;
            const body = buffer.slice(rtspHeaderLength);
            messages.push({
              type: MessageType.RTSP,
              data: packet
            });
            messages.push(messageFromBuffer(body));
          }

          return messages;
        }
        /**
         * Extract RTP/RTCP messages.
         * @return {Array} An array of messages, possibly empty.
         */


        _parseInterleaved () {
          const messages = []; // Skip as long as we don't have the first 4 bytes

          if (this._length < INTERLEAVED_HEADER_BYTES) {
            return messages;
          } // Enough bytes to construct the header and extract packet info.


          if (!this._packet) {
            this._packet = rtpPacketInfo(this._chunks);
          } // As long as we don't have enough chunks, skip.


          if (this._length < this._packet.end) {
            return messages;
          } // We have enough data to extract the packet.


          const buffer = rtsp_parser_parser_Buffer.concat(this._chunks);
          const packet = buffer.slice(this._packet.begin, this._packet.end);
          const trailing = buffer.slice(this._packet.end);
          const channel = this._packet.channel;
          delete this._packet; // Prepare next bit.

          this._init();

          this._push(trailing); // Extract messages


          if (channel % 2 === 0) {
            // Even channels 0, 2, ...
            messages.push({
              type: MessageType.RTP,
              data: packet,
              channel
            });
          } else {
            // Odd channels 1, 3, ...
            let rtcpPackets = packet;

            do {
              // RTCP packets can be packed together, unbundle them:
              const rtcpByteSize = rtcpPackets.readUInt16BE(2) * 4 + 4;
              messages.push(rtcpMessageFromBuffer(channel, rtcpPackets.slice(0, rtcpByteSize)));
              rtcpPackets = rtcpPackets.slice(rtcpByteSize);
            } while (rtcpPackets.length > 0);
          }

          return messages;
        }
        /**
         * Set the internal state based on the type of the first chunk
         */


        _setState () {
          // Remove leading 0-sized chunks.
          while (this._chunks.length > 0 && this._chunks[0].length === 0) {
            this._chunks.shift();
          }

          const firstChunk = this._chunks[0];

          if (this._chunks.length === 0) {
            this._state = STATE.IDLE;
          } else if (firstChunk[0] === ASCII_DOLLAR) {
            this._state = STATE.INTERLEAVED;
          } else if (firstChunk.toString('ascii', 0, 4) === 'RTSP') {
            this._state = STATE.RTSP;
          } else {
            throw new Error(`Unknown chunk of length ${firstChunk.length}`);
          }
        }
        /**
         * Add the next chunk of data to the parser and extract messages.
         * If no message can be extracted, an empty array is returned, otherwise
         * an array of messages is returned.
         * @param  chunk - The next piece of data.
         * @return An array of messages, possibly empty.
         */


        parse (chunk) {
          this._push(chunk);

          if (this._state === STATE.IDLE) {
            this._setState();
          }

          let messages = [];
          let done = false;

          while (!done) {
            let extracted = [];

            switch (this._state) {
              case STATE.IDLE:
                break;

              case STATE.INTERLEAVED:
                extracted = this._parseInterleaved();
                break;

              case STATE.RTSP:
                extracted = this._parseRtsp();
                break;

              default:
                throw new Error('internal error: unknown state');
            }

            if (extracted.length > 0) {
              messages = messages.concat(extracted);
            } else {
              done = true;
            }

            this._setState();
          }

          return messages;
        }

      }
      ;// CONCATENATED MODULE: ./lib/components/rtsp-parser/index.ts





      /**
       * A component that converts raw binary data into RTP/RTSP/RTCP packets on the
       * incoming stream, and converts RTSP commands to raw binary data on the outgoing
       * stream. The component is agnostic of any RTSP session details (you need an
       * RTSP session component in the pipeline).
       * @extends {Component}
       */

      class RtspParser extends Tube {
        /**
         * Create a new RTSP parser component.
         * @return {undefined}
         */
        constructor() {
          const parser = new Parser(); // Incoming stream

          const incoming = new stream_browserify.Transform({
            objectMode: true,
            transform: function (msg, encoding, callback) {
              if (msg.type === MessageType.RAW) {
                try {
                  parser.parse(msg.data).forEach(message => incoming.push(message));
                  callback();
                } catch (e) {
                  callback(e);
                }
              } else {
                // Not a message we should handle
                callback(undefined, msg);
              }
            }
          }); // Outgoing stream

          const outgoing = new stream_browserify.Transform({
            objectMode: true,
            transform: function (msg, encoding, callback) {
              if (msg.type === MessageType.RTSP) {
                const data = builder(msg);
                callback(undefined, {
                  type: MessageType.RAW,
                  data
                });
              } else {
                // don't touch other types
                callback(undefined, msg);
              }
            }
          });
          super(incoming, outgoing);
        }

      }
      ;// CONCATENATED MODULE: ./lib/utils/config.ts
      /**
       * Flat merge of objects, ignoring undefined override values.
       * @param  template - The object with default values
       * @param  override - The object with override values.
       * @return The template object with override merged in.
       */
      const merge = (template, override) => {
        let cleanOverride;

        if (override !== undefined) {
          if (typeof override !== 'object') {
            throw new Error('merge expects override to be an object!');
          } else {
            cleanOverride = Object.keys(override).reduce((acc, key) => {
              if (override[key] !== undefined) {
                acc[key] = override[key];
              }

              return acc;
            }, {});
          }
        }

        return Object.assign({}, template, cleanOverride);
      };
      ;// CONCATENATED MODULE: ./lib/utils/protocols/ntp.ts
      // NTP is offset from 01.01.1900
      const NTP_UNIX_EPOCH_OFFSET = Date.UTC(1900, 0, 1); // Convenience types

      /**
       * Convert NTP time to milliseconds since January 1, 1970, 00:00:00 UTC (Unix Epoch)
       * @param ntpMost - Seconds since 01.01.1900
       * @param ntpLeast - Fractions since 01.01.1900
       */
      function getTime (ntpMost, ntpLeast) {
        const ntpMilliSeconds = (ntpMost + ntpLeast / 0x100000000) * 1000;
        return NTP_UNIX_EPOCH_OFFSET + ntpMilliSeconds;
      }
      ;// CONCATENATED MODULE: ./lib/components/rtsp-session/index.ts
/* provided dependency */ var rtsp_session_Buffer = __webpack_require__(7866)["Buffer"];


      function rtsp_session_defineProperty (obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }











      function isAbsolute (url) {
        return /^[^:]+:\/\//.test(url);
      }

      var rtsp_session_STATE;

      (function (STATE) {
        STATE["IDLE"] = "idle";
        STATE["PLAYING"] = "playing";
        STATE["PAUSED"] = "paused";
      })(rtsp_session_STATE || (rtsp_session_STATE = {}));

      let RTSP_METHOD;

      (function (RTSP_METHOD) {
        RTSP_METHOD["OPTIONS"] = "OPTIONS";
        RTSP_METHOD["DESCRIBE"] = "DESCRIBE";
        RTSP_METHOD["SETUP"] = "SETUP";
        RTSP_METHOD["PLAY"] = "PLAY";
        RTSP_METHOD["PAUSE"] = "PAUSE";
        RTSP_METHOD["TEARDOWN"] = "TEARDOWN";
      })(RTSP_METHOD || (RTSP_METHOD = {}));

      const MIN_SESSION_TIMEOUT = 5; // minimum timeout for a rtsp session in seconds

      // Default RTSP configuration
      const defaultConfig = (hostname = typeof window === 'undefined' ? '' : window.location.hostname, parameters = []) => {
        const uri = parameters.length > 0 ? `rtsp://${hostname}/axis-media/media.amp?${parameters.join('&')}` : `rtsp://${hostname}/axis-media/media.amp`;
        return {
          uri
        };
      };

      class RTSPResponseError extends Error {
        constructor(message, code) {
          super(message);

          rtsp_session_defineProperty(this, "code", void 0);

          this.name = 'RTSPResponseError';
          this.code = code;
        }

      }
      /**
       * A component that sets up a command queue in order to interact with the RTSP
       * server. Allows control over the RTSP session by listening to incoming messages
       * and sending request on the outgoing stream.
       *
       * The following handlers can be set on the component:
       *  - onSdp: will be called when an SDP object is sent with the object as argument
       *  - onPlay: will be called when an RTSP PLAY response is sent with the media range
       *            as argument. The latter is an array [start, stop], where start is "now"
       *            (for live) or a time in seconds, and stop is undefined (for live or
       *            ongoing streams) or a time in seconds.
       * @extends {Component}
       */

      class RtspSession extends Tube {
        /**
         * Create a new RTSP session controller component.
         * @param  [config] Details about the session.
         * @param  [config.hostname] The RTSP server hostname
         * @param  [config.parameters] The RTSP URI parameters
         * @param  [config.uri] The full RTSP URI (overrides any hostname/parameters)
         * @param  [config.defaultHeaders] Default headers to use (for all methods).
         * @param  [config.headers] Headers to use (mapped to each method).
         */
        constructor(config = {}) {
          const {
            uri,
            headers,
            defaultHeaders
          } = merge(defaultConfig(config.hostname, config.parameters), config);
          const incoming = new stream_browserify.Transform({
            objectMode: true,
            transform: (msg, _, callback) => {
              if (msg.type === MessageType.RTSP) {
                this._onRtsp(msg);

                callback(); // Consumes the RTSP packages
              } else if (msg.type === MessageType.RTCP) {
                this._onRtcp(msg); // Execute externally registered SDP handler


                this.onRtcp && this.onRtcp(msg.rtcp); // Pass SDP forward

                callback(undefined, msg);
              } else if (msg.type === MessageType.RTP) {
                this._onRtp(msg);

                callback(undefined, msg);
              } else if (msg.type === MessageType.SDP) {
                this._onSdp(msg); // Execute externally registered SDP handler


                this.onSdp && this.onSdp(msg.sdp); // Pass SDP forward

                callback(undefined, msg);
              } else {
                // Not a message we should handle
                callback(undefined, msg);
              }
            }
          });
          incoming.on('end', () => {
            // Incoming was ended, assume that outgoing is closed as well
            this._outgoingClosed = true;
          });
          super(incoming);

          rtsp_session_defineProperty(this, "uri", void 0);

          rtsp_session_defineProperty(this, "headers", void 0);

          rtsp_session_defineProperty(this, "defaultHeaders", void 0);

          rtsp_session_defineProperty(this, "t0", void 0);

          rtsp_session_defineProperty(this, "n0", void 0);

          rtsp_session_defineProperty(this, "clockrates", void 0);

          rtsp_session_defineProperty(this, "startTime", void 0);

          rtsp_session_defineProperty(this, "onRtcp", void 0);

          rtsp_session_defineProperty(this, "onSdp", void 0);

          rtsp_session_defineProperty(this, "onError", void 0);

          rtsp_session_defineProperty(this, "onPlay", void 0);

          rtsp_session_defineProperty(this, "retry", void 0);

          rtsp_session_defineProperty(this, "_outgoingClosed", void 0);

          rtsp_session_defineProperty(this, "_sequence", void 0);

          rtsp_session_defineProperty(this, "_callStack", void 0);

          rtsp_session_defineProperty(this, "_callHistory", void 0);

          rtsp_session_defineProperty(this, "_state", void 0);

          rtsp_session_defineProperty(this, "_waiting", void 0);

          rtsp_session_defineProperty(this, "_contentBase", void 0);

          rtsp_session_defineProperty(this, "_contentLocation", void 0);

          rtsp_session_defineProperty(this, "_sessionId", void 0);

          rtsp_session_defineProperty(this, "_sessionControlURL", void 0);

          rtsp_session_defineProperty(this, "_renewSessionInterval", void 0);

          this._outgoingClosed = false;

          this._reset();

          this.update(uri, headers, defaultHeaders);
          this._sessionControlURL = this._controlURL();
        }
        /**
         * Update the cached RTSP uri and headers.
         * @param  uri - The RTSP URI.
         * @param  headers - Maps commands to headers.
         * @param  defaultHeaders - Default headers.
         */


        update (uri, headers = {}, defaultHeaders = {}) {
          if (uri === undefined) {
            throw new Error('You must supply an uri when creating a RtspSessionComponent');
          }

          this.uri = uri;
          this.defaultHeaders = defaultHeaders;
          this.headers = Object.assign({
            [RTSP_METHOD.OPTIONS]: {},
            [RTSP_METHOD.PLAY]: {},
            [RTSP_METHOD.SETUP]: {
              Blocksize: '64000'
            },
            [RTSP_METHOD.DESCRIBE]: {
              Accept: 'application/sdp'
            },
            [RTSP_METHOD.PAUSE]: {}
          }, headers);
        }
        /**
         * Restore the initial values to the state they were in before any RTSP
         * connection was made.
         */


        _reset () {
          this._sequence = 1;

          this.retry = () => console.error("No request sent, can't retry");

          this._callStack = [];
          this._callHistory = [];
          this._state = rtsp_session_STATE.IDLE;
          this._waiting = false;
          this._contentBase = null;
          this._sessionId = null;

          if (this._renewSessionInterval !== null) {
            clearInterval(this._renewSessionInterval);
          }

          this._renewSessionInterval = null;
          this.t0 = undefined;
          this.n0 = undefined;
          this.clockrates = undefined;
        }

        _controlURL (attribute) {
          if (attribute !== undefined && isAbsolute(attribute)) {
            return attribute;
          } // Not defined or not absolute, we need a base URI


          const baseURL = this._contentBase ?? this._contentLocation ?? this.uri;

          if (baseURL === null || baseURL === undefined) {
            throw new Error('relative or missing control attribute but no base URL available');
          }

          if (attribute === undefined || attribute === '*') {
            return baseURL;
          }

          return new URL(attribute, baseURL).href;
        }
        /**
         * Handles incoming RTSP messages and send the next command in the queue.
         * @param  msg - An incoming RTSP message.
         */


        _onRtsp (msg) {
          this._waiting = false;
          const status = statusCode(msg.data);
          const ended = connectionEnded(msg.data);
          const seq = sequence(msg.data);

          if (seq === null) {
            throw new Error('rtsp: expected sequence number');
          }

          if (this._callHistory === undefined) {
            throw new Error('rtsp: internal error');
          }

          const method = this._callHistory[seq - 1];
          browser_default()('msl:rtsp:incoming')(`${msg.data}`);

          if (!this._sessionId && !ended) {
            // Response on first SETUP
            this._sessionId = sessionId(msg.data);

            const _sessionTimeout = sessionTimeout(msg.data);

            if (_sessionTimeout !== null) {
              // The server specified that sessions will timeout if not renewed.
              // In order to keep it alive we need periodically send a RTSP_OPTIONS message
              if (this._renewSessionInterval !== null) {
                clearInterval(this._renewSessionInterval);
              }

              this._renewSessionInterval = setInterval(() => {
                this._enqueue({
                  method: RTSP_METHOD.OPTIONS
                });

                this._dequeue();
              }, Math.max(MIN_SESSION_TIMEOUT, _sessionTimeout - 5) * 1000);
            }
          }

          if (!this._contentBase) {
            this._contentBase = contentBase(msg.data);
          }

          if (!this._contentLocation) {
            this._contentLocation = contentLocation(msg.data);
          }

          if (status >= 400) {
            // TODO: Retry in certain cases?
            this.onError && this.onError(new RTSPResponseError(msg.data.toString('ascii'), status));
          }

          if (method === RTSP_METHOD.PLAY) {
            // When starting to play, send the actual range to an external handler.
            this.onPlay && this.onPlay(range(msg.data));
          }

          if (ended) {
            browser_default()('msl:rtsp:incoming')(`RTSP Session ${this._sessionId} ended with statusCode: ${status}`);
            this._sessionId = null;
          }

          this._dequeue();
        }

        _onRtcp (msg) {
          if (this.t0 === undefined || this.n0 === undefined) {
            throw new Error('rtsp: internal error');
          }

          if (isRtcpSR(msg.rtcp)) {
            const rtpChannel = msg.channel - 1;
            this.t0[rtpChannel] = msg.rtcp.rtpTimestamp;
            this.n0[rtpChannel] = getTime(msg.rtcp.ntpMost, msg.rtcp.ntpLeast);
          }
        }

        _onRtp (msg) {
          if (this.t0 === undefined || this.n0 === undefined || this.clockrates === undefined) {
            throw new Error('rtsp: internal error');
          }

          const rtpChannel = msg.channel;
          const t0 = this.t0[rtpChannel];
          const n0 = this.n0[rtpChannel];

          if (typeof t0 !== 'undefined' && typeof n0 !== 'undefined') {
            const clockrate = this.clockrates[rtpChannel];
            const t = timestamp(msg.data); // The RTP timestamps are unsigned 32 bit and will overflow
            // at some point. We can guard against the overflow by ORing with 0,
            // which will bring any difference back into signed 32-bit domain.

            const dt = t - t0 | 0;
            msg.ntpTimestamp = dt / clockrate * 1000 + n0;
          }
        }
        /**
         * Handles incoming SDP messages, reply with SETUP and optionally PLAY.
         * @param  msg - An incoming SDP message.
         */


        _onSdp (msg) {
          this.n0 = {};
          this.t0 = {};
          this.clockrates = {};
          this._sessionControlURL = this._controlURL(msg.sdp.session.control);
          msg.sdp.media.forEach((media, index) => {
            // We should actually be able to handle
            // non-dynamic payload types, but ignored for now.
            if (media.rtpmap === undefined) {
              return;
            }

            const {
              clockrate
            } = media.rtpmap;
            const rtp = index * 2;
            const rtcp = rtp + 1;
            const uri = media.control === undefined ? this._sessionControlURL : this._controlURL(media.control);

            this._enqueue({
              method: RTSP_METHOD.SETUP,
              headers: {
                Transport: 'RTP/AVP/TCP;unicast;interleaved=' + rtp + '-' + rtcp
              },
              uri
            }); // TODO: see if we can get rid of this check somehow


            if (this.clockrates === undefined) {
              return;
            }

            this.clockrates[rtp] = clockrate;
          });

          if (this._state === rtsp_session_STATE.PLAYING) {
            this._enqueue({
              method: RTSP_METHOD.PLAY,
              headers: {
                Range: `npt=${this.startTime || 0}-`
              },
              uri: this._sessionControlURL
            });
          }

          this._dequeue();
        }
        /**
         * Set up command queue in order to start playing, i.e. PLAY optionally
         * preceeded by OPTIONS/DESCRIBE commands. If not waiting, immediately
         * start sending.
         * @param  startTime - Time (seconds) at which to start playing
         */


        play (startTime = 0) {
          if (this._state === rtsp_session_STATE.IDLE) {
            this.startTime = Number(startTime) || 0;

            this._enqueue({
              method: RTSP_METHOD.OPTIONS
            });

            this._enqueue({
              method: RTSP_METHOD.DESCRIBE
            });
          } else if (this._state === rtsp_session_STATE.PAUSED) {
            if (this._sessionId === null || this._sessionId === undefined) {
              throw new Error('rtsp: internal error');
            }

            this._enqueue({
              method: RTSP_METHOD.PLAY,
              headers: {
                Session: this._sessionId
              },
              uri: this._sessionControlURL
            });
          }

          this._state = rtsp_session_STATE.PLAYING;

          this._dequeue();
        }
        /**
         * Queue a pause command, and send if not waiting.
         * @return {undefined}
         */


        pause () {
          this._enqueue({
            method: RTSP_METHOD.PAUSE
          });

          this._state = rtsp_session_STATE.PAUSED;

          this._dequeue();
        }
        /**
         * End the session if there is one, otherwise just cancel
         * any outstanding calls on the stack.
         * @return {undefined}
         */


        stop () {
          if (this._sessionId) {
            this._enqueue({
              method: RTSP_METHOD.TEARDOWN
            });
          } else {
            this._callStack = [];
          }

          this._state = rtsp_session_STATE.IDLE;

          if (this._renewSessionInterval !== null) {
            clearInterval(this._renewSessionInterval);
            this._renewSessionInterval = null;
          }

          this._dequeue();
        }
        /**
         * Pushes an RTSP request onto the outgoing stream.
         * @param  cmd - The details about the command to send.
         */


        send (cmd) {
          const {
            method,
            headers,
            uri
          } = cmd;

          if (method === undefined) {
            throw new Error('missing method when send request');
          }

          this._waiting = true;
          this.retry = this.send.bind(this, cmd);

          if (this._sequence === undefined || this.headers === undefined || this._callHistory === undefined) {
            throw new Error('rtsp: internal error');
          }

          const message = Object.assign({
            type: MessageType.RTSP,
            uri: uri || this._sessionControlURL,
            data: rtsp_session_Buffer.alloc(0) // data is a mandatory field. Not used by session -> parser messages.

          }, {
            method,
            headers
          }, {
            headers: Object.assign({
              CSeq: this._sequence++
            }, this.defaultHeaders, // default headers (for all methods)
              this.headers[method], // preset headers for this method
              headers // headers that came with the invokation
            )
          });
          this._sessionId && (message.headers.Session = this._sessionId);

          this._callHistory.push(method);

          if (!this._outgoingClosed) {
            this.outgoing.push(message);
          } else {
            // If the socket is closed, dont attempt to send any data
            browser_default()('msl:rtsp:outgoing')(`Unable to send ${method}, connection closed`);
          }
        }
        /**
         * Push a command onto the call stack.
         * @param  cmd - The command to queue
         */


        _enqueue (cmd) {
          if (this._callStack === undefined) {
            throw new Error('rtsp: internal error');
          }

          this._callStack.push(cmd);
        }
        /**
         * If possible, send the next command on the call stack.
         */


        _dequeue () {
          if (this._callStack === undefined) {
            throw new Error('rtsp: internal error');
          }

          if (!this._waiting && this._callStack.length > 0) {
            const cmd = this._callStack.shift();

            if (cmd !== undefined) {
              this.send(cmd);
            }
          }
        }

      }
      ;// CONCATENATED MODULE: ./lib/components/ws-source/openwebsocket.ts
      // Time in milliseconds we want to wait for a websocket to open

      const WEBSOCKET_TIMEOUT = 10007;

      // Default configuration
      const openwebsocket_defaultConfig = (host = window.location.host, scheme = window.location.protocol) => {
        const wsScheme = scheme === 'https:' ? 'wss:' : 'ws:';
        return {
          uri: `${wsScheme}//${host}/rtsp-over-websocket`,
          tokenUri: `${scheme}//${host}/axis-cgi/rtspwssession.cgi`,
          protocol: 'binary',
          timeout: WEBSOCKET_TIMEOUT
        };
      };
      /**
       * Open a new WebSocket, fallback to token-auth on failure and retry.
       * @param  [config]  WebSocket configuration.
       * @param  [config.host]  Specify different host
       * @param  [config.sheme]  Specify different scheme.
       * @param  [config.uri]  Full uri for websocket connection
       * @param  [config.tokenUri]  Full uri for token API
       * @param  [config.protocol] Websocket protocol
       * @param  [config.timeout] Websocket connection timeout
       */


      const openWebSocket = async (config = {}) => {
        const {
          uri,
          tokenUri,
          protocol,
          timeout
        } = merge(openwebsocket_defaultConfig(config.host, config.scheme), config);

        if (uri === undefined) {
          throw new Error('ws: internal error');
        }

        return await new Promise((resolve, reject) => {
          try {
            const ws = new WebSocket(uri, protocol);
            const countdown = setTimeout(() => {
              clearTimeout(countdown);

              if (ws.readyState === WebSocket.CONNECTING) {
                ws.onerror = null;
                reject(new Error('websocket connection timed out'));
              }
            }, timeout);
            ws.binaryType = 'arraybuffer';

            ws.onerror = originalError => {
              clearTimeout(countdown); // try fetching an authentication token

              function onLoadToken () {
                if (this.status >= 400) {
                  console.warn('failed to load token', this.status, this.responseText);
                  reject(originalError);
                  return;
                }

                const token = this.responseText.trim(); // We have a token! attempt to open a WebSocket again.

                const newUri = `${uri}?rtspwssession=${token}`;
                const ws2 = new WebSocket(newUri, protocol);
                ws2.binaryType = 'arraybuffer';

                ws2.onerror = err => {
                  reject(err);
                };

                ws2.onopen = () => resolve(ws2);
              }

              const request = new XMLHttpRequest();
              request.addEventListener('load', onLoadToken);
              request.addEventListener('error', err => {
                console.warn('failed to get token');
                reject(err);
              });
              request.addEventListener('abort', () => reject(originalError));
              request.open('GET', `${tokenUri}?${Date.now()}`);

              try {
                request.send();
              } catch (error) {
                reject(originalError);
              }
            };

            ws.onopen = () => {
              clearTimeout(countdown);
              resolve(ws);
            };
          } catch (e) {
            reject(e);
          }
        });
      };
      ;// CONCATENATED MODULE: ./lib/components/ws-source/index.ts
/* provided dependency */ var ws_source_Buffer = __webpack_require__(7866)["Buffer"];
      function ws_source_defineProperty (obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





      // Named status codes for CloseEvent, see:
      // https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent

      const CLOSE_GOING_AWAY = 1001;
      class WSSource extends Source {
        /**
         * Create a WebSocket component.
         *
         * The constructor sets up two streams and connects them to the socket as
         * soon as the socket is available (and open).
         *
         * @param socket - an open WebSocket.
         */
        constructor(socket) {
          if (socket === undefined) {
            throw new Error('socket argument missing');
          }
          /**
           * Set up an incoming stream and attach it to the socket.
           * @type {Readable}
           */


          const incoming = new stream_browserify.Readable({
            objectMode: true,
            read: function () {//
            }
          });

          socket.onmessage = msg => {
            const buffer = ws_source_Buffer.from(msg.data);
            console.log("got data from WS", buffer);

            if (!incoming.push({
              data: buffer,
              type: MessageType.RAW
            })) {
              // Something happened down stream that it is no longer processing the
              // incoming data, and the stream buffer got full. In this case it is
              // best to just close the socket instead of throwing away data in the
              // hope that the situation will get resolved.
              if (socket.readyState === WebSocket.OPEN) {
                browser_default()('msl:websocket:incoming')('downstream frozen');
                socket.close();
              }
            }
          }; // When an error is sent on the incoming stream, close the socket.


          incoming.on('error', e => {
            console.warn('closing socket due to incoming error', e);
            socket.close();
          });
          /**
           * Set up outgoing stream and attach it to the socket.
           * @type {Writable}
           */

          const outgoing = new stream_browserify.Writable({
            objectMode: true,
            write: function (msg, encoding, callback) {
              try {
                socket.send(msg.data);
              } catch (e) {
                console.warn('message lost during send:', msg);
              }

              callback();
            }
          }); // When an error happens on the outgoing stream, just warn.

          outgoing.on('error', e => {
            console.warn('error during websocket send, ignoring:', e);
          }); // When there is no more data going to be written, close!

          outgoing.on('finish', () => {
            browser_default()('msl:websocket:outgoing')('finish');

            if (socket.readyState !== WebSocket.CLOSED) {
              socket.close();
            }
          });
          /**
           * Handler for when WebSocket is CLOSED
           * @param  e - The event associated with a close
           * @param  e.code The status code sent by the server
           *   Possible codes are documented here:
           *   https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent
           */

          socket.onclose = e => {
            browser_default()('msl:websocket:close')(`${e.code}`);

            if (e.code === CLOSE_GOING_AWAY) {
              this.onServerClose && this.onServerClose();
            } // Terminate the streams.


            incoming.push(null);
            outgoing.end();
          };
          /**
           * initialize the component.
           */


          super(incoming, outgoing);

          ws_source_defineProperty(this, "onServerClose", void 0);
        }
        /**
         * Expose websocket opener as a class method that returns a promise which
         * resolves with a new WebSocketComponent.
         */


        static async open (config) {
          return await openWebSocket(config).then(socket => new WSSource(socket));
        }

      }
      ;// CONCATENATED MODULE: ./lib/components/index.browser.ts

















      ;// CONCATENATED MODULE: ./lib/pipelines/pipeline.ts
      function pipeline_defineProperty (obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

      /**
       * Pipeline
       *
       * A pipeline is a linked list of components with some convenience methods to
       * handle inserting or removing components from the linked list.
       *
       * A internal set keeps track of which components the pipeline contains, while
       * any order is completely determined by the component's connectedness.
       */
      class Pipeline {
        /**
         * @param components - The components of the pipeline in order.
         */
        constructor(...components) {
          pipeline_defineProperty(this, "firstComponent", void 0);

          pipeline_defineProperty(this, "lastComponent", void 0);

          pipeline_defineProperty(this, "_set", void 0);

          const [car, ...cdr] = components;
          this._set = new Set(components);
          this.firstComponent = car;
          this.lastComponent = cdr.reduce((last, component) => {
            return last.connect(component);
          }, car);
        }
        /**
         * @param components - The components of the pipeline in order.
         */


        init (...components) {
          const [car, ...cdr] = components;
          this._set = new Set(components);
          this.firstComponent = car;
          this.lastComponent = cdr.reduce((last, component) => {
            return last.connect(component);
          }, car);
        }
        /**
         * Inserts a component into the pipeline.
         *
         * @param component - Tube or Source behind which to insert a new component.
         * @param component - Tube or Sink to insert.
         */


        insertAfter (component, newComponent) {
          if (!this._set.has(component)) {
            throw new Error('insertion point not part of pipeline');
          }

          if (this._set.has(newComponent)) {
            throw new Error('new component already in the pipeline');
          }

          const cdr = component.next;

          if (cdr === null) {
            component.connect(newComponent);
            this.lastComponent = newComponent;
          } else {
            component.disconnect();
            component.connect(newComponent).connect(cdr);
          }

          this._set.add(newComponent);

          return this;
        }
        /**
         * Inserts a component into the pipeline.
         *
         * @param component - Tube or Sink in front of which to insert a new component.
         * @param component - Tube or Source to insert.
         */


        insertBefore (component, newComponent) {
          if (!this._set.has(component)) {
            throw new Error('insertion point not part of pipeline');
          }

          if (this._set.has(newComponent)) {
            throw new Error('new component already in the pipeline');
          }

          const car = component.prev;

          if (car === null) {
            newComponent.connect(component);
            this.firstComponent = newComponent;
          } else {
            car.disconnect();
            car.connect(newComponent).connect(component);
          }

          this._set.add(newComponent);

          return this;
        }
        /**
         * Removes a component from the pipeline.
         *
         * @param component - Component to remove.
         */


        remove (component) {
          if (!this._set.has(component)) {
            throw new Error('component not part of pipeline');
          }

          const car = component.prev;
          const cdr = component.next;

          if (car === null && cdr === null) {
            throw new Error('cannot remove last component');
          } else if (car === null && cdr !== null) {
            component.disconnect();
            this.firstComponent = cdr;
          } else if (car !== null && cdr === null) {
            car.disconnect();
            this.lastComponent = car;
          } else if (car !== null && cdr !== null) {
            car.disconnect();
            component.disconnect();
            car.connect(cdr);
          }

          this._set.delete(component);

          return this;
        }
        /**
         * Inserts a component at the end of the pipeline.
         *
         * @param component - Tube or Sink to insert.
         */


        append (...components) {
          components.forEach(component => {
            this.insertAfter(this.lastComponent, component);
          });
          return this;
        }
        /**
         * Inserts a component at the beginning of the pipeline.
         *
         * @param component - Tube or Source to insert.
         */


        prepend (...components) {
          components.forEach(component => {
            this.insertBefore(this.firstComponent, component);
          });
          return this;
        }

      }
      ;// CONCATENATED MODULE: ./lib/pipelines/rtsp-pipeline.ts
      function rtsp_pipeline_defineProperty (obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





      /**
       * RtspPipeline
       *
       * A pipeline that converts interleaved RTSP/RTP into a series of RTP, RTCP, and
       * RTSP packets.  The pipeline exposes the RTSP session component as
       * `this.session`, and wraps its play, pause and stop methods.
       *
       * The following handlers can be defined:
       * - onSdp: called when the session descript protocol is available, with the SDP
       *   object as argument
       * - onPlay: called when a response from the PLAY command arrives, with the play
       *   range as argument
       */
      class RtspPipeline extends Pipeline {
        constructor(rtspConfig) {
          const rtspParser = new RtspParser();
          const rtspSession = new RtspSession(rtspConfig);

          rtspSession.onSdp = sdp => {
            this.onSdp && this.onSdp(sdp);
          };

          rtspSession.onPlay = range => {
            this.onPlay && this.onPlay(range);
          };

          super(rtspParser, rtspSession); // Expose session for external use

          rtsp_pipeline_defineProperty(this, "onSdp", void 0);

          rtsp_pipeline_defineProperty(this, "onPlay", void 0);

          rtsp_pipeline_defineProperty(this, "rtsp", void 0);

          this.rtsp = rtspSession;
        }

      }
      ;// CONCATENATED MODULE: ./lib/pipelines/rtsp-mp4-pipeline.ts
      function rtsp_mp4_pipeline_defineProperty (obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





      /**
       * RtspMp4Pipeline
       *
       * A pipeline that can process H264/AAC RTP data, and converts it to streaming
       * MP4 format (ISO BMFF bytestream).
       *
       * The following handlers can be defined:
       * - all handlers from the RtspPipeline
       * - `onSync`: called when the NTP time of the first frame is known, with the
       *   timestamp as argument (the timestamp is UNIX milliseconds)
       */

      class RtspMp4Pipeline extends RtspPipeline {
        constructor(rtspConfig) {
          super(rtspConfig);

          rtsp_mp4_pipeline_defineProperty(this, "onSync", void 0);

          rtsp_mp4_pipeline_defineProperty(this, "_mp4Muxer", void 0);

          const h264Depay = new H264Depay();
          const aacDepay = new AACDepay();
          const mp4Muxer = new Mp4Muxer();

          mp4Muxer.onSync = ntpPresentationTime => {
            this.onSync && this.onSync(ntpPresentationTime);
          };

          this.append(h264Depay, aacDepay, mp4Muxer);
          this._mp4Muxer = mp4Muxer;
        }

        get bitrate () {
          return this._mp4Muxer.bitrate;
        }

        get framerate () {
          return this._mp4Muxer.framerate;
        }

      }
      ;// CONCATENATED MODULE: ./lib/pipelines/rtsp-mjpeg-pipeline.ts


      /**
       * RtspMjpegPipeline
       *
       * A pipeline that can process JPEG RTP data, and converts it to streaming
       * motion JPEG format (sequence of JPEG images).
       *
       * The following handlers can be defined:
       * - all handlers from the RtspPipeline
       */

      class RtspMjpegPipeline extends RtspPipeline {
        constructor(rtspConfig) {
          super(rtspConfig);
          const jpegDepay = new JPEGDepay();
          this.append(jpegDepay);
        }

      }
      // EXTERNAL MODULE: ./.yarn/cache/ts-md5-npm-1.2.9-8ae03cfacf-e631e781a3.zip/node_modules/ts-md5/dist/md5.js
      var md5 = __webpack_require__(2993);
      ;// CONCATENATED MODULE: ./lib/components/auth/digest.ts
      function digest_defineProperty (obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

      // https://tools.ietf.org/html/rfc2617#section-3.2.1

      class DigestAuth {
        constructor(params, username, password) {
          digest_defineProperty(this, "realm", void 0);

          digest_defineProperty(this, "nonce", void 0);

          digest_defineProperty(this, "opaque", void 0);

          digest_defineProperty(this, "algorithm", void 0);

          digest_defineProperty(this, "qop", void 0);

          digest_defineProperty(this, "username", void 0);

          digest_defineProperty(this, "ha1Base", void 0);

          digest_defineProperty(this, "count", void 0);

          digest_defineProperty(this, "nc", () => {
            ++this.count;
            return this.count.toString(16).padStart(8, '0');
          });

          digest_defineProperty(this, "cnonce", () => {
            return new Array(4).fill(0).map(() => Math.floor(Math.random() * 256)).map(n => n.toString(16)).join('');
          });

          digest_defineProperty(this, "ha1", cnonce => {
            let ha1 = this.ha1Base;

            if (this.algorithm === 'md5-sess') {
              ha1 = new md5/* Md5 */.V().appendStr(`${ha1}:${this.nonce}:${cnonce}`).end().toString();
            }

            return ha1;
          });

          digest_defineProperty(this, "ha2", (method, uri, body = '') => {
            let ha2 = new md5/* Md5 */.V().appendStr(`${method}:${uri}`).end().toString();

            if (this.algorithm === 'md5-sess') {
              const hbody = new md5/* Md5 */.V().appendStr(body).end().toString();
              ha2 = new md5/* Md5 */.V().appendStr(`${method}:${uri}:${hbody}`).end().toString();
            }

            return ha2;
          });

          digest_defineProperty(this, "authorization", (method = 'GET', uri = '', body) => {
            // Increase count
            const nc = this.nc();
            const cnonce = this.cnonce();
            const ha1 = this.ha1(cnonce);
            const ha2 = this.ha2(method, uri, body);
            const response = this.qop === undefined ? new md5/* Md5 */.V().appendStr(`${ha1}:${this.nonce}:${ha2}`).end().toString() : new md5/* Md5 */.V().appendStr(`${ha1}:${this.nonce}:${nc}:${cnonce}:${this.qop}:${ha2}`).end().toString();
            const authorizationParams = [];
            authorizationParams.push(`username="${this.username}"`);
            authorizationParams.push(`realm="${this.realm}"`);
            authorizationParams.push(`nonce="${this.nonce}"`);
            authorizationParams.push(`uri="${uri}"`);

            if (this.qop !== undefined) {
              authorizationParams.push(`qop=${this.qop}`);
              authorizationParams.push(`nc=${nc}`);
              authorizationParams.push(`cnonce="${cnonce}"`);
            }

            authorizationParams.push(`response="${response}"`);

            if (this.opaque !== undefined) {
              authorizationParams.push(`opaque="${this.opaque}"`);
            }

            return `Digest ${authorizationParams.join(', ')}`;
          });

          const realm = params.get('realm');

          if (realm === undefined) {
            throw new Error('no realm in digest challenge');
          }

          this.realm = realm;
          this.ha1Base = new md5/* Md5 */.V().appendStr(`${username}:${realm}:${password}`).end().toString();
          const nonce = params.get('nonce');

          if (nonce === undefined) {
            throw new Error('no nonce in digest challenge');
          }

          this.nonce = nonce;
          this.opaque = params.get('opaque');
          const algorithm = params.get('algorithm');

          if (algorithm !== undefined) {
            if (algorithm === 'md5') {
              this.algorithm = 'md5';
            } else if (algorithm === 'md5-sess') {
              this.algorithm = 'md5-sess';
            }
          } else {
            this.algorithm = 'md5';
          }

          const qop = params.get('qop');

          if (qop !== undefined) {
            const possibleQops = qop.split(',').map(qopType => qopType.trim());

            if (possibleQops.some(qopValue => qopValue === 'auth')) {
              this.qop = 'auth';
            } else if (possibleQops.some(qopValue => qopValue === 'auth-int')) {
              this.qop = 'auth-int';
            }
          }

          this.count = 0;
          this.username = username;
        }

      }
      ;// CONCATENATED MODULE: ./lib/components/auth/www-authenticate.ts
      const parseWWWAuthenticate = header => {
        const [, type, ...challenge] = header.split(' ');
        const pairs = [];
        const re = /\s*([^=]+)="([^"]*)",?/gm;
        let match;

        do {
          match = re.exec(challenge.join(' '));

          if (match !== null) {
            const [, key, value] = match;
            pairs.push([key, value]);
          }
        } while (match !== null);

        const params = new Map(pairs);
        return {
          type: type.toLowerCase(),
          params
        };
      };
      ;// CONCATENATED MODULE: ./lib/components/auth/index.ts
/* provided dependency */ var auth_Buffer = __webpack_require__(7866)["Buffer"];







      const UNAUTHORIZED = 401;
      const DEFAULT_CONFIG = {
        username: 'root',
        password: 'pass'
      };
      /*
       * This component currently only supports Basic authentication
       * It should be placed between the RTSP parser and the RTSP Session.
       */

      class Auth extends Tube {
        constructor(config = {}) {
          const {
            username,
            password
          } = merge(DEFAULT_CONFIG, config);

          if (username === undefined || password === undefined) {
            throw new Error('need username and password');
          }

          let lastSentMessage;
          let authHeader;
          const outgoing = createTransform(function (msg, encoding, callback) {
            if (msg.type === MessageType.RTSP) {
              lastSentMessage = msg;

              if (authHeader && msg.headers) {
                msg.headers.Authorization = authHeader;
              }
            }

            callback(undefined, msg);
          });
          const incoming = createTransform(function (msg, encoding, callback) {
            if (msg.type === MessageType.RTSP && statusCode(msg.data) === UNAUTHORIZED) {
              const headers = msg.data.toString().split('\n');
              const wwwAuth = headers.find(header => /WWW-Auth/i.test(header));

              if (wwwAuth === undefined) {
                throw new Error('cannot find WWW-Authenticate header');
              }

              const challenge = parseWWWAuthenticate(wwwAuth);

              if (challenge.type === 'basic') {
                authHeader = 'Basic ' + auth_Buffer.from(username + ':' + password).toString('base64');
              } else if (challenge.type === 'digest') {
                const digest = new DigestAuth(challenge.params, username, password);
                authHeader = digest.authorization(lastSentMessage.method, lastSentMessage.uri);
              } else {
                // unkown authentication type, give up
                return;
              } // Retry last RTSP message
              // Write will fire our outgoing transform function.


              outgoing.write(lastSentMessage, () => callback());
            } else {
              // Not a message we should handle
              callback(undefined, msg);
            }
          });
          super(incoming, outgoing);
        }

      }
      ;// CONCATENATED MODULE: ./lib/pipelines/html5-canvas-pipeline.ts
      function html5_canvas_pipeline_defineProperty (obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }






      /**
       * Html5CanvasPipeline
       *
       * A pipeline that connects to an RTSP server over a WebSocket connection and
       * can process JPEG RTP data to produce an motion JPEG data stream that is sent
       * to a HTML canvas element.
       *
       * Handlers that can be set on the pipeline:
       * - all handlers inherited from the RtspMjpegPipeline
       * - `onSync`: called when the NTP time of the first frame is known, with the
       *   timestamp as argument (the timestamp is UNIX milliseconds)
       * - `onServerClose`: called when the WebSocket server closes the connection
       *   (only then, not when the connection is closed in a different way)
       */
      class Html5CanvasPipeline extends RtspMjpegPipeline {
        constructor(config) {
          const {
            ws: wsConfig,
            rtsp: rtspConfig,
            mediaElement,
            auth: authConfig
          } = config;
          super(rtspConfig);

          html5_canvas_pipeline_defineProperty(this, "onCanplay", void 0);

          html5_canvas_pipeline_defineProperty(this, "onSync", void 0);

          html5_canvas_pipeline_defineProperty(this, "onServerClose", void 0);

          html5_canvas_pipeline_defineProperty(this, "ready", void 0);

          html5_canvas_pipeline_defineProperty(this, "_src", void 0);

          html5_canvas_pipeline_defineProperty(this, "_sink", void 0);

          if (authConfig) {
            const auth = new Auth(authConfig);
            this.insertBefore(this.rtsp, auth);
          }

          const canvasSink = new CanvasSink(mediaElement);

          canvasSink.onCanplay = () => {
            canvasSink.play();
            this.onCanplay && this.onCanplay();
          };

          canvasSink.onSync = ntpPresentationTime => {
            this.onSync && this.onSync(ntpPresentationTime);
          };

          this.append(canvasSink);
          this._sink = canvasSink;
          const waitForWs = WSSource.open(wsConfig);
          this.ready = waitForWs.then(wsSource => {
            wsSource.onServerClose = () => {
              this.onServerClose && this.onServerClose();
            };

            this.prepend(wsSource);
            this._src = wsSource;
          });
        }

        close () {
          this._src && this._src.outgoing.end();
        }

        get currentTime () {
          return this._sink.currentTime;
        }

        play () {
          return this._sink.play();
        }

        pause () {
          return this._sink.pause();
        }

        get bitrate () {
          return this._sink.bitrate;
        }

        get framerate () {
          return this._sink.framerate;
        }

      }
      ;// CONCATENATED MODULE: ./lib/pipelines/html5-video-pipeline.ts
      function html5_video_pipeline_defineProperty (obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }






      /*
       * Html5VideoPipeline
       *
       * A pipeline that connects to an RTSP server over a WebSocket connection and
       * can process H.264/AAC RTP data to produce an MP4 data stream that is sent to
       * a HTML video element.
       *
       * Handlers that can be set on the pipeline:
       * - all handlers inherited from the RtspMp4Pipeline
       * - `onServerClose`: called when the WebSocket server closes the connection
       *   (only then, not when the connection is closed in a different way)
       *
       */
      class Html5VideoPipeline extends RtspMp4Pipeline {
        constructor(config) {
          const {
            ws: wsConfig,
            rtsp: rtspConfig,
            mediaElement,
            auth: authConfig
          } = config;
          super(rtspConfig);

          html5_video_pipeline_defineProperty(this, "onSourceOpen", void 0);

          html5_video_pipeline_defineProperty(this, "onServerClose", void 0);

          html5_video_pipeline_defineProperty(this, "ready", void 0);

          html5_video_pipeline_defineProperty(this, "tracks", void 0);

          html5_video_pipeline_defineProperty(this, "_src", void 0);

          html5_video_pipeline_defineProperty(this, "_sink", void 0);

          if (authConfig) {
            const auth = new Auth(authConfig);
            this.insertBefore(this.rtsp, auth);
          }

          const mseSink = new MseSink(mediaElement);

          mseSink.onSourceOpen = (mse, tracks) => {
            this.tracks = tracks;
            this.onSourceOpen && this.onSourceOpen(mse, tracks);
          };

          this.append(mseSink);
          this._sink = mseSink;
          const waitForWs = WSSource.open(wsConfig);
          this.ready = waitForWs.then(wsSource => {
            wsSource.onServerClose = () => {
              this.onServerClose && this.onServerClose();
            };

            this.prepend(wsSource);
            this._src = wsSource;
          });
        }

        close () {
          this._src && this._src.outgoing.end();
        }

        get currentTime () {
          return this._sink.currentTime;
        }

        async play () {
          return await this._sink.play();
        }

        pause () {
          return this._sink.pause();
        }

      }
      ;// CONCATENATED MODULE: ./lib/pipelines/html5-video-metadata-pipeline.ts





      /*
       * Html5VideoPipeline
       *
       * A pipeline that connects to an RTSP server over a WebSocket connection and
       * can process H.264/AAC RTP data to produce an MP4 data stream that is sent to
       * a HTML video element.  Additionally, this pipeline passes XML metadata sent
       * in the same stream to a separate handler.
       *
       * Handlers that can be set on the pipeline:
       * - all handlers inherited from the Html5VideoPipeline
       *
       */
      class Html5VideoMetadataPipeline extends Html5VideoPipeline {
        constructor(config) {
          const {
            metadataHandler
          } = config;
          super(config);
          const onvifDepay = new ONVIFDepay();
          this.insertAfter(this.rtsp, onvifDepay);
          const onvifHandlerPipe = Tube.fromHandlers(msg => {
            if (msg.type === MessageType.XML) {
              metadataHandler(msg);
            }
          }, undefined);
          this.insertAfter(onvifDepay, onvifHandlerPipe);
        }

      }
      ;// CONCATENATED MODULE: ./lib/pipelines/metadata-pipeline.ts
      function metadata_pipeline_defineProperty (obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





      // Default configuration for XML event stream

      const DEFAULT_RTSP_PARAMETERS = {
        parameters: ['audio=0', 'video=0', 'event=on', 'ptz=all']
      };

      /*
       * MetadataPipeline
       *
       * A pipeline that connects to an RTSP server over a WebSocket connection and
       * can process XML RTP data and calls a handler to process the XML messages.
       *
       * Handlers that can be set on the pipeline:
       * - all handlers inherited from the RtspPipeline
       * - `onServerClose`: called when the WebSocket server closes the connection
       *   (only then, not when the connection is closed in a different way)
       *
       */
      class MetadataPipeline extends RtspPipeline {
        constructor(config) {
          const {
            ws: wsConfig,
            rtsp: rtspConfig,
            metadataHandler
          } = config;
          super(Object.assign({}, DEFAULT_RTSP_PARAMETERS, rtspConfig));

          metadata_pipeline_defineProperty(this, "onServerClose", void 0);

          metadata_pipeline_defineProperty(this, "ready", void 0);

          metadata_pipeline_defineProperty(this, "_src", void 0);

          const onvifDepay = new ONVIFDepay();
          this.append(onvifDepay);
          const handlerSink = Sink.fromHandler(msg => {
            if (msg.type === MessageType.XML) {
              metadataHandler(msg);
            }
          });
          this.append(handlerSink);
          const waitForWs = WSSource.open(wsConfig);
          this.ready = waitForWs.then(wsSource => {
            wsSource.onServerClose = () => {
              this.onServerClose && this.onServerClose();
            };

            this.prepend(wsSource);
            this._src = wsSource;
          });
        }

        close () {
          this._src && this._src.outgoing.end();
        }

      }
      ;// CONCATENATED MODULE: ./lib/pipelines/ws-sdp-pipeline.ts
      function ws_sdp_pipeline_defineProperty (obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }






      /**
       * WsSdpPipeline
       *
       * Pipeline requesting an SDP object from an RTSP server and then
       * immediately tears down the RTSP session.
       */
      class WsSdpPipeline extends RtspPipeline {
        constructor(config) {
          const {
            ws: wsConfig,
            rtsp: rtspConfig,
            auth: authConfig
          } = config;
          super(rtspConfig);

          ws_sdp_pipeline_defineProperty(this, "onServerClose", void 0);

          ws_sdp_pipeline_defineProperty(this, "ready", void 0);

          ws_sdp_pipeline_defineProperty(this, "_src", void 0);

          if (authConfig) {
            const auth = new Auth(authConfig);
            this.insertBefore(this.rtsp, auth);
          }

          const waitForWs = WSSource.open(wsConfig);
          this.ready = waitForWs.then(wsSource => {
            wsSource.onServerClose = () => {
              this.onServerClose && this.onServerClose();
            };

            this.prepend(wsSource);
            this._src = wsSource;
          });
        }

        close () {
          this._src && this._src.outgoing.end();
        }

        get sdp () {
          return this.ready.then(async () => {
            const sdpPromise = new Promise(resolve => {
              this.rtsp.onSdp = resolve;
            });
            this.rtsp.send({
              method: RTSP_METHOD.DESCRIBE
            });
            this.rtsp.send({
              method: RTSP_METHOD.TEARDOWN
            });
            return sdpPromise;
          });
        }

      }
      ;// CONCATENATED MODULE: ./lib/components/http-mp4/index.ts
/* provided dependency */ var http_mp4_Buffer = __webpack_require__(7866)["Buffer"];
      function http_mp4_ownKeys (object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

      function http_mp4_objectSpread (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { http_mp4_ownKeys(Object(source), true).forEach(function (key) { http_mp4_defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { http_mp4_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

      function http_mp4_defineProperty (obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





      const http_mp4_debug = browser_default()('msl:http-mp4');

      /**
       * HttpMp4
       *
       * Stream MP4 data over HTTP/S, and use Axis-specific
       * headers to determine MIME type and stream transformation.
       */
      class HttpMp4Source extends Source {
        /**
         * Create an HTTP component.
         *
         * The constructor sets a single readable stream from a fetch.
         */
        constructor(config) {
          const {
            uri,
            options
          } = config;
          /**
           * Set up an incoming stream and attach it to the socket.
           */

          const incoming = new stream_browserify.Readable({
            objectMode: true,
            read: function () {//
            }
          }); // When an error is sent on the incoming stream, close the socket.

          incoming.on('error', e => {
            console.warn('closing socket due to incoming error', e);
            this._reader && this._reader.cancel();
          });
          /**
           * initialize the component.
           */

          super(incoming); // When a read is requested, continue to pull data

          http_mp4_defineProperty(this, "uri", void 0);

          http_mp4_defineProperty(this, "options", void 0);

          http_mp4_defineProperty(this, "length", void 0);

          http_mp4_defineProperty(this, "onHeaders", void 0);

          http_mp4_defineProperty(this, "onServerClose", void 0);

          http_mp4_defineProperty(this, "_reader", void 0);

          http_mp4_defineProperty(this, "_abortController", void 0);

          http_mp4_defineProperty(this, "_allDone", void 0);

          incoming._read = () => {
            this._pull();
          };

          this.uri = uri;
          this.options = options;
          this._allDone = false;
        }

        play () {
          if (this.uri === undefined) {
            throw new Error('cannot start playing when there is no URI');
          }

          this._abortController = new AbortController();
          this.length = 0;
          fetch(this.uri, http_mp4_objectSpread({
            credentials: 'include',
            signal: this._abortController.signal
          }, this.options)).then(rsp => {
            if (rsp.body === null) {
              throw new Error('empty response body');
            }

            const contentType = rsp.headers.get('Content-Type');
            this.incoming.push({
              data: http_mp4_Buffer.alloc(0),
              type: MessageType.ISOM,
              mime: contentType
            });
            this.onHeaders && this.onHeaders(rsp.headers);
            this._reader = rsp.body.getReader();

            this._pull();
          }).catch(err => {
            console.error('http-source: fetch failed: ', err);
          });
        }

        abort () {
          this._reader && this._reader.cancel().catch(err => {
            console.log('http-source: cancel reader failed: ', err);
          });
          this._abortController && this._abortController.abort();
        }

        _isClosed () {
          return this._allDone;
        }

        _close () {
          var _this$onServerClose;

          this._reader = undefined;
          this._allDone = true;
          this.incoming.push(null);
          (_this$onServerClose = this.onServerClose) === null || _this$onServerClose === void 0 ? void 0 : _this$onServerClose.call(this);
        }

        _pull () {
          if (this._reader === undefined) {
            return;
          }

          this._reader.read().then(({
            done,
            value
          }) => {
            if (done) {
              if (!this._isClosed()) {
                http_mp4_debug('fetch completed, total downloaded: ', this.length, ' bytes');

                this._close();
              }

              return;
            }

            if (value === undefined) {
              throw new Error('expected value to be defined');
            }

            if (this.length === undefined) {
              throw new Error('expected length to be defined');
            }

            this.length += value.length;
            const buffer = http_mp4_Buffer.from(value);

            if (!this.incoming.push({
              data: buffer,
              type: MessageType.ISOM
            })) {
              // Something happened down stream that it is no longer processing the
              // incoming data, and the stream buffer got full.
              // This could be because we are downloading too much data at once,
              // or because the downstream is frozen. The latter is most likely
              // when dealing with a live stream (as in that case we would expect
              // downstream to be able to handle the data).
              http_mp4_debug('downstream back pressure: pausing read');
            } else {
              // It's ok to read more data
              this._pull();
            }
          }).catch(err => {
            http_mp4_debug('http-source: read failed: ', err);

            if (!this._isClosed()) {
              this._close();
            }
          });
        }

      }
      ;// CONCATENATED MODULE: ./lib/pipelines/http-mse-pipeline.ts
      function http_mse_pipeline_defineProperty (obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





      /*
       * HttpMsePipeline
       *
       * A pipeline that connects to an HTTP server and can process an MP4 data stream
       * that is then sent to a HTML video element
       *
       * Handlers that can be set on the pipeline:
       * - `onServerClose`: called when the server closes the connection
       */
      class HttpMsePipeline extends Pipeline {
        constructor(config) {
          const {
            http: httpConfig,
            mediaElement
          } = config;
          const httpSource = new HttpMp4Source(httpConfig);
          const mseSink = new MseSink(mediaElement);

          httpSource.onHeaders = headers => {
            this.onHeaders && this.onHeaders(headers);
          };

          httpSource.onServerClose = () => {
            var _this$onServerClose;

            return (_this$onServerClose = this.onServerClose) === null || _this$onServerClose === void 0 ? void 0 : _this$onServerClose.call(this);
          };

          super(httpSource, mseSink);

          http_mse_pipeline_defineProperty(this, "onHeaders", void 0);

          http_mse_pipeline_defineProperty(this, "onServerClose", void 0);

          http_mse_pipeline_defineProperty(this, "http", void 0);

          http_mse_pipeline_defineProperty(this, "_src", void 0);

          http_mse_pipeline_defineProperty(this, "_sink", void 0);

          this._src = httpSource;
          this._sink = mseSink; // Expose session for external use

          this.http = httpSource;
        }

        close () {
          this._src && this._src.abort();
        }

        get currentTime () {
          return this._sink.currentTime;
        }

        async play () {
          return await this._sink.play();
        }

        pause () {
          return this._sink.pause();
        }

      }
      ;// CONCATENATED MODULE: ./lib/pipelines/index.browser.ts










      ;// CONCATENATED MODULE: ./lib/utils/protocols/index.ts





      ;// CONCATENATED MODULE: ./lib/utils/retry.ts
      /**
       * Retry failed commands.
       *
       * This retries RTSP commands that fails up to a certain
       * limit of times.
       */
      const addRTSPRetry = (rtspSession, {
        maxRetries,
        errors
      } = {
          maxRetries: 20,
          errors: [503]
        }) => {
        let retries = 0;
        const oldOnError = rtspSession.onError;

        rtspSession.onError = err => {
          oldOnError === null || oldOnError === void 0 ? void 0 : oldOnError(err);

          if (!errors.includes(err.code)) {
            return;
          } // Stop retrying after 20 tries (~20 seconds)


          if ((retries += 1) > maxRetries) {
            console.log('retry, too many', retries, maxRetries);
            return;
          } // Retry


          setTimeout(() => {
            var _rtspSession$retry;

            return (_rtspSession$retry = rtspSession.retry) === null || _rtspSession$retry === void 0 ? void 0 : _rtspSession$retry.call(rtspSession);
          }, retries * 100);
        };
      };
      ;// CONCATENATED MODULE: ./lib/utils/index.browser.ts



      ;// CONCATENATED MODULE: ./lib/index.browser.ts







    })();

/******/ 	return __webpack_exports__;
    /******/
  })()
    ;
});
